// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.World.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol.World.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* World_ZoneChanged_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_ZoneChanged_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_CreateRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_CreateRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_CreateRole_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_CreateRole_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_FetchRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_FetchRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_FetchRole_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_FetchRole_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UpdateRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UpdateRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UpdateRole_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UpdateRole_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_KickRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_KickRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_KickRole_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_KickRole_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneOnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldOnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_OnlineStat_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_OnlineStat_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_OnlineStat_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_OnlineStat_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_Chat_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_Chat_Notify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_2eWorld_2eproto() {
  protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol.World.proto");
  GOOGLE_CHECK(file != NULL);
  World_ZoneChanged_Notify_descriptor_ = file->message_type(0);
  static const int World_ZoneChanged_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_ZoneChanged_Notify, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_ZoneChanged_Notify, stzones_),
  };
  World_ZoneChanged_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_ZoneChanged_Notify_descriptor_,
      World_ZoneChanged_Notify::default_instance_,
      World_ZoneChanged_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_ZoneChanged_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_ZoneChanged_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_ZoneChanged_Notify));
  World_CreateRole_Request_descriptor_ = file->message_type(1);
  static const int World_CreateRole_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, stbirthdata_),
  };
  World_CreateRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_CreateRole_Request_descriptor_,
      World_CreateRole_Request::default_instance_,
      World_CreateRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_CreateRole_Request));
  World_CreateRole_Response_descriptor_ = file->message_type(2);
  static const int World_CreateRole_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, stroleid_),
  };
  World_CreateRole_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_CreateRole_Response_descriptor_,
      World_CreateRole_Response::default_instance_,
      World_CreateRole_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_CreateRole_Response));
  World_FetchRole_Request_descriptor_ = file->message_type(3);
  static const int World_FetchRole_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, bislogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, ireqid_),
  };
  World_FetchRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_FetchRole_Request_descriptor_,
      World_FetchRole_Request::default_instance_,
      World_FetchRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_FetchRole_Request));
  World_FetchRole_Response_descriptor_ = file->message_type(4);
  static const int World_FetchRole_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, stuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, bislogin_),
  };
  World_FetchRole_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_FetchRole_Response_descriptor_,
      World_FetchRole_Response::default_instance_,
      World_FetchRole_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_FetchRole_Response));
  World_UpdateRole_Request_descriptor_ = file->message_type(5);
  static const int World_UpdateRole_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, ireqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, stuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, bneedresponse_),
  };
  World_UpdateRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UpdateRole_Request_descriptor_,
      World_UpdateRole_Request::default_instance_,
      World_UpdateRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UpdateRole_Request));
  World_UpdateRole_Response_descriptor_ = file->message_type(6);
  static const int World_UpdateRole_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Response, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Response, iresult_),
  };
  World_UpdateRole_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UpdateRole_Response_descriptor_,
      World_UpdateRole_Response::default_instance_,
      World_UpdateRole_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UpdateRole_Response));
  World_KickRole_Request_descriptor_ = file->message_type(7);
  static const int World_KickRole_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, ifromworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, ifromzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, isessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, stkickedroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, bislogin_),
  };
  World_KickRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_KickRole_Request_descriptor_,
      World_KickRole_Request::default_instance_,
      World_KickRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_KickRole_Request));
  World_KickRole_Response_descriptor_ = file->message_type(8);
  static const int World_KickRole_Response_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, ifromworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, ifromzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, isessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, stkickedroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, bislogin_),
  };
  World_KickRole_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_KickRole_Response_descriptor_,
      World_KickRole_Response::default_instance_,
      World_KickRole_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_KickRole_Response));
  ZoneOnlineInfo_descriptor_ = file->message_type(9);
  static const int ZoneOnlineInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneOnlineInfo, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneOnlineInfo, irolenum_),
  };
  ZoneOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneOnlineInfo_descriptor_,
      ZoneOnlineInfo::default_instance_,
      ZoneOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneOnlineInfo));
  WorldOnlineInfo_descriptor_ = file->message_type(10);
  static const int WorldOnlineInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, ionlinerolenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, iregisternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, imaxonlinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, imaxregisternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, iactivezonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, stzoneinfos_),
  };
  WorldOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldOnlineInfo_descriptor_,
      WorldOnlineInfo::default_instance_,
      WorldOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldOnlineInfo));
  World_OnlineStat_Request_descriptor_ = file->message_type(11);
  static const int World_OnlineStat_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, stworldinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, urecordtime_),
  };
  World_OnlineStat_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_OnlineStat_Request_descriptor_,
      World_OnlineStat_Request::default_instance_,
      World_OnlineStat_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_OnlineStat_Request));
  World_OnlineStat_Response_descriptor_ = file->message_type(12);
  static const int World_OnlineStat_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Response, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Response, iinstanceid_),
  };
  World_OnlineStat_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_OnlineStat_Response_descriptor_,
      World_OnlineStat_Response::default_instance_,
      World_OnlineStat_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_OnlineStat_Response));
  World_Chat_Notify_descriptor_ = file->message_type(13);
  static const int World_Chat_Notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, ichannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, sttargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, szmessage_),
  };
  World_Chat_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_Chat_Notify_descriptor_,
      World_Chat_Notify::default_instance_,
      World_Chat_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_Chat_Notify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_2eWorld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_ZoneChanged_Notify_descriptor_, &World_ZoneChanged_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_CreateRole_Request_descriptor_, &World_CreateRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_CreateRole_Response_descriptor_, &World_CreateRole_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_FetchRole_Request_descriptor_, &World_FetchRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_FetchRole_Response_descriptor_, &World_FetchRole_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UpdateRole_Request_descriptor_, &World_UpdateRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UpdateRole_Response_descriptor_, &World_UpdateRole_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_KickRole_Request_descriptor_, &World_KickRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_KickRole_Response_descriptor_, &World_KickRole_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneOnlineInfo_descriptor_, &ZoneOnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldOnlineInfo_descriptor_, &WorldOnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_OnlineStat_Request_descriptor_, &World_OnlineStat_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_OnlineStat_Response_descriptor_, &World_OnlineStat_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_Chat_Notify_descriptor_, &World_Chat_Notify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_2eWorld_2eproto() {
  delete World_ZoneChanged_Notify::default_instance_;
  delete World_ZoneChanged_Notify_reflection_;
  delete World_CreateRole_Request::default_instance_;
  delete World_CreateRole_Request_reflection_;
  delete World_CreateRole_Response::default_instance_;
  delete World_CreateRole_Response_reflection_;
  delete World_FetchRole_Request::default_instance_;
  delete World_FetchRole_Request_reflection_;
  delete World_FetchRole_Response::default_instance_;
  delete World_FetchRole_Response_reflection_;
  delete World_UpdateRole_Request::default_instance_;
  delete World_UpdateRole_Request_reflection_;
  delete World_UpdateRole_Response::default_instance_;
  delete World_UpdateRole_Response_reflection_;
  delete World_KickRole_Request::default_instance_;
  delete World_KickRole_Request_reflection_;
  delete World_KickRole_Response::default_instance_;
  delete World_KickRole_Response_reflection_;
  delete ZoneOnlineInfo::default_instance_;
  delete ZoneOnlineInfo_reflection_;
  delete WorldOnlineInfo::default_instance_;
  delete WorldOnlineInfo_reflection_;
  delete World_OnlineStat_Request::default_instance_;
  delete World_OnlineStat_Request_reflection_;
  delete World_OnlineStat_Response::default_instance_;
  delete World_OnlineStat_Response_reflection_;
  delete World_Chat_Notify::default_instance_;
  delete World_Chat_Notify_reflection_;
}

void protobuf_AddDesc_GameProtocol_2eWorld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  ::protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030GameProtocol.World.proto\032\031GameProtocol"
    ".Common.proto\032\031GameProtocol.USERDB.proto"
    "\"G\n\030World_ZoneChanged_Notify\022\017\n\007worldID\030"
    "\001 \001(\r\022\032\n\007stZones\030\002 \001(\0132\t.ZoneList\"Z\n\030Wor"
    "ld_CreateRole_Request\022\013\n\003uin\030\001 \001(\r\022\r\n\005wo"
    "rld\030\002 \001(\r\022\"\n\013stBirthData\030\004 \001(\0132\r.GameUse"
    "rInfo\"G\n\031World_CreateRole_Response\022\017\n\007iR"
    "esult\030\001 \001(\005\022\031\n\010stRoleID\030\002 \001(\0132\007.RoleID\"V"
    "\n\027World_FetchRole_Request\022\031\n\010stRoleID\030\001 "
    "\001(\0132\007.RoleID\022\020\n\010bIsLogin\030\002 \001(\010\022\016\n\006iReqID"
    "\030\004 \001(\005\"{\n\030World_FetchRole_Response\022\031\n\010st"
    "RoleID\030\001 \001(\0132\007.RoleID\022\017\n\007iResult\030\002 \001(\005\022!"
    "\n\nstUserInfo\030\003 \001(\0132\r.GameUserInfo\022\020\n\010bIs"
    "Login\030\004 \001(\010\"\177\n\030World_UpdateRole_Request\022"
    "\031\n\010stRoleID\030\001 \001(\0132\007.RoleID\022\016\n\006iReqID\030\002 \001"
    "(\005\022!\n\nstUserInfo\030\003 \001(\0132\r.GameUserInfo\022\025\n"
    "\rbNeedResponse\030\004 \001(\010\"G\n\031World_UpdateRole"
    "_Response\022\031\n\010stRoleID\030\001 \001(\0132\007.RoleID\022\017\n\007"
    "iResult\030\002 \001(\005\"\212\001\n\026World_KickRole_Request"
    "\022\024\n\014iFromWorldID\030\001 \001(\005\022\023\n\013iFromZoneID\030\002 "
    "\001(\005\022\022\n\niSessionID\030\003 \001(\005\022\037\n\016stKickedRoleI"
    "D\030\004 \001(\0132\007.RoleID\022\020\n\010bIsLogin\030\005 \001(\010\"\234\001\n\027W"
    "orld_KickRole_Response\022\017\n\007iResult\030\001 \001(\005\022"
    "\024\n\014iFromWorldID\030\002 \001(\005\022\023\n\013iFromZoneID\030\003 \001"
    "(\005\022\022\n\niSessionID\030\004 \001(\005\022\037\n\016stKickedRoleID"
    "\030\005 \001(\0132\007.RoleID\022\020\n\010bIsLogin\030\006 \001(\010\"3\n\016Zon"
    "eOnlineInfo\022\017\n\007iZoneID\030\001 \001(\005\022\020\n\010iRoleNum"
    "\030\002 \001(\005\"\277\001\n\017WorldOnlineInfo\022\020\n\010iWorldID\030\001"
    " \001(\005\022\026\n\016iOnlineRoleNum\030\002 \001(\005\022\024\n\014iRegiste"
    "rNum\030\003 \001(\005\022\025\n\riMaxOnlineNum\030\004 \001(\005\022\027\n\017iMa"
    "xRegisterNum\030\005 \001(\005\022\026\n\016iActiveZoneNum\030\006 \001"
    "(\005\022$\n\013stZoneInfos\030\007 \003(\0132\017.ZoneOnlineInfo"
    "\"h\n\030World_OnlineStat_Request\022\020\n\010iWorldID"
    "\030\001 \001(\005\022%\n\013stWorldInfo\030\002 \001(\0132\020.WorldOnlin"
    "eInfo\022\023\n\013uRecordTime\030\003 \001(\005\"B\n\031World_Onli"
    "neStat_Response\022\020\n\010iWorldID\030\001 \001(\005\022\023\n\013iIn"
    "stanceID\030\002 \001(\005\"\251\001\n\021World_Chat_Notify\0228\n\010"
    "iChannel\030\001 \001(\0162\020.ChatChannelType:\024CHAT_C"
    "HANNEL_INVALID\022\031\n\010stRoleID\030\002 \001(\0132\007.RoleI"
    "D\022\017\n\007iZoneID\030\004 \001(\005\022\033\n\nstTargetID\030\005 \001(\0132\007"
    ".RoleID\022\021\n\tszMessage\030\006 \001(\t", 1626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol.World.proto", &protobuf_RegisterTypes);
  World_ZoneChanged_Notify::default_instance_ = new World_ZoneChanged_Notify();
  World_CreateRole_Request::default_instance_ = new World_CreateRole_Request();
  World_CreateRole_Response::default_instance_ = new World_CreateRole_Response();
  World_FetchRole_Request::default_instance_ = new World_FetchRole_Request();
  World_FetchRole_Response::default_instance_ = new World_FetchRole_Response();
  World_UpdateRole_Request::default_instance_ = new World_UpdateRole_Request();
  World_UpdateRole_Response::default_instance_ = new World_UpdateRole_Response();
  World_KickRole_Request::default_instance_ = new World_KickRole_Request();
  World_KickRole_Response::default_instance_ = new World_KickRole_Response();
  ZoneOnlineInfo::default_instance_ = new ZoneOnlineInfo();
  WorldOnlineInfo::default_instance_ = new WorldOnlineInfo();
  World_OnlineStat_Request::default_instance_ = new World_OnlineStat_Request();
  World_OnlineStat_Response::default_instance_ = new World_OnlineStat_Response();
  World_Chat_Notify::default_instance_ = new World_Chat_Notify();
  World_ZoneChanged_Notify::default_instance_->InitAsDefaultInstance();
  World_CreateRole_Request::default_instance_->InitAsDefaultInstance();
  World_CreateRole_Response::default_instance_->InitAsDefaultInstance();
  World_FetchRole_Request::default_instance_->InitAsDefaultInstance();
  World_FetchRole_Response::default_instance_->InitAsDefaultInstance();
  World_UpdateRole_Request::default_instance_->InitAsDefaultInstance();
  World_UpdateRole_Response::default_instance_->InitAsDefaultInstance();
  World_KickRole_Request::default_instance_->InitAsDefaultInstance();
  World_KickRole_Response::default_instance_->InitAsDefaultInstance();
  ZoneOnlineInfo::default_instance_->InitAsDefaultInstance();
  WorldOnlineInfo::default_instance_->InitAsDefaultInstance();
  World_OnlineStat_Request::default_instance_->InitAsDefaultInstance();
  World_OnlineStat_Response::default_instance_->InitAsDefaultInstance();
  World_Chat_Notify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_2eWorld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_2eWorld_2eproto {
  StaticDescriptorInitializer_GameProtocol_2eWorld_2eproto() {
    protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  }
} static_descriptor_initializer_GameProtocol_2eWorld_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int World_ZoneChanged_Notify::kWorldIDFieldNumber;
const int World_ZoneChanged_Notify::kStZonesFieldNumber;
#endif  // !_MSC_VER

World_ZoneChanged_Notify::World_ZoneChanged_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_ZoneChanged_Notify::InitAsDefaultInstance() {
  stzones_ = const_cast< ::ZoneList*>(&::ZoneList::default_instance());
}

World_ZoneChanged_Notify::World_ZoneChanged_Notify(const World_ZoneChanged_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_ZoneChanged_Notify::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  stzones_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_ZoneChanged_Notify::~World_ZoneChanged_Notify() {
  SharedDtor();
}

void World_ZoneChanged_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stzones_;
  }
}

void World_ZoneChanged_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_ZoneChanged_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_ZoneChanged_Notify_descriptor_;
}

const World_ZoneChanged_Notify& World_ZoneChanged_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_ZoneChanged_Notify* World_ZoneChanged_Notify::default_instance_ = NULL;

World_ZoneChanged_Notify* World_ZoneChanged_Notify::New() const {
  return new World_ZoneChanged_Notify;
}

void World_ZoneChanged_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    if (has_stzones()) {
      if (stzones_ != NULL) stzones_->::ZoneList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_ZoneChanged_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stZones;
        break;
      }

      // optional .ZoneList stZones = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stZones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stzones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_ZoneChanged_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 worldID = 1;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldid(), output);
  }

  // optional .ZoneList stZones = 2;
  if (has_stzones()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stzones(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_ZoneChanged_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 worldID = 1;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldid(), target);
  }

  // optional .ZoneList stZones = 2;
  if (has_stzones()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stzones(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_ZoneChanged_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 worldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }

    // optional .ZoneList stZones = 2;
    if (has_stzones()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stzones());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_ZoneChanged_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_ZoneChanged_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_ZoneChanged_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_ZoneChanged_Notify::MergeFrom(const World_ZoneChanged_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_stzones()) {
      mutable_stzones()->::ZoneList::MergeFrom(from.stzones());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_ZoneChanged_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_ZoneChanged_Notify::CopyFrom(const World_ZoneChanged_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_ZoneChanged_Notify::IsInitialized() const {

  return true;
}

void World_ZoneChanged_Notify::Swap(World_ZoneChanged_Notify* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(stzones_, other->stzones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_ZoneChanged_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_ZoneChanged_Notify_descriptor_;
  metadata.reflection = World_ZoneChanged_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_CreateRole_Request::kUinFieldNumber;
const int World_CreateRole_Request::kWorldFieldNumber;
const int World_CreateRole_Request::kStBirthDataFieldNumber;
#endif  // !_MSC_VER

World_CreateRole_Request::World_CreateRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_CreateRole_Request::InitAsDefaultInstance() {
  stbirthdata_ = const_cast< ::GameUserInfo*>(&::GameUserInfo::default_instance());
}

World_CreateRole_Request::World_CreateRole_Request(const World_CreateRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_CreateRole_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  world_ = 0u;
  stbirthdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_CreateRole_Request::~World_CreateRole_Request() {
  SharedDtor();
}

void World_CreateRole_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stbirthdata_;
  }
}

void World_CreateRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_CreateRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_CreateRole_Request_descriptor_;
}

const World_CreateRole_Request& World_CreateRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_CreateRole_Request* World_CreateRole_Request::default_instance_ = NULL;

World_CreateRole_Request* World_CreateRole_Request::New() const {
  return new World_CreateRole_Request;
}

void World_CreateRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    world_ = 0u;
    if (has_stbirthdata()) {
      if (stbirthdata_ != NULL) stbirthdata_->::GameUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_CreateRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_world;
        break;
      }

      // optional uint32 world = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_)));
          set_has_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stBirthData;
        break;
      }

      // optional .GameUserInfo stBirthData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stBirthData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbirthdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_CreateRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 world = 2;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->world(), output);
  }

  // optional .GameUserInfo stBirthData = 4;
  if (has_stbirthdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stbirthdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_CreateRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 world = 2;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->world(), target);
  }

  // optional .GameUserInfo stBirthData = 4;
  if (has_stbirthdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stbirthdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_CreateRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 world = 2;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world());
    }

    // optional .GameUserInfo stBirthData = 4;
    if (has_stbirthdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbirthdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_CreateRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_CreateRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_CreateRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_CreateRole_Request::MergeFrom(const World_CreateRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_world()) {
      set_world(from.world());
    }
    if (from.has_stbirthdata()) {
      mutable_stbirthdata()->::GameUserInfo::MergeFrom(from.stbirthdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_CreateRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_CreateRole_Request::CopyFrom(const World_CreateRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_CreateRole_Request::IsInitialized() const {

  return true;
}

void World_CreateRole_Request::Swap(World_CreateRole_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(world_, other->world_);
    std::swap(stbirthdata_, other->stbirthdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_CreateRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_CreateRole_Request_descriptor_;
  metadata.reflection = World_CreateRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_CreateRole_Response::kIResultFieldNumber;
const int World_CreateRole_Response::kStRoleIDFieldNumber;
#endif  // !_MSC_VER

World_CreateRole_Response::World_CreateRole_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_CreateRole_Response::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

World_CreateRole_Response::World_CreateRole_Response(const World_CreateRole_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_CreateRole_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stroleid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_CreateRole_Response::~World_CreateRole_Response() {
  SharedDtor();
}

void World_CreateRole_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void World_CreateRole_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_CreateRole_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_CreateRole_Response_descriptor_;
}

const World_CreateRole_Response& World_CreateRole_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_CreateRole_Response* World_CreateRole_Response::default_instance_ = NULL;

World_CreateRole_Response* World_CreateRole_Response::New() const {
  return new World_CreateRole_Response;
}

void World_CreateRole_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_CreateRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRoleID;
        break;
      }

      // optional .RoleID stRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_CreateRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_CreateRole_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_CreateRole_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .RoleID stRoleID = 2;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_CreateRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_CreateRole_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_CreateRole_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_CreateRole_Response::MergeFrom(const World_CreateRole_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_CreateRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_CreateRole_Response::CopyFrom(const World_CreateRole_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_CreateRole_Response::IsInitialized() const {

  return true;
}

void World_CreateRole_Response::Swap(World_CreateRole_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stroleid_, other->stroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_CreateRole_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_CreateRole_Response_descriptor_;
  metadata.reflection = World_CreateRole_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_FetchRole_Request::kStRoleIDFieldNumber;
const int World_FetchRole_Request::kBIsLoginFieldNumber;
const int World_FetchRole_Request::kIReqIDFieldNumber;
#endif  // !_MSC_VER

World_FetchRole_Request::World_FetchRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_FetchRole_Request::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

World_FetchRole_Request::World_FetchRole_Request(const World_FetchRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_FetchRole_Request::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  bislogin_ = false;
  ireqid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_FetchRole_Request::~World_FetchRole_Request() {
  SharedDtor();
}

void World_FetchRole_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void World_FetchRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_FetchRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_FetchRole_Request_descriptor_;
}

const World_FetchRole_Request& World_FetchRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_FetchRole_Request* World_FetchRole_Request::default_instance_ = NULL;

World_FetchRole_Request* World_FetchRole_Request::New() const {
  return new World_FetchRole_Request;
}

void World_FetchRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    bislogin_ = false;
    ireqid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_FetchRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsLogin;
        break;
      }

      // optional bool bIsLogin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bislogin_)));
          set_has_bislogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iReqID;
        break;
      }

      // optional int32 iReqID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iReqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ireqid_)));
          set_has_ireqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_FetchRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional bool bIsLogin = 2;
  if (has_bislogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bislogin(), output);
  }

  // optional int32 iReqID = 4;
  if (has_ireqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ireqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_FetchRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional bool bIsLogin = 2;
  if (has_bislogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bislogin(), target);
  }

  // optional int32 iReqID = 4;
  if (has_ireqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ireqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_FetchRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional bool bIsLogin = 2;
    if (has_bislogin()) {
      total_size += 1 + 1;
    }

    // optional int32 iReqID = 4;
    if (has_ireqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ireqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_FetchRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_FetchRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_FetchRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_FetchRole_Request::MergeFrom(const World_FetchRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_bislogin()) {
      set_bislogin(from.bislogin());
    }
    if (from.has_ireqid()) {
      set_ireqid(from.ireqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_FetchRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_FetchRole_Request::CopyFrom(const World_FetchRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_FetchRole_Request::IsInitialized() const {

  return true;
}

void World_FetchRole_Request::Swap(World_FetchRole_Request* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(bislogin_, other->bislogin_);
    std::swap(ireqid_, other->ireqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_FetchRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_FetchRole_Request_descriptor_;
  metadata.reflection = World_FetchRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_FetchRole_Response::kStRoleIDFieldNumber;
const int World_FetchRole_Response::kIResultFieldNumber;
const int World_FetchRole_Response::kStUserInfoFieldNumber;
const int World_FetchRole_Response::kBIsLoginFieldNumber;
#endif  // !_MSC_VER

World_FetchRole_Response::World_FetchRole_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_FetchRole_Response::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
  stuserinfo_ = const_cast< ::GameUserInfo*>(&::GameUserInfo::default_instance());
}

World_FetchRole_Response::World_FetchRole_Response(const World_FetchRole_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_FetchRole_Response::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  iresult_ = 0;
  stuserinfo_ = NULL;
  bislogin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_FetchRole_Response::~World_FetchRole_Response() {
  SharedDtor();
}

void World_FetchRole_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
    delete stuserinfo_;
  }
}

void World_FetchRole_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_FetchRole_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_FetchRole_Response_descriptor_;
}

const World_FetchRole_Response& World_FetchRole_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_FetchRole_Response* World_FetchRole_Response::default_instance_ = NULL;

World_FetchRole_Response* World_FetchRole_Response::New() const {
  return new World_FetchRole_Response;
}

void World_FetchRole_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    iresult_ = 0;
    if (has_stuserinfo()) {
      if (stuserinfo_ != NULL) stuserinfo_->::GameUserInfo::Clear();
    }
    bislogin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_FetchRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iResult;
        break;
      }

      // optional int32 iResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stUserInfo;
        break;
      }

      // optional .GameUserInfo stUserInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bIsLogin;
        break;
      }

      // optional bool bIsLogin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bislogin_)));
          set_has_bislogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_FetchRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional int32 iResult = 2;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iresult(), output);
  }

  // optional .GameUserInfo stUserInfo = 3;
  if (has_stuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stuserinfo(), output);
  }

  // optional bool bIsLogin = 4;
  if (has_bislogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bislogin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_FetchRole_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional int32 iResult = 2;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iresult(), target);
  }

  // optional .GameUserInfo stUserInfo = 3;
  if (has_stuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stuserinfo(), target);
  }

  // optional bool bIsLogin = 4;
  if (has_bislogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bislogin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_FetchRole_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iResult = 2;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .GameUserInfo stUserInfo = 3;
    if (has_stuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stuserinfo());
    }

    // optional bool bIsLogin = 4;
    if (has_bislogin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_FetchRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_FetchRole_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_FetchRole_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_FetchRole_Response::MergeFrom(const World_FetchRole_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stuserinfo()) {
      mutable_stuserinfo()->::GameUserInfo::MergeFrom(from.stuserinfo());
    }
    if (from.has_bislogin()) {
      set_bislogin(from.bislogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_FetchRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_FetchRole_Response::CopyFrom(const World_FetchRole_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_FetchRole_Response::IsInitialized() const {

  return true;
}

void World_FetchRole_Response::Swap(World_FetchRole_Response* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(iresult_, other->iresult_);
    std::swap(stuserinfo_, other->stuserinfo_);
    std::swap(bislogin_, other->bislogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_FetchRole_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_FetchRole_Response_descriptor_;
  metadata.reflection = World_FetchRole_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UpdateRole_Request::kStRoleIDFieldNumber;
const int World_UpdateRole_Request::kIReqIDFieldNumber;
const int World_UpdateRole_Request::kStUserInfoFieldNumber;
const int World_UpdateRole_Request::kBNeedResponseFieldNumber;
#endif  // !_MSC_VER

World_UpdateRole_Request::World_UpdateRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UpdateRole_Request::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
  stuserinfo_ = const_cast< ::GameUserInfo*>(&::GameUserInfo::default_instance());
}

World_UpdateRole_Request::World_UpdateRole_Request(const World_UpdateRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UpdateRole_Request::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  ireqid_ = 0;
  stuserinfo_ = NULL;
  bneedresponse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UpdateRole_Request::~World_UpdateRole_Request() {
  SharedDtor();
}

void World_UpdateRole_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
    delete stuserinfo_;
  }
}

void World_UpdateRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UpdateRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UpdateRole_Request_descriptor_;
}

const World_UpdateRole_Request& World_UpdateRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_UpdateRole_Request* World_UpdateRole_Request::default_instance_ = NULL;

World_UpdateRole_Request* World_UpdateRole_Request::New() const {
  return new World_UpdateRole_Request;
}

void World_UpdateRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    ireqid_ = 0;
    if (has_stuserinfo()) {
      if (stuserinfo_ != NULL) stuserinfo_->::GameUserInfo::Clear();
    }
    bneedresponse_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UpdateRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iReqID;
        break;
      }

      // optional int32 iReqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iReqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ireqid_)));
          set_has_ireqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stUserInfo;
        break;
      }

      // optional .GameUserInfo stUserInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bNeedResponse;
        break;
      }

      // optional bool bNeedResponse = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bNeedResponse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bneedresponse_)));
          set_has_bneedresponse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UpdateRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional int32 iReqID = 2;
  if (has_ireqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ireqid(), output);
  }

  // optional .GameUserInfo stUserInfo = 3;
  if (has_stuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stuserinfo(), output);
  }

  // optional bool bNeedResponse = 4;
  if (has_bneedresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bneedresponse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UpdateRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional int32 iReqID = 2;
  if (has_ireqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ireqid(), target);
  }

  // optional .GameUserInfo stUserInfo = 3;
  if (has_stuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stuserinfo(), target);
  }

  // optional bool bNeedResponse = 4;
  if (has_bneedresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bneedresponse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UpdateRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iReqID = 2;
    if (has_ireqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ireqid());
    }

    // optional .GameUserInfo stUserInfo = 3;
    if (has_stuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stuserinfo());
    }

    // optional bool bNeedResponse = 4;
    if (has_bneedresponse()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UpdateRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UpdateRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UpdateRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UpdateRole_Request::MergeFrom(const World_UpdateRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_ireqid()) {
      set_ireqid(from.ireqid());
    }
    if (from.has_stuserinfo()) {
      mutable_stuserinfo()->::GameUserInfo::MergeFrom(from.stuserinfo());
    }
    if (from.has_bneedresponse()) {
      set_bneedresponse(from.bneedresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UpdateRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UpdateRole_Request::CopyFrom(const World_UpdateRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UpdateRole_Request::IsInitialized() const {

  return true;
}

void World_UpdateRole_Request::Swap(World_UpdateRole_Request* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(ireqid_, other->ireqid_);
    std::swap(stuserinfo_, other->stuserinfo_);
    std::swap(bneedresponse_, other->bneedresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UpdateRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UpdateRole_Request_descriptor_;
  metadata.reflection = World_UpdateRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UpdateRole_Response::kStRoleIDFieldNumber;
const int World_UpdateRole_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

World_UpdateRole_Response::World_UpdateRole_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UpdateRole_Response::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

World_UpdateRole_Response::World_UpdateRole_Response(const World_UpdateRole_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UpdateRole_Response::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UpdateRole_Response::~World_UpdateRole_Response() {
  SharedDtor();
}

void World_UpdateRole_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void World_UpdateRole_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UpdateRole_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UpdateRole_Response_descriptor_;
}

const World_UpdateRole_Response& World_UpdateRole_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_UpdateRole_Response* World_UpdateRole_Response::default_instance_ = NULL;

World_UpdateRole_Response* World_UpdateRole_Response::New() const {
  return new World_UpdateRole_Response;
}

void World_UpdateRole_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UpdateRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iResult;
        break;
      }

      // optional int32 iResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UpdateRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional int32 iResult = 2;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UpdateRole_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional int32 iResult = 2;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UpdateRole_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iResult = 2;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UpdateRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UpdateRole_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UpdateRole_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UpdateRole_Response::MergeFrom(const World_UpdateRole_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UpdateRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UpdateRole_Response::CopyFrom(const World_UpdateRole_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UpdateRole_Response::IsInitialized() const {

  return true;
}

void World_UpdateRole_Response::Swap(World_UpdateRole_Response* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UpdateRole_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UpdateRole_Response_descriptor_;
  metadata.reflection = World_UpdateRole_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_KickRole_Request::kIFromWorldIDFieldNumber;
const int World_KickRole_Request::kIFromZoneIDFieldNumber;
const int World_KickRole_Request::kISessionIDFieldNumber;
const int World_KickRole_Request::kStKickedRoleIDFieldNumber;
const int World_KickRole_Request::kBIsLoginFieldNumber;
#endif  // !_MSC_VER

World_KickRole_Request::World_KickRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_KickRole_Request::InitAsDefaultInstance() {
  stkickedroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

World_KickRole_Request::World_KickRole_Request(const World_KickRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_KickRole_Request::SharedCtor() {
  _cached_size_ = 0;
  ifromworldid_ = 0;
  ifromzoneid_ = 0;
  isessionid_ = 0;
  stkickedroleid_ = NULL;
  bislogin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_KickRole_Request::~World_KickRole_Request() {
  SharedDtor();
}

void World_KickRole_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stkickedroleid_;
  }
}

void World_KickRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_KickRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_KickRole_Request_descriptor_;
}

const World_KickRole_Request& World_KickRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_KickRole_Request* World_KickRole_Request::default_instance_ = NULL;

World_KickRole_Request* World_KickRole_Request::New() const {
  return new World_KickRole_Request;
}

void World_KickRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ifromworldid_ = 0;
    ifromzoneid_ = 0;
    isessionid_ = 0;
    if (has_stkickedroleid()) {
      if (stkickedroleid_ != NULL) stkickedroleid_->::RoleID::Clear();
    }
    bislogin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_KickRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iFromWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromworldid_)));
          set_has_ifromworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iSessionID;
        break;
      }

      // optional int32 iSessionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isessionid_)));
          set_has_isessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stKickedRoleID;
        break;
      }

      // optional .RoleID stKickedRoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stKickedRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stkickedroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bIsLogin;
        break;
      }

      // optional bool bIsLogin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bislogin_)));
          set_has_bislogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_KickRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iFromWorldID = 1;
  if (has_ifromworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ifromworldid(), output);
  }

  // optional int32 iFromZoneID = 2;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifromzoneid(), output);
  }

  // optional int32 iSessionID = 3;
  if (has_isessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isessionid(), output);
  }

  // optional .RoleID stKickedRoleID = 4;
  if (has_stkickedroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stkickedroleid(), output);
  }

  // optional bool bIsLogin = 5;
  if (has_bislogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bislogin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_KickRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iFromWorldID = 1;
  if (has_ifromworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ifromworldid(), target);
  }

  // optional int32 iFromZoneID = 2;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifromzoneid(), target);
  }

  // optional int32 iSessionID = 3;
  if (has_isessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isessionid(), target);
  }

  // optional .RoleID stKickedRoleID = 4;
  if (has_stkickedroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stkickedroleid(), target);
  }

  // optional bool bIsLogin = 5;
  if (has_bislogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bislogin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_KickRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iFromWorldID = 1;
    if (has_ifromworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromworldid());
    }

    // optional int32 iFromZoneID = 2;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

    // optional int32 iSessionID = 3;
    if (has_isessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isessionid());
    }

    // optional .RoleID stKickedRoleID = 4;
    if (has_stkickedroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stkickedroleid());
    }

    // optional bool bIsLogin = 5;
    if (has_bislogin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_KickRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_KickRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_KickRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_KickRole_Request::MergeFrom(const World_KickRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifromworldid()) {
      set_ifromworldid(from.ifromworldid());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
    if (from.has_isessionid()) {
      set_isessionid(from.isessionid());
    }
    if (from.has_stkickedroleid()) {
      mutable_stkickedroleid()->::RoleID::MergeFrom(from.stkickedroleid());
    }
    if (from.has_bislogin()) {
      set_bislogin(from.bislogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_KickRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_KickRole_Request::CopyFrom(const World_KickRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_KickRole_Request::IsInitialized() const {

  return true;
}

void World_KickRole_Request::Swap(World_KickRole_Request* other) {
  if (other != this) {
    std::swap(ifromworldid_, other->ifromworldid_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(isessionid_, other->isessionid_);
    std::swap(stkickedroleid_, other->stkickedroleid_);
    std::swap(bislogin_, other->bislogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_KickRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_KickRole_Request_descriptor_;
  metadata.reflection = World_KickRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_KickRole_Response::kIResultFieldNumber;
const int World_KickRole_Response::kIFromWorldIDFieldNumber;
const int World_KickRole_Response::kIFromZoneIDFieldNumber;
const int World_KickRole_Response::kISessionIDFieldNumber;
const int World_KickRole_Response::kStKickedRoleIDFieldNumber;
const int World_KickRole_Response::kBIsLoginFieldNumber;
#endif  // !_MSC_VER

World_KickRole_Response::World_KickRole_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_KickRole_Response::InitAsDefaultInstance() {
  stkickedroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

World_KickRole_Response::World_KickRole_Response(const World_KickRole_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_KickRole_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ifromworldid_ = 0;
  ifromzoneid_ = 0;
  isessionid_ = 0;
  stkickedroleid_ = NULL;
  bislogin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_KickRole_Response::~World_KickRole_Response() {
  SharedDtor();
}

void World_KickRole_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stkickedroleid_;
  }
}

void World_KickRole_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_KickRole_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_KickRole_Response_descriptor_;
}

const World_KickRole_Response& World_KickRole_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_KickRole_Response* World_KickRole_Response::default_instance_ = NULL;

World_KickRole_Response* World_KickRole_Response::New() const {
  return new World_KickRole_Response;
}

void World_KickRole_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    ifromworldid_ = 0;
    ifromzoneid_ = 0;
    isessionid_ = 0;
    if (has_stkickedroleid()) {
      if (stkickedroleid_ != NULL) stkickedroleid_->::RoleID::Clear();
    }
    bislogin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_KickRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFromWorldID;
        break;
      }

      // optional int32 iFromWorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromworldid_)));
          set_has_ifromworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iSessionID;
        break;
      }

      // optional int32 iSessionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isessionid_)));
          set_has_isessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stKickedRoleID;
        break;
      }

      // optional .RoleID stKickedRoleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stKickedRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stkickedroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bIsLogin;
        break;
      }

      // optional bool bIsLogin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bislogin_)));
          set_has_bislogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_KickRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iFromWorldID = 2;
  if (has_ifromworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifromworldid(), output);
  }

  // optional int32 iFromZoneID = 3;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ifromzoneid(), output);
  }

  // optional int32 iSessionID = 4;
  if (has_isessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isessionid(), output);
  }

  // optional .RoleID stKickedRoleID = 5;
  if (has_stkickedroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stkickedroleid(), output);
  }

  // optional bool bIsLogin = 6;
  if (has_bislogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bislogin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_KickRole_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iFromWorldID = 2;
  if (has_ifromworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifromworldid(), target);
  }

  // optional int32 iFromZoneID = 3;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ifromzoneid(), target);
  }

  // optional int32 iSessionID = 4;
  if (has_isessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isessionid(), target);
  }

  // optional .RoleID stKickedRoleID = 5;
  if (has_stkickedroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stkickedroleid(), target);
  }

  // optional bool bIsLogin = 6;
  if (has_bislogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bislogin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_KickRole_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iFromWorldID = 2;
    if (has_ifromworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromworldid());
    }

    // optional int32 iFromZoneID = 3;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

    // optional int32 iSessionID = 4;
    if (has_isessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isessionid());
    }

    // optional .RoleID stKickedRoleID = 5;
    if (has_stkickedroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stkickedroleid());
    }

    // optional bool bIsLogin = 6;
    if (has_bislogin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_KickRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_KickRole_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_KickRole_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_KickRole_Response::MergeFrom(const World_KickRole_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_ifromworldid()) {
      set_ifromworldid(from.ifromworldid());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
    if (from.has_isessionid()) {
      set_isessionid(from.isessionid());
    }
    if (from.has_stkickedroleid()) {
      mutable_stkickedroleid()->::RoleID::MergeFrom(from.stkickedroleid());
    }
    if (from.has_bislogin()) {
      set_bislogin(from.bislogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_KickRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_KickRole_Response::CopyFrom(const World_KickRole_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_KickRole_Response::IsInitialized() const {

  return true;
}

void World_KickRole_Response::Swap(World_KickRole_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(ifromworldid_, other->ifromworldid_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(isessionid_, other->isessionid_);
    std::swap(stkickedroleid_, other->stkickedroleid_);
    std::swap(bislogin_, other->bislogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_KickRole_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_KickRole_Response_descriptor_;
  metadata.reflection = World_KickRole_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneOnlineInfo::kIZoneIDFieldNumber;
const int ZoneOnlineInfo::kIRoleNumFieldNumber;
#endif  // !_MSC_VER

ZoneOnlineInfo::ZoneOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneOnlineInfo::InitAsDefaultInstance() {
}

ZoneOnlineInfo::ZoneOnlineInfo(const ZoneOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  izoneid_ = 0;
  irolenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneOnlineInfo::~ZoneOnlineInfo() {
  SharedDtor();
}

void ZoneOnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneOnlineInfo_descriptor_;
}

const ZoneOnlineInfo& ZoneOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

ZoneOnlineInfo* ZoneOnlineInfo::default_instance_ = NULL;

ZoneOnlineInfo* ZoneOnlineInfo::New() const {
  return new ZoneOnlineInfo;
}

void ZoneOnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    izoneid_ = 0;
    irolenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iZoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iRoleNum;
        break;
      }

      // optional int32 iRoleNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRoleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irolenum_)));
          set_has_irolenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iZoneID = 1;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->izoneid(), output);
  }

  // optional int32 iRoleNum = 2;
  if (has_irolenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->irolenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iZoneID = 1;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->izoneid(), target);
  }

  // optional int32 iRoleNum = 2;
  if (has_irolenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->irolenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneOnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iZoneID = 1;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional int32 iRoleNum = 2;
    if (has_irolenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irolenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneOnlineInfo::MergeFrom(const ZoneOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_irolenum()) {
      set_irolenum(from.irolenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneOnlineInfo::CopyFrom(const ZoneOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneOnlineInfo::IsInitialized() const {

  return true;
}

void ZoneOnlineInfo::Swap(ZoneOnlineInfo* other) {
  if (other != this) {
    std::swap(izoneid_, other->izoneid_);
    std::swap(irolenum_, other->irolenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneOnlineInfo_descriptor_;
  metadata.reflection = ZoneOnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldOnlineInfo::kIWorldIDFieldNumber;
const int WorldOnlineInfo::kIOnlineRoleNumFieldNumber;
const int WorldOnlineInfo::kIRegisterNumFieldNumber;
const int WorldOnlineInfo::kIMaxOnlineNumFieldNumber;
const int WorldOnlineInfo::kIMaxRegisterNumFieldNumber;
const int WorldOnlineInfo::kIActiveZoneNumFieldNumber;
const int WorldOnlineInfo::kStZoneInfosFieldNumber;
#endif  // !_MSC_VER

WorldOnlineInfo::WorldOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldOnlineInfo::InitAsDefaultInstance() {
}

WorldOnlineInfo::WorldOnlineInfo(const WorldOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  ionlinerolenum_ = 0;
  iregisternum_ = 0;
  imaxonlinenum_ = 0;
  imaxregisternum_ = 0;
  iactivezonenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldOnlineInfo::~WorldOnlineInfo() {
  SharedDtor();
}

void WorldOnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldOnlineInfo_descriptor_;
}

const WorldOnlineInfo& WorldOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

WorldOnlineInfo* WorldOnlineInfo::default_instance_ = NULL;

WorldOnlineInfo* WorldOnlineInfo::New() const {
  return new WorldOnlineInfo;
}

void WorldOnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    ionlinerolenum_ = 0;
    iregisternum_ = 0;
    imaxonlinenum_ = 0;
    imaxregisternum_ = 0;
    iactivezonenum_ = 0;
  }
  stzoneinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iOnlineRoleNum;
        break;
      }

      // optional int32 iOnlineRoleNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOnlineRoleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ionlinerolenum_)));
          set_has_ionlinerolenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRegisterNum;
        break;
      }

      // optional int32 iRegisterNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRegisterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iregisternum_)));
          set_has_iregisternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iMaxOnlineNum;
        break;
      }

      // optional int32 iMaxOnlineNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMaxOnlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imaxonlinenum_)));
          set_has_imaxonlinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iMaxRegisterNum;
        break;
      }

      // optional int32 iMaxRegisterNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMaxRegisterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imaxregisternum_)));
          set_has_imaxregisternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iActiveZoneNum;
        break;
      }

      // optional int32 iActiveZoneNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iActiveZoneNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iactivezonenum_)));
          set_has_iactivezonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stZoneInfos;
        break;
      }

      // repeated .ZoneOnlineInfo stZoneInfos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stZoneInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stzoneinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stZoneInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // optional int32 iOnlineRoleNum = 2;
  if (has_ionlinerolenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ionlinerolenum(), output);
  }

  // optional int32 iRegisterNum = 3;
  if (has_iregisternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iregisternum(), output);
  }

  // optional int32 iMaxOnlineNum = 4;
  if (has_imaxonlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->imaxonlinenum(), output);
  }

  // optional int32 iMaxRegisterNum = 5;
  if (has_imaxregisternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->imaxregisternum(), output);
  }

  // optional int32 iActiveZoneNum = 6;
  if (has_iactivezonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->iactivezonenum(), output);
  }

  // repeated .ZoneOnlineInfo stZoneInfos = 7;
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stzoneinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // optional int32 iOnlineRoleNum = 2;
  if (has_ionlinerolenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ionlinerolenum(), target);
  }

  // optional int32 iRegisterNum = 3;
  if (has_iregisternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iregisternum(), target);
  }

  // optional int32 iMaxOnlineNum = 4;
  if (has_imaxonlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->imaxonlinenum(), target);
  }

  // optional int32 iMaxRegisterNum = 5;
  if (has_imaxregisternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->imaxregisternum(), target);
  }

  // optional int32 iActiveZoneNum = 6;
  if (has_iactivezonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->iactivezonenum(), target);
  }

  // repeated .ZoneOnlineInfo stZoneInfos = 7;
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stzoneinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldOnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional int32 iOnlineRoleNum = 2;
    if (has_ionlinerolenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ionlinerolenum());
    }

    // optional int32 iRegisterNum = 3;
    if (has_iregisternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iregisternum());
    }

    // optional int32 iMaxOnlineNum = 4;
    if (has_imaxonlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imaxonlinenum());
    }

    // optional int32 iMaxRegisterNum = 5;
    if (has_imaxregisternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imaxregisternum());
    }

    // optional int32 iActiveZoneNum = 6;
    if (has_iactivezonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iactivezonenum());
    }

  }
  // repeated .ZoneOnlineInfo stZoneInfos = 7;
  total_size += 1 * this->stzoneinfos_size();
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stzoneinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldOnlineInfo::MergeFrom(const WorldOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stzoneinfos_.MergeFrom(from.stzoneinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_ionlinerolenum()) {
      set_ionlinerolenum(from.ionlinerolenum());
    }
    if (from.has_iregisternum()) {
      set_iregisternum(from.iregisternum());
    }
    if (from.has_imaxonlinenum()) {
      set_imaxonlinenum(from.imaxonlinenum());
    }
    if (from.has_imaxregisternum()) {
      set_imaxregisternum(from.imaxregisternum());
    }
    if (from.has_iactivezonenum()) {
      set_iactivezonenum(from.iactivezonenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldOnlineInfo::CopyFrom(const WorldOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldOnlineInfo::IsInitialized() const {

  return true;
}

void WorldOnlineInfo::Swap(WorldOnlineInfo* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(ionlinerolenum_, other->ionlinerolenum_);
    std::swap(iregisternum_, other->iregisternum_);
    std::swap(imaxonlinenum_, other->imaxonlinenum_);
    std::swap(imaxregisternum_, other->imaxregisternum_);
    std::swap(iactivezonenum_, other->iactivezonenum_);
    stzoneinfos_.Swap(&other->stzoneinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldOnlineInfo_descriptor_;
  metadata.reflection = WorldOnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_OnlineStat_Request::kIWorldIDFieldNumber;
const int World_OnlineStat_Request::kStWorldInfoFieldNumber;
const int World_OnlineStat_Request::kURecordTimeFieldNumber;
#endif  // !_MSC_VER

World_OnlineStat_Request::World_OnlineStat_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_OnlineStat_Request::InitAsDefaultInstance() {
  stworldinfo_ = const_cast< ::WorldOnlineInfo*>(&::WorldOnlineInfo::default_instance());
}

World_OnlineStat_Request::World_OnlineStat_Request(const World_OnlineStat_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_OnlineStat_Request::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  stworldinfo_ = NULL;
  urecordtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_OnlineStat_Request::~World_OnlineStat_Request() {
  SharedDtor();
}

void World_OnlineStat_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stworldinfo_;
  }
}

void World_OnlineStat_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_OnlineStat_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_OnlineStat_Request_descriptor_;
}

const World_OnlineStat_Request& World_OnlineStat_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_OnlineStat_Request* World_OnlineStat_Request::default_instance_ = NULL;

World_OnlineStat_Request* World_OnlineStat_Request::New() const {
  return new World_OnlineStat_Request;
}

void World_OnlineStat_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    if (has_stworldinfo()) {
      if (stworldinfo_ != NULL) stworldinfo_->::WorldOnlineInfo::Clear();
    }
    urecordtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_OnlineStat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stWorldInfo;
        break;
      }

      // optional .WorldOnlineInfo stWorldInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stWorldInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stworldinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uRecordTime;
        break;
      }

      // optional int32 uRecordTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uRecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &urecordtime_)));
          set_has_urecordtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_OnlineStat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // optional .WorldOnlineInfo stWorldInfo = 2;
  if (has_stworldinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stworldinfo(), output);
  }

  // optional int32 uRecordTime = 3;
  if (has_urecordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->urecordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_OnlineStat_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // optional .WorldOnlineInfo stWorldInfo = 2;
  if (has_stworldinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stworldinfo(), target);
  }

  // optional int32 uRecordTime = 3;
  if (has_urecordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->urecordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_OnlineStat_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional .WorldOnlineInfo stWorldInfo = 2;
    if (has_stworldinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stworldinfo());
    }

    // optional int32 uRecordTime = 3;
    if (has_urecordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->urecordtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_OnlineStat_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_OnlineStat_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_OnlineStat_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_OnlineStat_Request::MergeFrom(const World_OnlineStat_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_stworldinfo()) {
      mutable_stworldinfo()->::WorldOnlineInfo::MergeFrom(from.stworldinfo());
    }
    if (from.has_urecordtime()) {
      set_urecordtime(from.urecordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_OnlineStat_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_OnlineStat_Request::CopyFrom(const World_OnlineStat_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_OnlineStat_Request::IsInitialized() const {

  return true;
}

void World_OnlineStat_Request::Swap(World_OnlineStat_Request* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(stworldinfo_, other->stworldinfo_);
    std::swap(urecordtime_, other->urecordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_OnlineStat_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_OnlineStat_Request_descriptor_;
  metadata.reflection = World_OnlineStat_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_OnlineStat_Response::kIWorldIDFieldNumber;
const int World_OnlineStat_Response::kIInstanceIDFieldNumber;
#endif  // !_MSC_VER

World_OnlineStat_Response::World_OnlineStat_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_OnlineStat_Response::InitAsDefaultInstance() {
}

World_OnlineStat_Response::World_OnlineStat_Response(const World_OnlineStat_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_OnlineStat_Response::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  iinstanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_OnlineStat_Response::~World_OnlineStat_Response() {
  SharedDtor();
}

void World_OnlineStat_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_OnlineStat_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_OnlineStat_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_OnlineStat_Response_descriptor_;
}

const World_OnlineStat_Response& World_OnlineStat_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_OnlineStat_Response* World_OnlineStat_Response::default_instance_ = NULL;

World_OnlineStat_Response* World_OnlineStat_Response::New() const {
  return new World_OnlineStat_Response;
}

void World_OnlineStat_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    iinstanceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_OnlineStat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iInstanceID;
        break;
      }

      // optional int32 iInstanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iinstanceid_)));
          set_has_iinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_OnlineStat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // optional int32 iInstanceID = 2;
  if (has_iinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iinstanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_OnlineStat_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // optional int32 iInstanceID = 2;
  if (has_iinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iinstanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_OnlineStat_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional int32 iInstanceID = 2;
    if (has_iinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iinstanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_OnlineStat_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_OnlineStat_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_OnlineStat_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_OnlineStat_Response::MergeFrom(const World_OnlineStat_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_iinstanceid()) {
      set_iinstanceid(from.iinstanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_OnlineStat_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_OnlineStat_Response::CopyFrom(const World_OnlineStat_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_OnlineStat_Response::IsInitialized() const {

  return true;
}

void World_OnlineStat_Response::Swap(World_OnlineStat_Response* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(iinstanceid_, other->iinstanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_OnlineStat_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_OnlineStat_Response_descriptor_;
  metadata.reflection = World_OnlineStat_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_Chat_Notify::kIChannelFieldNumber;
const int World_Chat_Notify::kStRoleIDFieldNumber;
const int World_Chat_Notify::kIZoneIDFieldNumber;
const int World_Chat_Notify::kStTargetIDFieldNumber;
const int World_Chat_Notify::kSzMessageFieldNumber;
#endif  // !_MSC_VER

World_Chat_Notify::World_Chat_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_Chat_Notify::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
  sttargetid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

World_Chat_Notify::World_Chat_Notify(const World_Chat_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_Chat_Notify::SharedCtor() {
  _cached_size_ = 0;
  ichannel_ = 0;
  stroleid_ = NULL;
  izoneid_ = 0;
  sttargetid_ = NULL;
  szmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_Chat_Notify::~World_Chat_Notify() {
  SharedDtor();
}

void World_Chat_Notify::SharedDtor() {
  if (szmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete szmessage_;
  }
  if (this != default_instance_) {
    delete stroleid_;
    delete sttargetid_;
  }
}

void World_Chat_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_Chat_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_Chat_Notify_descriptor_;
}

const World_Chat_Notify& World_Chat_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eWorld_2eproto();
  return *default_instance_;
}

World_Chat_Notify* World_Chat_Notify::default_instance_ = NULL;

World_Chat_Notify* World_Chat_Notify::New() const {
  return new World_Chat_Notify;
}

void World_Chat_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ichannel_ = 0;
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    izoneid_ = 0;
    if (has_sttargetid()) {
      if (sttargetid_ != NULL) sttargetid_->::RoleID::Clear();
    }
    if (has_szmessage()) {
      if (szmessage_ != &::google::protobuf::internal::kEmptyString) {
        szmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_Chat_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatChannelType_IsValid(value)) {
            set_ichannel(static_cast< ::ChatChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRoleID;
        break;
      }

      // optional .RoleID stRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stTargetID;
        break;
      }

      // optional .RoleID stTargetID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stTargetID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttargetid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_szMessage;
        break;
      }

      // optional string szMessage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szmessage().data(), this->szmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_Chat_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
  if (has_ichannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ichannel(), output);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroleid(), output);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->izoneid(), output);
  }

  // optional .RoleID stTargetID = 5;
  if (has_sttargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sttargetid(), output);
  }

  // optional string szMessage = 6;
  if (has_szmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmessage().data(), this->szmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->szmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_Chat_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
  if (has_ichannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ichannel(), target);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stroleid(), target);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->izoneid(), target);
  }

  // optional .RoleID stTargetID = 5;
  if (has_sttargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sttargetid(), target);
  }

  // optional string szMessage = 6;
  if (has_szmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmessage().data(), this->szmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->szmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_Chat_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
    if (has_ichannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ichannel());
    }

    // optional .RoleID stRoleID = 2;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iZoneID = 4;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional .RoleID stTargetID = 5;
    if (has_sttargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sttargetid());
    }

    // optional string szMessage = 6;
    if (has_szmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_Chat_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_Chat_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_Chat_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_Chat_Notify::MergeFrom(const World_Chat_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ichannel()) {
      set_ichannel(from.ichannel());
    }
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_sttargetid()) {
      mutable_sttargetid()->::RoleID::MergeFrom(from.sttargetid());
    }
    if (from.has_szmessage()) {
      set_szmessage(from.szmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_Chat_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_Chat_Notify::CopyFrom(const World_Chat_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_Chat_Notify::IsInitialized() const {

  return true;
}

void World_Chat_Notify::Swap(World_Chat_Notify* other) {
  if (other != this) {
    std::swap(ichannel_, other->ichannel_);
    std::swap(stroleid_, other->stroleid_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(sttargetid_, other->sttargetid_);
    std::swap(szmessage_, other->szmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_Chat_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_Chat_Notify_descriptor_;
  metadata.reflection = World_Chat_Notify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
