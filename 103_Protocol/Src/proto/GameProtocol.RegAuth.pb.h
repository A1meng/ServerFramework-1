// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.RegAuth.proto

#ifndef PROTOBUF_GameProtocol_2eRegAuth_2eproto__INCLUDED
#define PROTOBUF_GameProtocol_2eRegAuth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "GameProtocol.Common.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

class AccountID;
class RegAuth_RegAccount_Request;
class RegAuth_RegAccount_Response;
class RegAuth_AuthAccount_Request;
class RegAuth_AuthAccount_Response;
class RegAuth_UpdateAccount_Request;
class RegAuth_UpdateAccount_Response;
class AccountDB_AddAccount_Request;
class AccountDB_AddAccount_Response;
class AccountDB_FetchAccount_Request;
class AccountDB_FetchAccount_Response;
class AccountDB_UpdateAccount_Request;
class AccountDB_UpdateAccount_Response;
class AccountDB_DeleteAccount_Request;
class AccountDB_DeleteAccount_Response;

enum enAccountType {
  LOGIN_PLATFORM_INVALID = 0,
  LOGIN_PLATFORM_MAIN = 1
};
bool enAccountType_IsValid(int value);
const enAccountType enAccountType_MIN = LOGIN_PLATFORM_INVALID;
const enAccountType enAccountType_MAX = LOGIN_PLATFORM_MAIN;
const int enAccountType_ARRAYSIZE = enAccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enAccountType_descriptor();
inline const ::std::string& enAccountType_Name(enAccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enAccountType_descriptor(), value);
}
inline bool enAccountType_Parse(
    const ::std::string& name, enAccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enAccountType>(
    enAccountType_descriptor(), name, value);
}
enum enAddAccountType {
  EN_ADD_ACCOUNT_INVALID = 0,
  EN_ADD_ACCOUNT_GUEST = 1,
  EN_ADD_ACCOUNT_REGISTER = 2,
  EN_ADD_ACCOUNT_BIND = 3
};
bool enAddAccountType_IsValid(int value);
const enAddAccountType enAddAccountType_MIN = EN_ADD_ACCOUNT_INVALID;
const enAddAccountType enAddAccountType_MAX = EN_ADD_ACCOUNT_BIND;
const int enAddAccountType_ARRAYSIZE = enAddAccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enAddAccountType_descriptor();
inline const ::std::string& enAddAccountType_Name(enAddAccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enAddAccountType_descriptor(), value);
}
inline bool enAddAccountType_Parse(
    const ::std::string& name, enAddAccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enAddAccountType>(
    enAddAccountType_descriptor(), name, value);
}
// ===================================================================

class AccountID : public ::google::protobuf::Message {
 public:
  AccountID();
  virtual ~AccountID();

  AccountID(const AccountID& from);

  inline AccountID& operator=(const AccountID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountID& default_instance();

  void Swap(AccountID* other);

  // implements Message ----------------------------------------------

  AccountID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountID& from);
  void MergeFrom(const AccountID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strAccount = 1;
  inline bool has_straccount() const;
  inline void clear_straccount();
  static const int kStrAccountFieldNumber = 1;
  inline const ::std::string& straccount() const;
  inline void set_straccount(const ::std::string& value);
  inline void set_straccount(const char* value);
  inline void set_straccount(const char* value, size_t size);
  inline ::std::string* mutable_straccount();
  inline ::std::string* release_straccount();
  inline void set_allocated_straccount(::std::string* straccount);

  // optional int32 iAccountType = 2;
  inline bool has_iaccounttype() const;
  inline void clear_iaccounttype();
  static const int kIAccountTypeFieldNumber = 2;
  inline ::google::protobuf::int32 iaccounttype() const;
  inline void set_iaccounttype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AccountID)
 private:
  inline void set_has_straccount();
  inline void clear_has_straccount();
  inline void set_has_iaccounttype();
  inline void clear_has_iaccounttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* straccount_;
  ::google::protobuf::int32 iaccounttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountID* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_RegAccount_Request : public ::google::protobuf::Message {
 public:
  RegAuth_RegAccount_Request();
  virtual ~RegAuth_RegAccount_Request();

  RegAuth_RegAccount_Request(const RegAuth_RegAccount_Request& from);

  inline RegAuth_RegAccount_Request& operator=(const RegAuth_RegAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_RegAccount_Request& default_instance();

  void Swap(RegAuth_RegAccount_Request* other);

  // implements Message ----------------------------------------------

  RegAuth_RegAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_RegAccount_Request& from);
  void MergeFrom(const RegAuth_RegAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iRegOpType = 1;
  inline bool has_iregoptype() const;
  inline void clear_iregoptype();
  static const int kIRegOpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 iregoptype() const;
  inline void set_iregoptype(::google::protobuf::int32 value);

  // optional .AccountID stAccountID = 2;
  inline bool has_staccountid() const;
  inline void clear_staccountid();
  static const int kStAccountIDFieldNumber = 2;
  inline const ::AccountID& staccountid() const;
  inline ::AccountID* mutable_staccountid();
  inline ::AccountID* release_staccountid();
  inline void set_allocated_staccountid(::AccountID* staccountid);

  // optional string strPassword = 3;
  inline bool has_strpassword() const;
  inline void clear_strpassword();
  static const int kStrPasswordFieldNumber = 3;
  inline const ::std::string& strpassword() const;
  inline void set_strpassword(const ::std::string& value);
  inline void set_strpassword(const char* value);
  inline void set_strpassword(const char* value, size_t size);
  inline ::std::string* mutable_strpassword();
  inline ::std::string* release_strpassword();
  inline void set_allocated_strpassword(::std::string* strpassword);

  // optional .AccountID stNewAccountID = 4;
  inline bool has_stnewaccountid() const;
  inline void clear_stnewaccountid();
  static const int kStNewAccountIDFieldNumber = 4;
  inline const ::AccountID& stnewaccountid() const;
  inline ::AccountID* mutable_stnewaccountid();
  inline ::AccountID* release_stnewaccountid();
  inline void set_allocated_stnewaccountid(::AccountID* stnewaccountid);

  // @@protoc_insertion_point(class_scope:RegAuth_RegAccount_Request)
 private:
  inline void set_has_iregoptype();
  inline void clear_has_iregoptype();
  inline void set_has_staccountid();
  inline void clear_has_staccountid();
  inline void set_has_strpassword();
  inline void clear_has_strpassword();
  inline void set_has_stnewaccountid();
  inline void clear_has_stnewaccountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountID* staccountid_;
  ::std::string* strpassword_;
  ::AccountID* stnewaccountid_;
  ::google::protobuf::int32 iregoptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_RegAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_RegAccount_Response : public ::google::protobuf::Message {
 public:
  RegAuth_RegAccount_Response();
  virtual ~RegAuth_RegAccount_Response();

  RegAuth_RegAccount_Response(const RegAuth_RegAccount_Response& from);

  inline RegAuth_RegAccount_Response& operator=(const RegAuth_RegAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_RegAccount_Response& default_instance();

  void Swap(RegAuth_RegAccount_Response* other);

  // implements Message ----------------------------------------------

  RegAuth_RegAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_RegAccount_Response& from);
  void MergeFrom(const RegAuth_RegAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RegAuth_RegAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_RegAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_AuthAccount_Request : public ::google::protobuf::Message {
 public:
  RegAuth_AuthAccount_Request();
  virtual ~RegAuth_AuthAccount_Request();

  RegAuth_AuthAccount_Request(const RegAuth_AuthAccount_Request& from);

  inline RegAuth_AuthAccount_Request& operator=(const RegAuth_AuthAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_AuthAccount_Request& default_instance();

  void Swap(RegAuth_AuthAccount_Request* other);

  // implements Message ----------------------------------------------

  RegAuth_AuthAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_AuthAccount_Request& from);
  void MergeFrom(const RegAuth_AuthAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountID stAccountID = 1;
  inline bool has_staccountid() const;
  inline void clear_staccountid();
  static const int kStAccountIDFieldNumber = 1;
  inline const ::AccountID& staccountid() const;
  inline ::AccountID* mutable_staccountid();
  inline ::AccountID* release_staccountid();
  inline void set_allocated_staccountid(::AccountID* staccountid);

  // optional string strPassword = 3;
  inline bool has_strpassword() const;
  inline void clear_strpassword();
  static const int kStrPasswordFieldNumber = 3;
  inline const ::std::string& strpassword() const;
  inline void set_strpassword(const ::std::string& value);
  inline void set_strpassword(const char* value);
  inline void set_strpassword(const char* value, size_t size);
  inline ::std::string* mutable_strpassword();
  inline ::std::string* release_strpassword();
  inline void set_allocated_strpassword(::std::string* strpassword);

  // @@protoc_insertion_point(class_scope:RegAuth_AuthAccount_Request)
 private:
  inline void set_has_staccountid();
  inline void clear_has_staccountid();
  inline void set_has_strpassword();
  inline void clear_has_strpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountID* staccountid_;
  ::std::string* strpassword_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_AuthAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_AuthAccount_Response : public ::google::protobuf::Message {
 public:
  RegAuth_AuthAccount_Response();
  virtual ~RegAuth_AuthAccount_Response();

  RegAuth_AuthAccount_Response(const RegAuth_AuthAccount_Response& from);

  inline RegAuth_AuthAccount_Response& operator=(const RegAuth_AuthAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_AuthAccount_Response& default_instance();

  void Swap(RegAuth_AuthAccount_Response* other);

  // implements Message ----------------------------------------------

  RegAuth_AuthAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_AuthAccount_Response& from);
  void MergeFrom(const RegAuth_AuthAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // optional uint32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional int32 iLastWorldID = 3;
  inline bool has_ilastworldid() const;
  inline void clear_ilastworldid();
  static const int kILastWorldIDFieldNumber = 3;
  inline ::google::protobuf::int32 ilastworldid() const;
  inline void set_ilastworldid(::google::protobuf::int32 value);

  // optional string strSessionKey = 4;
  inline bool has_strsessionkey() const;
  inline void clear_strsessionkey();
  static const int kStrSessionKeyFieldNumber = 4;
  inline const ::std::string& strsessionkey() const;
  inline void set_strsessionkey(const ::std::string& value);
  inline void set_strsessionkey(const char* value);
  inline void set_strsessionkey(const char* value, size_t size);
  inline ::std::string* mutable_strsessionkey();
  inline ::std::string* release_strsessionkey();
  inline void set_allocated_strsessionkey(::std::string* strsessionkey);

  // @@protoc_insertion_point(class_scope:RegAuth_AuthAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_ilastworldid();
  inline void clear_has_ilastworldid();
  inline void set_has_strsessionkey();
  inline void clear_has_strsessionkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;
  ::google::protobuf::uint32 uin_;
  ::std::string* strsessionkey_;
  ::google::protobuf::int32 ilastworldid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_AuthAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_UpdateAccount_Request : public ::google::protobuf::Message {
 public:
  RegAuth_UpdateAccount_Request();
  virtual ~RegAuth_UpdateAccount_Request();

  RegAuth_UpdateAccount_Request(const RegAuth_UpdateAccount_Request& from);

  inline RegAuth_UpdateAccount_Request& operator=(const RegAuth_UpdateAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_UpdateAccount_Request& default_instance();

  void Swap(RegAuth_UpdateAccount_Request* other);

  // implements Message ----------------------------------------------

  RegAuth_UpdateAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_UpdateAccount_Request& from);
  void MergeFrom(const RegAuth_UpdateAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountID stAccountID = 1;
  inline bool has_staccountid() const;
  inline void clear_staccountid();
  static const int kStAccountIDFieldNumber = 1;
  inline const ::AccountID& staccountid() const;
  inline ::AccountID* mutable_staccountid();
  inline ::AccountID* release_staccountid();
  inline void set_allocated_staccountid(::AccountID* staccountid);

  // optional string strPassword = 2;
  inline bool has_strpassword() const;
  inline void clear_strpassword();
  static const int kStrPasswordFieldNumber = 2;
  inline const ::std::string& strpassword() const;
  inline void set_strpassword(const ::std::string& value);
  inline void set_strpassword(const char* value);
  inline void set_strpassword(const char* value, size_t size);
  inline ::std::string* mutable_strpassword();
  inline ::std::string* release_strpassword();
  inline void set_allocated_strpassword(::std::string* strpassword);

  // optional int32 iNewWorldID = 3;
  inline bool has_inewworldid() const;
  inline void clear_inewworldid();
  static const int kINewWorldIDFieldNumber = 3;
  inline ::google::protobuf::int32 inewworldid() const;
  inline void set_inewworldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RegAuth_UpdateAccount_Request)
 private:
  inline void set_has_staccountid();
  inline void clear_has_staccountid();
  inline void set_has_strpassword();
  inline void clear_has_strpassword();
  inline void set_has_inewworldid();
  inline void clear_has_inewworldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountID* staccountid_;
  ::std::string* strpassword_;
  ::google::protobuf::int32 inewworldid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_UpdateAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_UpdateAccount_Response : public ::google::protobuf::Message {
 public:
  RegAuth_UpdateAccount_Response();
  virtual ~RegAuth_UpdateAccount_Response();

  RegAuth_UpdateAccount_Response(const RegAuth_UpdateAccount_Response& from);

  inline RegAuth_UpdateAccount_Response& operator=(const RegAuth_UpdateAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_UpdateAccount_Response& default_instance();

  void Swap(RegAuth_UpdateAccount_Response* other);

  // implements Message ----------------------------------------------

  RegAuth_UpdateAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_UpdateAccount_Response& from);
  void MergeFrom(const RegAuth_UpdateAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RegAuth_UpdateAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_UpdateAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class AccountDB_AddAccount_Request : public ::google::protobuf::Message {
 public:
  AccountDB_AddAccount_Request();
  virtual ~AccountDB_AddAccount_Request();

  AccountDB_AddAccount_Request(const AccountDB_AddAccount_Request& from);

  inline AccountDB_AddAccount_Request& operator=(const AccountDB_AddAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountDB_AddAccount_Request& default_instance();

  void Swap(AccountDB_AddAccount_Request* other);

  // implements Message ----------------------------------------------

  AccountDB_AddAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountDB_AddAccount_Request& from);
  void MergeFrom(const AccountDB_AddAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountID stAccountID = 1;
  inline bool has_staccountid() const;
  inline void clear_staccountid();
  static const int kStAccountIDFieldNumber = 1;
  inline const ::AccountID& staccountid() const;
  inline ::AccountID* mutable_staccountid();
  inline ::AccountID* release_staccountid();
  inline void set_allocated_staccountid(::AccountID* staccountid);

  // optional uint32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional int32 iLastWorldID = 3;
  inline bool has_ilastworldid() const;
  inline void clear_ilastworldid();
  static const int kILastWorldIDFieldNumber = 3;
  inline ::google::protobuf::int32 ilastworldid() const;
  inline void set_ilastworldid(::google::protobuf::int32 value);

  // optional string strPassword = 4;
  inline bool has_strpassword() const;
  inline void clear_strpassword();
  static const int kStrPasswordFieldNumber = 4;
  inline const ::std::string& strpassword() const;
  inline void set_strpassword(const ::std::string& value);
  inline void set_strpassword(const char* value);
  inline void set_strpassword(const char* value, size_t size);
  inline ::std::string* mutable_strpassword();
  inline ::std::string* release_strpassword();
  inline void set_allocated_strpassword(::std::string* strpassword);

  // optional int32 iAddType = 5;
  inline bool has_iaddtype() const;
  inline void clear_iaddtype();
  static const int kIAddTypeFieldNumber = 5;
  inline ::google::protobuf::int32 iaddtype() const;
  inline void set_iaddtype(::google::protobuf::int32 value);

  // optional .AccountID stOldAccountID = 6;
  inline bool has_stoldaccountid() const;
  inline void clear_stoldaccountid();
  static const int kStOldAccountIDFieldNumber = 6;
  inline const ::AccountID& stoldaccountid() const;
  inline ::AccountID* mutable_stoldaccountid();
  inline ::AccountID* release_stoldaccountid();
  inline void set_allocated_stoldaccountid(::AccountID* stoldaccountid);

  // @@protoc_insertion_point(class_scope:AccountDB_AddAccount_Request)
 private:
  inline void set_has_staccountid();
  inline void clear_has_staccountid();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_ilastworldid();
  inline void clear_has_ilastworldid();
  inline void set_has_strpassword();
  inline void clear_has_strpassword();
  inline void set_has_iaddtype();
  inline void clear_has_iaddtype();
  inline void set_has_stoldaccountid();
  inline void clear_has_stoldaccountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountID* staccountid_;
  ::google::protobuf::uint32 uin_;
  ::google::protobuf::int32 ilastworldid_;
  ::std::string* strpassword_;
  ::AccountID* stoldaccountid_;
  ::google::protobuf::int32 iaddtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountDB_AddAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class AccountDB_AddAccount_Response : public ::google::protobuf::Message {
 public:
  AccountDB_AddAccount_Response();
  virtual ~AccountDB_AddAccount_Response();

  AccountDB_AddAccount_Response(const AccountDB_AddAccount_Response& from);

  inline AccountDB_AddAccount_Response& operator=(const AccountDB_AddAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountDB_AddAccount_Response& default_instance();

  void Swap(AccountDB_AddAccount_Response* other);

  // implements Message ----------------------------------------------

  AccountDB_AddAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountDB_AddAccount_Response& from);
  void MergeFrom(const AccountDB_AddAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // optional int32 iAddType = 2;
  inline bool has_iaddtype() const;
  inline void clear_iaddtype();
  static const int kIAddTypeFieldNumber = 2;
  inline ::google::protobuf::int32 iaddtype() const;
  inline void set_iaddtype(::google::protobuf::int32 value);

  // optional .AccountID stOldAccountID = 3;
  inline bool has_stoldaccountid() const;
  inline void clear_stoldaccountid();
  static const int kStOldAccountIDFieldNumber = 3;
  inline const ::AccountID& stoldaccountid() const;
  inline ::AccountID* mutable_stoldaccountid();
  inline ::AccountID* release_stoldaccountid();
  inline void set_allocated_stoldaccountid(::AccountID* stoldaccountid);

  // @@protoc_insertion_point(class_scope:AccountDB_AddAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();
  inline void set_has_iaddtype();
  inline void clear_has_iaddtype();
  inline void set_has_stoldaccountid();
  inline void clear_has_stoldaccountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;
  ::google::protobuf::int32 iaddtype_;
  ::AccountID* stoldaccountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountDB_AddAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class AccountDB_FetchAccount_Request : public ::google::protobuf::Message {
 public:
  AccountDB_FetchAccount_Request();
  virtual ~AccountDB_FetchAccount_Request();

  AccountDB_FetchAccount_Request(const AccountDB_FetchAccount_Request& from);

  inline AccountDB_FetchAccount_Request& operator=(const AccountDB_FetchAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountDB_FetchAccount_Request& default_instance();

  void Swap(AccountDB_FetchAccount_Request* other);

  // implements Message ----------------------------------------------

  AccountDB_FetchAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountDB_FetchAccount_Request& from);
  void MergeFrom(const AccountDB_FetchAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountID stAccountID = 1;
  inline bool has_staccountid() const;
  inline void clear_staccountid();
  static const int kStAccountIDFieldNumber = 1;
  inline const ::AccountID& staccountid() const;
  inline ::AccountID* mutable_staccountid();
  inline ::AccountID* release_staccountid();
  inline void set_allocated_staccountid(::AccountID* staccountid);

  // optional bool bIsBindAccount = 2;
  inline bool has_bisbindaccount() const;
  inline void clear_bisbindaccount();
  static const int kBIsBindAccountFieldNumber = 2;
  inline bool bisbindaccount() const;
  inline void set_bisbindaccount(bool value);

  // optional .AccountID stNewAccountID = 3;
  inline bool has_stnewaccountid() const;
  inline void clear_stnewaccountid();
  static const int kStNewAccountIDFieldNumber = 3;
  inline const ::AccountID& stnewaccountid() const;
  inline ::AccountID* mutable_stnewaccountid();
  inline ::AccountID* release_stnewaccountid();
  inline void set_allocated_stnewaccountid(::AccountID* stnewaccountid);

  // optional string strPassword = 4;
  inline bool has_strpassword() const;
  inline void clear_strpassword();
  static const int kStrPasswordFieldNumber = 4;
  inline const ::std::string& strpassword() const;
  inline void set_strpassword(const ::std::string& value);
  inline void set_strpassword(const char* value);
  inline void set_strpassword(const char* value, size_t size);
  inline ::std::string* mutable_strpassword();
  inline ::std::string* release_strpassword();
  inline void set_allocated_strpassword(::std::string* strpassword);

  // @@protoc_insertion_point(class_scope:AccountDB_FetchAccount_Request)
 private:
  inline void set_has_staccountid();
  inline void clear_has_staccountid();
  inline void set_has_bisbindaccount();
  inline void clear_has_bisbindaccount();
  inline void set_has_stnewaccountid();
  inline void clear_has_stnewaccountid();
  inline void set_has_strpassword();
  inline void clear_has_strpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountID* staccountid_;
  ::AccountID* stnewaccountid_;
  ::std::string* strpassword_;
  bool bisbindaccount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountDB_FetchAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class AccountDB_FetchAccount_Response : public ::google::protobuf::Message {
 public:
  AccountDB_FetchAccount_Response();
  virtual ~AccountDB_FetchAccount_Response();

  AccountDB_FetchAccount_Response(const AccountDB_FetchAccount_Response& from);

  inline AccountDB_FetchAccount_Response& operator=(const AccountDB_FetchAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountDB_FetchAccount_Response& default_instance();

  void Swap(AccountDB_FetchAccount_Response* other);

  // implements Message ----------------------------------------------

  AccountDB_FetchAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountDB_FetchAccount_Response& from);
  void MergeFrom(const AccountDB_FetchAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // optional .AccountID stAccountID = 2;
  inline bool has_staccountid() const;
  inline void clear_staccountid();
  static const int kStAccountIDFieldNumber = 2;
  inline const ::AccountID& staccountid() const;
  inline ::AccountID* mutable_staccountid();
  inline ::AccountID* release_staccountid();
  inline void set_allocated_staccountid(::AccountID* staccountid);

  // optional uint32 uin = 4;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 4;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional int32 iLastWorldID = 5;
  inline bool has_ilastworldid() const;
  inline void clear_ilastworldid();
  static const int kILastWorldIDFieldNumber = 5;
  inline ::google::protobuf::int32 ilastworldid() const;
  inline void set_ilastworldid(::google::protobuf::int32 value);

  // optional bool bIsBinded = 6;
  inline bool has_bisbinded() const;
  inline void clear_bisbinded();
  static const int kBIsBindedFieldNumber = 6;
  inline bool bisbinded() const;
  inline void set_bisbinded(bool value);

  // optional bool bIsBindAccount = 7;
  inline bool has_bisbindaccount() const;
  inline void clear_bisbindaccount();
  static const int kBIsBindAccountFieldNumber = 7;
  inline bool bisbindaccount() const;
  inline void set_bisbindaccount(bool value);

  // optional .AccountID stNewAccount = 8;
  inline bool has_stnewaccount() const;
  inline void clear_stnewaccount();
  static const int kStNewAccountFieldNumber = 8;
  inline const ::AccountID& stnewaccount() const;
  inline ::AccountID* mutable_stnewaccount();
  inline ::AccountID* release_stnewaccount();
  inline void set_allocated_stnewaccount(::AccountID* stnewaccount);

  // optional string strNewPassword = 9;
  inline bool has_strnewpassword() const;
  inline void clear_strnewpassword();
  static const int kStrNewPasswordFieldNumber = 9;
  inline const ::std::string& strnewpassword() const;
  inline void set_strnewpassword(const ::std::string& value);
  inline void set_strnewpassword(const char* value);
  inline void set_strnewpassword(const char* value, size_t size);
  inline ::std::string* mutable_strnewpassword();
  inline ::std::string* release_strnewpassword();
  inline void set_allocated_strnewpassword(::std::string* strnewpassword);

  // @@protoc_insertion_point(class_scope:AccountDB_FetchAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();
  inline void set_has_staccountid();
  inline void clear_has_staccountid();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_ilastworldid();
  inline void clear_has_ilastworldid();
  inline void set_has_bisbinded();
  inline void clear_has_bisbinded();
  inline void set_has_bisbindaccount();
  inline void clear_has_bisbindaccount();
  inline void set_has_stnewaccount();
  inline void clear_has_stnewaccount();
  inline void set_has_strnewpassword();
  inline void clear_has_strnewpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountID* staccountid_;
  ::google::protobuf::int32 iresult_;
  ::google::protobuf::uint32 uin_;
  ::google::protobuf::int32 ilastworldid_;
  bool bisbinded_;
  bool bisbindaccount_;
  ::AccountID* stnewaccount_;
  ::std::string* strnewpassword_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountDB_FetchAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class AccountDB_UpdateAccount_Request : public ::google::protobuf::Message {
 public:
  AccountDB_UpdateAccount_Request();
  virtual ~AccountDB_UpdateAccount_Request();

  AccountDB_UpdateAccount_Request(const AccountDB_UpdateAccount_Request& from);

  inline AccountDB_UpdateAccount_Request& operator=(const AccountDB_UpdateAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountDB_UpdateAccount_Request& default_instance();

  void Swap(AccountDB_UpdateAccount_Request* other);

  // implements Message ----------------------------------------------

  AccountDB_UpdateAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountDB_UpdateAccount_Request& from);
  void MergeFrom(const AccountDB_UpdateAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountID stAccountID = 1;
  inline bool has_staccountid() const;
  inline void clear_staccountid();
  static const int kStAccountIDFieldNumber = 1;
  inline const ::AccountID& staccountid() const;
  inline ::AccountID* mutable_staccountid();
  inline ::AccountID* release_staccountid();
  inline void set_allocated_staccountid(::AccountID* staccountid);

  // optional string strPassword = 3;
  inline bool has_strpassword() const;
  inline void clear_strpassword();
  static const int kStrPasswordFieldNumber = 3;
  inline const ::std::string& strpassword() const;
  inline void set_strpassword(const ::std::string& value);
  inline void set_strpassword(const char* value);
  inline void set_strpassword(const char* value, size_t size);
  inline ::std::string* mutable_strpassword();
  inline ::std::string* release_strpassword();
  inline void set_allocated_strpassword(::std::string* strpassword);

  // optional int32 iLastWorldID = 4;
  inline bool has_ilastworldid() const;
  inline void clear_ilastworldid();
  static const int kILastWorldIDFieldNumber = 4;
  inline ::google::protobuf::int32 ilastworldid() const;
  inline void set_ilastworldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AccountDB_UpdateAccount_Request)
 private:
  inline void set_has_staccountid();
  inline void clear_has_staccountid();
  inline void set_has_strpassword();
  inline void clear_has_strpassword();
  inline void set_has_ilastworldid();
  inline void clear_has_ilastworldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountID* staccountid_;
  ::std::string* strpassword_;
  ::google::protobuf::int32 ilastworldid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountDB_UpdateAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class AccountDB_UpdateAccount_Response : public ::google::protobuf::Message {
 public:
  AccountDB_UpdateAccount_Response();
  virtual ~AccountDB_UpdateAccount_Response();

  AccountDB_UpdateAccount_Response(const AccountDB_UpdateAccount_Response& from);

  inline AccountDB_UpdateAccount_Response& operator=(const AccountDB_UpdateAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountDB_UpdateAccount_Response& default_instance();

  void Swap(AccountDB_UpdateAccount_Response* other);

  // implements Message ----------------------------------------------

  AccountDB_UpdateAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountDB_UpdateAccount_Response& from);
  void MergeFrom(const AccountDB_UpdateAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AccountDB_UpdateAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountDB_UpdateAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class AccountDB_DeleteAccount_Request : public ::google::protobuf::Message {
 public:
  AccountDB_DeleteAccount_Request();
  virtual ~AccountDB_DeleteAccount_Request();

  AccountDB_DeleteAccount_Request(const AccountDB_DeleteAccount_Request& from);

  inline AccountDB_DeleteAccount_Request& operator=(const AccountDB_DeleteAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountDB_DeleteAccount_Request& default_instance();

  void Swap(AccountDB_DeleteAccount_Request* other);

  // implements Message ----------------------------------------------

  AccountDB_DeleteAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountDB_DeleteAccount_Request& from);
  void MergeFrom(const AccountDB_DeleteAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountID stAccountID = 1;
  inline bool has_staccountid() const;
  inline void clear_staccountid();
  static const int kStAccountIDFieldNumber = 1;
  inline const ::AccountID& staccountid() const;
  inline ::AccountID* mutable_staccountid();
  inline ::AccountID* release_staccountid();
  inline void set_allocated_staccountid(::AccountID* staccountid);

  // @@protoc_insertion_point(class_scope:AccountDB_DeleteAccount_Request)
 private:
  inline void set_has_staccountid();
  inline void clear_has_staccountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountID* staccountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountDB_DeleteAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class AccountDB_DeleteAccount_Response : public ::google::protobuf::Message {
 public:
  AccountDB_DeleteAccount_Response();
  virtual ~AccountDB_DeleteAccount_Response();

  AccountDB_DeleteAccount_Response(const AccountDB_DeleteAccount_Response& from);

  inline AccountDB_DeleteAccount_Response& operator=(const AccountDB_DeleteAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountDB_DeleteAccount_Response& default_instance();

  void Swap(AccountDB_DeleteAccount_Response* other);

  // implements Message ----------------------------------------------

  AccountDB_DeleteAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountDB_DeleteAccount_Response& from);
  void MergeFrom(const AccountDB_DeleteAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AccountDB_DeleteAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountDB_DeleteAccount_Response* default_instance_;
};
// ===================================================================


// ===================================================================

// AccountID

// optional string strAccount = 1;
inline bool AccountID::has_straccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountID::set_has_straccount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountID::clear_has_straccount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountID::clear_straccount() {
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    straccount_->clear();
  }
  clear_has_straccount();
}
inline const ::std::string& AccountID::straccount() const {
  return *straccount_;
}
inline void AccountID::set_straccount(const ::std::string& value) {
  set_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    straccount_ = new ::std::string;
  }
  straccount_->assign(value);
}
inline void AccountID::set_straccount(const char* value) {
  set_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    straccount_ = new ::std::string;
  }
  straccount_->assign(value);
}
inline void AccountID::set_straccount(const char* value, size_t size) {
  set_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    straccount_ = new ::std::string;
  }
  straccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountID::mutable_straccount() {
  set_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    straccount_ = new ::std::string;
  }
  return straccount_;
}
inline ::std::string* AccountID::release_straccount() {
  clear_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = straccount_;
    straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountID::set_allocated_straccount(::std::string* straccount) {
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    delete straccount_;
  }
  if (straccount) {
    set_has_straccount();
    straccount_ = straccount;
  } else {
    clear_has_straccount();
    straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iAccountType = 2;
inline bool AccountID::has_iaccounttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountID::set_has_iaccounttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountID::clear_has_iaccounttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountID::clear_iaccounttype() {
  iaccounttype_ = 0;
  clear_has_iaccounttype();
}
inline ::google::protobuf::int32 AccountID::iaccounttype() const {
  return iaccounttype_;
}
inline void AccountID::set_iaccounttype(::google::protobuf::int32 value) {
  set_has_iaccounttype();
  iaccounttype_ = value;
}

// -------------------------------------------------------------------

// RegAuth_RegAccount_Request

// optional int32 iRegOpType = 1;
inline bool RegAuth_RegAccount_Request::has_iregoptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_RegAccount_Request::set_has_iregoptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_RegAccount_Request::clear_has_iregoptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_RegAccount_Request::clear_iregoptype() {
  iregoptype_ = 0;
  clear_has_iregoptype();
}
inline ::google::protobuf::int32 RegAuth_RegAccount_Request::iregoptype() const {
  return iregoptype_;
}
inline void RegAuth_RegAccount_Request::set_iregoptype(::google::protobuf::int32 value) {
  set_has_iregoptype();
  iregoptype_ = value;
}

// optional .AccountID stAccountID = 2;
inline bool RegAuth_RegAccount_Request::has_staccountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegAuth_RegAccount_Request::set_has_staccountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegAuth_RegAccount_Request::clear_has_staccountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegAuth_RegAccount_Request::clear_staccountid() {
  if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
  clear_has_staccountid();
}
inline const ::AccountID& RegAuth_RegAccount_Request::staccountid() const {
  return staccountid_ != NULL ? *staccountid_ : *default_instance_->staccountid_;
}
inline ::AccountID* RegAuth_RegAccount_Request::mutable_staccountid() {
  set_has_staccountid();
  if (staccountid_ == NULL) staccountid_ = new ::AccountID;
  return staccountid_;
}
inline ::AccountID* RegAuth_RegAccount_Request::release_staccountid() {
  clear_has_staccountid();
  ::AccountID* temp = staccountid_;
  staccountid_ = NULL;
  return temp;
}
inline void RegAuth_RegAccount_Request::set_allocated_staccountid(::AccountID* staccountid) {
  delete staccountid_;
  staccountid_ = staccountid;
  if (staccountid) {
    set_has_staccountid();
  } else {
    clear_has_staccountid();
  }
}

// optional string strPassword = 3;
inline bool RegAuth_RegAccount_Request::has_strpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegAuth_RegAccount_Request::set_has_strpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegAuth_RegAccount_Request::clear_has_strpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegAuth_RegAccount_Request::clear_strpassword() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    strpassword_->clear();
  }
  clear_has_strpassword();
}
inline const ::std::string& RegAuth_RegAccount_Request::strpassword() const {
  return *strpassword_;
}
inline void RegAuth_RegAccount_Request::set_strpassword(const ::std::string& value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void RegAuth_RegAccount_Request::set_strpassword(const char* value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void RegAuth_RegAccount_Request::set_strpassword(const char* value, size_t size) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegAuth_RegAccount_Request::mutable_strpassword() {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  return strpassword_;
}
inline ::std::string* RegAuth_RegAccount_Request::release_strpassword() {
  clear_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpassword_;
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegAuth_RegAccount_Request::set_allocated_strpassword(::std::string* strpassword) {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (strpassword) {
    set_has_strpassword();
    strpassword_ = strpassword;
  } else {
    clear_has_strpassword();
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .AccountID stNewAccountID = 4;
inline bool RegAuth_RegAccount_Request::has_stnewaccountid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegAuth_RegAccount_Request::set_has_stnewaccountid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegAuth_RegAccount_Request::clear_has_stnewaccountid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegAuth_RegAccount_Request::clear_stnewaccountid() {
  if (stnewaccountid_ != NULL) stnewaccountid_->::AccountID::Clear();
  clear_has_stnewaccountid();
}
inline const ::AccountID& RegAuth_RegAccount_Request::stnewaccountid() const {
  return stnewaccountid_ != NULL ? *stnewaccountid_ : *default_instance_->stnewaccountid_;
}
inline ::AccountID* RegAuth_RegAccount_Request::mutable_stnewaccountid() {
  set_has_stnewaccountid();
  if (stnewaccountid_ == NULL) stnewaccountid_ = new ::AccountID;
  return stnewaccountid_;
}
inline ::AccountID* RegAuth_RegAccount_Request::release_stnewaccountid() {
  clear_has_stnewaccountid();
  ::AccountID* temp = stnewaccountid_;
  stnewaccountid_ = NULL;
  return temp;
}
inline void RegAuth_RegAccount_Request::set_allocated_stnewaccountid(::AccountID* stnewaccountid) {
  delete stnewaccountid_;
  stnewaccountid_ = stnewaccountid;
  if (stnewaccountid) {
    set_has_stnewaccountid();
  } else {
    clear_has_stnewaccountid();
  }
}

// -------------------------------------------------------------------

// RegAuth_RegAccount_Response

// optional int32 iResult = 1;
inline bool RegAuth_RegAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_RegAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_RegAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_RegAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 RegAuth_RegAccount_Response::iresult() const {
  return iresult_;
}
inline void RegAuth_RegAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// -------------------------------------------------------------------

// RegAuth_AuthAccount_Request

// optional .AccountID stAccountID = 1;
inline bool RegAuth_AuthAccount_Request::has_staccountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_AuthAccount_Request::set_has_staccountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_AuthAccount_Request::clear_has_staccountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_AuthAccount_Request::clear_staccountid() {
  if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
  clear_has_staccountid();
}
inline const ::AccountID& RegAuth_AuthAccount_Request::staccountid() const {
  return staccountid_ != NULL ? *staccountid_ : *default_instance_->staccountid_;
}
inline ::AccountID* RegAuth_AuthAccount_Request::mutable_staccountid() {
  set_has_staccountid();
  if (staccountid_ == NULL) staccountid_ = new ::AccountID;
  return staccountid_;
}
inline ::AccountID* RegAuth_AuthAccount_Request::release_staccountid() {
  clear_has_staccountid();
  ::AccountID* temp = staccountid_;
  staccountid_ = NULL;
  return temp;
}
inline void RegAuth_AuthAccount_Request::set_allocated_staccountid(::AccountID* staccountid) {
  delete staccountid_;
  staccountid_ = staccountid;
  if (staccountid) {
    set_has_staccountid();
  } else {
    clear_has_staccountid();
  }
}

// optional string strPassword = 3;
inline bool RegAuth_AuthAccount_Request::has_strpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegAuth_AuthAccount_Request::set_has_strpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegAuth_AuthAccount_Request::clear_has_strpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegAuth_AuthAccount_Request::clear_strpassword() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    strpassword_->clear();
  }
  clear_has_strpassword();
}
inline const ::std::string& RegAuth_AuthAccount_Request::strpassword() const {
  return *strpassword_;
}
inline void RegAuth_AuthAccount_Request::set_strpassword(const ::std::string& value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void RegAuth_AuthAccount_Request::set_strpassword(const char* value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void RegAuth_AuthAccount_Request::set_strpassword(const char* value, size_t size) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegAuth_AuthAccount_Request::mutable_strpassword() {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  return strpassword_;
}
inline ::std::string* RegAuth_AuthAccount_Request::release_strpassword() {
  clear_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpassword_;
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegAuth_AuthAccount_Request::set_allocated_strpassword(::std::string* strpassword) {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (strpassword) {
    set_has_strpassword();
    strpassword_ = strpassword;
  } else {
    clear_has_strpassword();
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RegAuth_AuthAccount_Response

// optional int32 iResult = 1;
inline bool RegAuth_AuthAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_AuthAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_AuthAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 RegAuth_AuthAccount_Response::iresult() const {
  return iresult_;
}
inline void RegAuth_AuthAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// optional uint32 uin = 2;
inline bool RegAuth_AuthAccount_Response::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegAuth_AuthAccount_Response::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegAuth_AuthAccount_Response::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 RegAuth_AuthAccount_Response::uin() const {
  return uin_;
}
inline void RegAuth_AuthAccount_Response::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int32 iLastWorldID = 3;
inline bool RegAuth_AuthAccount_Response::has_ilastworldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_ilastworldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegAuth_AuthAccount_Response::clear_has_ilastworldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegAuth_AuthAccount_Response::clear_ilastworldid() {
  ilastworldid_ = 0;
  clear_has_ilastworldid();
}
inline ::google::protobuf::int32 RegAuth_AuthAccount_Response::ilastworldid() const {
  return ilastworldid_;
}
inline void RegAuth_AuthAccount_Response::set_ilastworldid(::google::protobuf::int32 value) {
  set_has_ilastworldid();
  ilastworldid_ = value;
}

// optional string strSessionKey = 4;
inline bool RegAuth_AuthAccount_Response::has_strsessionkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_strsessionkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegAuth_AuthAccount_Response::clear_has_strsessionkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegAuth_AuthAccount_Response::clear_strsessionkey() {
  if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    strsessionkey_->clear();
  }
  clear_has_strsessionkey();
}
inline const ::std::string& RegAuth_AuthAccount_Response::strsessionkey() const {
  return *strsessionkey_;
}
inline void RegAuth_AuthAccount_Response::set_strsessionkey(const ::std::string& value) {
  set_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    strsessionkey_ = new ::std::string;
  }
  strsessionkey_->assign(value);
}
inline void RegAuth_AuthAccount_Response::set_strsessionkey(const char* value) {
  set_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    strsessionkey_ = new ::std::string;
  }
  strsessionkey_->assign(value);
}
inline void RegAuth_AuthAccount_Response::set_strsessionkey(const char* value, size_t size) {
  set_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    strsessionkey_ = new ::std::string;
  }
  strsessionkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegAuth_AuthAccount_Response::mutable_strsessionkey() {
  set_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    strsessionkey_ = new ::std::string;
  }
  return strsessionkey_;
}
inline ::std::string* RegAuth_AuthAccount_Response::release_strsessionkey() {
  clear_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strsessionkey_;
    strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegAuth_AuthAccount_Response::set_allocated_strsessionkey(::std::string* strsessionkey) {
  if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete strsessionkey_;
  }
  if (strsessionkey) {
    set_has_strsessionkey();
    strsessionkey_ = strsessionkey;
  } else {
    clear_has_strsessionkey();
    strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RegAuth_UpdateAccount_Request

// optional .AccountID stAccountID = 1;
inline bool RegAuth_UpdateAccount_Request::has_staccountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_UpdateAccount_Request::set_has_staccountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_UpdateAccount_Request::clear_has_staccountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_UpdateAccount_Request::clear_staccountid() {
  if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
  clear_has_staccountid();
}
inline const ::AccountID& RegAuth_UpdateAccount_Request::staccountid() const {
  return staccountid_ != NULL ? *staccountid_ : *default_instance_->staccountid_;
}
inline ::AccountID* RegAuth_UpdateAccount_Request::mutable_staccountid() {
  set_has_staccountid();
  if (staccountid_ == NULL) staccountid_ = new ::AccountID;
  return staccountid_;
}
inline ::AccountID* RegAuth_UpdateAccount_Request::release_staccountid() {
  clear_has_staccountid();
  ::AccountID* temp = staccountid_;
  staccountid_ = NULL;
  return temp;
}
inline void RegAuth_UpdateAccount_Request::set_allocated_staccountid(::AccountID* staccountid) {
  delete staccountid_;
  staccountid_ = staccountid;
  if (staccountid) {
    set_has_staccountid();
  } else {
    clear_has_staccountid();
  }
}

// optional string strPassword = 2;
inline bool RegAuth_UpdateAccount_Request::has_strpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegAuth_UpdateAccount_Request::set_has_strpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegAuth_UpdateAccount_Request::clear_has_strpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegAuth_UpdateAccount_Request::clear_strpassword() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    strpassword_->clear();
  }
  clear_has_strpassword();
}
inline const ::std::string& RegAuth_UpdateAccount_Request::strpassword() const {
  return *strpassword_;
}
inline void RegAuth_UpdateAccount_Request::set_strpassword(const ::std::string& value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void RegAuth_UpdateAccount_Request::set_strpassword(const char* value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void RegAuth_UpdateAccount_Request::set_strpassword(const char* value, size_t size) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegAuth_UpdateAccount_Request::mutable_strpassword() {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  return strpassword_;
}
inline ::std::string* RegAuth_UpdateAccount_Request::release_strpassword() {
  clear_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpassword_;
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegAuth_UpdateAccount_Request::set_allocated_strpassword(::std::string* strpassword) {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (strpassword) {
    set_has_strpassword();
    strpassword_ = strpassword;
  } else {
    clear_has_strpassword();
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iNewWorldID = 3;
inline bool RegAuth_UpdateAccount_Request::has_inewworldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegAuth_UpdateAccount_Request::set_has_inewworldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegAuth_UpdateAccount_Request::clear_has_inewworldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegAuth_UpdateAccount_Request::clear_inewworldid() {
  inewworldid_ = 0;
  clear_has_inewworldid();
}
inline ::google::protobuf::int32 RegAuth_UpdateAccount_Request::inewworldid() const {
  return inewworldid_;
}
inline void RegAuth_UpdateAccount_Request::set_inewworldid(::google::protobuf::int32 value) {
  set_has_inewworldid();
  inewworldid_ = value;
}

// -------------------------------------------------------------------

// RegAuth_UpdateAccount_Response

// optional int32 iResult = 1;
inline bool RegAuth_UpdateAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_UpdateAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_UpdateAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_UpdateAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 RegAuth_UpdateAccount_Response::iresult() const {
  return iresult_;
}
inline void RegAuth_UpdateAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// -------------------------------------------------------------------

// AccountDB_AddAccount_Request

// optional .AccountID stAccountID = 1;
inline bool AccountDB_AddAccount_Request::has_staccountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountDB_AddAccount_Request::set_has_staccountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountDB_AddAccount_Request::clear_has_staccountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountDB_AddAccount_Request::clear_staccountid() {
  if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
  clear_has_staccountid();
}
inline const ::AccountID& AccountDB_AddAccount_Request::staccountid() const {
  return staccountid_ != NULL ? *staccountid_ : *default_instance_->staccountid_;
}
inline ::AccountID* AccountDB_AddAccount_Request::mutable_staccountid() {
  set_has_staccountid();
  if (staccountid_ == NULL) staccountid_ = new ::AccountID;
  return staccountid_;
}
inline ::AccountID* AccountDB_AddAccount_Request::release_staccountid() {
  clear_has_staccountid();
  ::AccountID* temp = staccountid_;
  staccountid_ = NULL;
  return temp;
}
inline void AccountDB_AddAccount_Request::set_allocated_staccountid(::AccountID* staccountid) {
  delete staccountid_;
  staccountid_ = staccountid;
  if (staccountid) {
    set_has_staccountid();
  } else {
    clear_has_staccountid();
  }
}

// optional uint32 uin = 2;
inline bool AccountDB_AddAccount_Request::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountDB_AddAccount_Request::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountDB_AddAccount_Request::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountDB_AddAccount_Request::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 AccountDB_AddAccount_Request::uin() const {
  return uin_;
}
inline void AccountDB_AddAccount_Request::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int32 iLastWorldID = 3;
inline bool AccountDB_AddAccount_Request::has_ilastworldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountDB_AddAccount_Request::set_has_ilastworldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountDB_AddAccount_Request::clear_has_ilastworldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountDB_AddAccount_Request::clear_ilastworldid() {
  ilastworldid_ = 0;
  clear_has_ilastworldid();
}
inline ::google::protobuf::int32 AccountDB_AddAccount_Request::ilastworldid() const {
  return ilastworldid_;
}
inline void AccountDB_AddAccount_Request::set_ilastworldid(::google::protobuf::int32 value) {
  set_has_ilastworldid();
  ilastworldid_ = value;
}

// optional string strPassword = 4;
inline bool AccountDB_AddAccount_Request::has_strpassword() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountDB_AddAccount_Request::set_has_strpassword() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountDB_AddAccount_Request::clear_has_strpassword() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountDB_AddAccount_Request::clear_strpassword() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    strpassword_->clear();
  }
  clear_has_strpassword();
}
inline const ::std::string& AccountDB_AddAccount_Request::strpassword() const {
  return *strpassword_;
}
inline void AccountDB_AddAccount_Request::set_strpassword(const ::std::string& value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void AccountDB_AddAccount_Request::set_strpassword(const char* value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void AccountDB_AddAccount_Request::set_strpassword(const char* value, size_t size) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountDB_AddAccount_Request::mutable_strpassword() {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  return strpassword_;
}
inline ::std::string* AccountDB_AddAccount_Request::release_strpassword() {
  clear_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpassword_;
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountDB_AddAccount_Request::set_allocated_strpassword(::std::string* strpassword) {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (strpassword) {
    set_has_strpassword();
    strpassword_ = strpassword;
  } else {
    clear_has_strpassword();
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iAddType = 5;
inline bool AccountDB_AddAccount_Request::has_iaddtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountDB_AddAccount_Request::set_has_iaddtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountDB_AddAccount_Request::clear_has_iaddtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountDB_AddAccount_Request::clear_iaddtype() {
  iaddtype_ = 0;
  clear_has_iaddtype();
}
inline ::google::protobuf::int32 AccountDB_AddAccount_Request::iaddtype() const {
  return iaddtype_;
}
inline void AccountDB_AddAccount_Request::set_iaddtype(::google::protobuf::int32 value) {
  set_has_iaddtype();
  iaddtype_ = value;
}

// optional .AccountID stOldAccountID = 6;
inline bool AccountDB_AddAccount_Request::has_stoldaccountid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountDB_AddAccount_Request::set_has_stoldaccountid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountDB_AddAccount_Request::clear_has_stoldaccountid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountDB_AddAccount_Request::clear_stoldaccountid() {
  if (stoldaccountid_ != NULL) stoldaccountid_->::AccountID::Clear();
  clear_has_stoldaccountid();
}
inline const ::AccountID& AccountDB_AddAccount_Request::stoldaccountid() const {
  return stoldaccountid_ != NULL ? *stoldaccountid_ : *default_instance_->stoldaccountid_;
}
inline ::AccountID* AccountDB_AddAccount_Request::mutable_stoldaccountid() {
  set_has_stoldaccountid();
  if (stoldaccountid_ == NULL) stoldaccountid_ = new ::AccountID;
  return stoldaccountid_;
}
inline ::AccountID* AccountDB_AddAccount_Request::release_stoldaccountid() {
  clear_has_stoldaccountid();
  ::AccountID* temp = stoldaccountid_;
  stoldaccountid_ = NULL;
  return temp;
}
inline void AccountDB_AddAccount_Request::set_allocated_stoldaccountid(::AccountID* stoldaccountid) {
  delete stoldaccountid_;
  stoldaccountid_ = stoldaccountid;
  if (stoldaccountid) {
    set_has_stoldaccountid();
  } else {
    clear_has_stoldaccountid();
  }
}

// -------------------------------------------------------------------

// AccountDB_AddAccount_Response

// optional int32 iResult = 1;
inline bool AccountDB_AddAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountDB_AddAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountDB_AddAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountDB_AddAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 AccountDB_AddAccount_Response::iresult() const {
  return iresult_;
}
inline void AccountDB_AddAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// optional int32 iAddType = 2;
inline bool AccountDB_AddAccount_Response::has_iaddtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountDB_AddAccount_Response::set_has_iaddtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountDB_AddAccount_Response::clear_has_iaddtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountDB_AddAccount_Response::clear_iaddtype() {
  iaddtype_ = 0;
  clear_has_iaddtype();
}
inline ::google::protobuf::int32 AccountDB_AddAccount_Response::iaddtype() const {
  return iaddtype_;
}
inline void AccountDB_AddAccount_Response::set_iaddtype(::google::protobuf::int32 value) {
  set_has_iaddtype();
  iaddtype_ = value;
}

// optional .AccountID stOldAccountID = 3;
inline bool AccountDB_AddAccount_Response::has_stoldaccountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountDB_AddAccount_Response::set_has_stoldaccountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountDB_AddAccount_Response::clear_has_stoldaccountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountDB_AddAccount_Response::clear_stoldaccountid() {
  if (stoldaccountid_ != NULL) stoldaccountid_->::AccountID::Clear();
  clear_has_stoldaccountid();
}
inline const ::AccountID& AccountDB_AddAccount_Response::stoldaccountid() const {
  return stoldaccountid_ != NULL ? *stoldaccountid_ : *default_instance_->stoldaccountid_;
}
inline ::AccountID* AccountDB_AddAccount_Response::mutable_stoldaccountid() {
  set_has_stoldaccountid();
  if (stoldaccountid_ == NULL) stoldaccountid_ = new ::AccountID;
  return stoldaccountid_;
}
inline ::AccountID* AccountDB_AddAccount_Response::release_stoldaccountid() {
  clear_has_stoldaccountid();
  ::AccountID* temp = stoldaccountid_;
  stoldaccountid_ = NULL;
  return temp;
}
inline void AccountDB_AddAccount_Response::set_allocated_stoldaccountid(::AccountID* stoldaccountid) {
  delete stoldaccountid_;
  stoldaccountid_ = stoldaccountid;
  if (stoldaccountid) {
    set_has_stoldaccountid();
  } else {
    clear_has_stoldaccountid();
  }
}

// -------------------------------------------------------------------

// AccountDB_FetchAccount_Request

// optional .AccountID stAccountID = 1;
inline bool AccountDB_FetchAccount_Request::has_staccountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountDB_FetchAccount_Request::set_has_staccountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountDB_FetchAccount_Request::clear_has_staccountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountDB_FetchAccount_Request::clear_staccountid() {
  if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
  clear_has_staccountid();
}
inline const ::AccountID& AccountDB_FetchAccount_Request::staccountid() const {
  return staccountid_ != NULL ? *staccountid_ : *default_instance_->staccountid_;
}
inline ::AccountID* AccountDB_FetchAccount_Request::mutable_staccountid() {
  set_has_staccountid();
  if (staccountid_ == NULL) staccountid_ = new ::AccountID;
  return staccountid_;
}
inline ::AccountID* AccountDB_FetchAccount_Request::release_staccountid() {
  clear_has_staccountid();
  ::AccountID* temp = staccountid_;
  staccountid_ = NULL;
  return temp;
}
inline void AccountDB_FetchAccount_Request::set_allocated_staccountid(::AccountID* staccountid) {
  delete staccountid_;
  staccountid_ = staccountid;
  if (staccountid) {
    set_has_staccountid();
  } else {
    clear_has_staccountid();
  }
}

// optional bool bIsBindAccount = 2;
inline bool AccountDB_FetchAccount_Request::has_bisbindaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountDB_FetchAccount_Request::set_has_bisbindaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountDB_FetchAccount_Request::clear_has_bisbindaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountDB_FetchAccount_Request::clear_bisbindaccount() {
  bisbindaccount_ = false;
  clear_has_bisbindaccount();
}
inline bool AccountDB_FetchAccount_Request::bisbindaccount() const {
  return bisbindaccount_;
}
inline void AccountDB_FetchAccount_Request::set_bisbindaccount(bool value) {
  set_has_bisbindaccount();
  bisbindaccount_ = value;
}

// optional .AccountID stNewAccountID = 3;
inline bool AccountDB_FetchAccount_Request::has_stnewaccountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountDB_FetchAccount_Request::set_has_stnewaccountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountDB_FetchAccount_Request::clear_has_stnewaccountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountDB_FetchAccount_Request::clear_stnewaccountid() {
  if (stnewaccountid_ != NULL) stnewaccountid_->::AccountID::Clear();
  clear_has_stnewaccountid();
}
inline const ::AccountID& AccountDB_FetchAccount_Request::stnewaccountid() const {
  return stnewaccountid_ != NULL ? *stnewaccountid_ : *default_instance_->stnewaccountid_;
}
inline ::AccountID* AccountDB_FetchAccount_Request::mutable_stnewaccountid() {
  set_has_stnewaccountid();
  if (stnewaccountid_ == NULL) stnewaccountid_ = new ::AccountID;
  return stnewaccountid_;
}
inline ::AccountID* AccountDB_FetchAccount_Request::release_stnewaccountid() {
  clear_has_stnewaccountid();
  ::AccountID* temp = stnewaccountid_;
  stnewaccountid_ = NULL;
  return temp;
}
inline void AccountDB_FetchAccount_Request::set_allocated_stnewaccountid(::AccountID* stnewaccountid) {
  delete stnewaccountid_;
  stnewaccountid_ = stnewaccountid;
  if (stnewaccountid) {
    set_has_stnewaccountid();
  } else {
    clear_has_stnewaccountid();
  }
}

// optional string strPassword = 4;
inline bool AccountDB_FetchAccount_Request::has_strpassword() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountDB_FetchAccount_Request::set_has_strpassword() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountDB_FetchAccount_Request::clear_has_strpassword() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountDB_FetchAccount_Request::clear_strpassword() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    strpassword_->clear();
  }
  clear_has_strpassword();
}
inline const ::std::string& AccountDB_FetchAccount_Request::strpassword() const {
  return *strpassword_;
}
inline void AccountDB_FetchAccount_Request::set_strpassword(const ::std::string& value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void AccountDB_FetchAccount_Request::set_strpassword(const char* value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void AccountDB_FetchAccount_Request::set_strpassword(const char* value, size_t size) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountDB_FetchAccount_Request::mutable_strpassword() {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  return strpassword_;
}
inline ::std::string* AccountDB_FetchAccount_Request::release_strpassword() {
  clear_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpassword_;
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountDB_FetchAccount_Request::set_allocated_strpassword(::std::string* strpassword) {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (strpassword) {
    set_has_strpassword();
    strpassword_ = strpassword;
  } else {
    clear_has_strpassword();
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AccountDB_FetchAccount_Response

// optional int32 iResult = 1;
inline bool AccountDB_FetchAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountDB_FetchAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountDB_FetchAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountDB_FetchAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 AccountDB_FetchAccount_Response::iresult() const {
  return iresult_;
}
inline void AccountDB_FetchAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// optional .AccountID stAccountID = 2;
inline bool AccountDB_FetchAccount_Response::has_staccountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountDB_FetchAccount_Response::set_has_staccountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountDB_FetchAccount_Response::clear_has_staccountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountDB_FetchAccount_Response::clear_staccountid() {
  if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
  clear_has_staccountid();
}
inline const ::AccountID& AccountDB_FetchAccount_Response::staccountid() const {
  return staccountid_ != NULL ? *staccountid_ : *default_instance_->staccountid_;
}
inline ::AccountID* AccountDB_FetchAccount_Response::mutable_staccountid() {
  set_has_staccountid();
  if (staccountid_ == NULL) staccountid_ = new ::AccountID;
  return staccountid_;
}
inline ::AccountID* AccountDB_FetchAccount_Response::release_staccountid() {
  clear_has_staccountid();
  ::AccountID* temp = staccountid_;
  staccountid_ = NULL;
  return temp;
}
inline void AccountDB_FetchAccount_Response::set_allocated_staccountid(::AccountID* staccountid) {
  delete staccountid_;
  staccountid_ = staccountid;
  if (staccountid) {
    set_has_staccountid();
  } else {
    clear_has_staccountid();
  }
}

// optional uint32 uin = 4;
inline bool AccountDB_FetchAccount_Response::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountDB_FetchAccount_Response::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountDB_FetchAccount_Response::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountDB_FetchAccount_Response::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 AccountDB_FetchAccount_Response::uin() const {
  return uin_;
}
inline void AccountDB_FetchAccount_Response::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int32 iLastWorldID = 5;
inline bool AccountDB_FetchAccount_Response::has_ilastworldid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountDB_FetchAccount_Response::set_has_ilastworldid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountDB_FetchAccount_Response::clear_has_ilastworldid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountDB_FetchAccount_Response::clear_ilastworldid() {
  ilastworldid_ = 0;
  clear_has_ilastworldid();
}
inline ::google::protobuf::int32 AccountDB_FetchAccount_Response::ilastworldid() const {
  return ilastworldid_;
}
inline void AccountDB_FetchAccount_Response::set_ilastworldid(::google::protobuf::int32 value) {
  set_has_ilastworldid();
  ilastworldid_ = value;
}

// optional bool bIsBinded = 6;
inline bool AccountDB_FetchAccount_Response::has_bisbinded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountDB_FetchAccount_Response::set_has_bisbinded() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountDB_FetchAccount_Response::clear_has_bisbinded() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountDB_FetchAccount_Response::clear_bisbinded() {
  bisbinded_ = false;
  clear_has_bisbinded();
}
inline bool AccountDB_FetchAccount_Response::bisbinded() const {
  return bisbinded_;
}
inline void AccountDB_FetchAccount_Response::set_bisbinded(bool value) {
  set_has_bisbinded();
  bisbinded_ = value;
}

// optional bool bIsBindAccount = 7;
inline bool AccountDB_FetchAccount_Response::has_bisbindaccount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountDB_FetchAccount_Response::set_has_bisbindaccount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountDB_FetchAccount_Response::clear_has_bisbindaccount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountDB_FetchAccount_Response::clear_bisbindaccount() {
  bisbindaccount_ = false;
  clear_has_bisbindaccount();
}
inline bool AccountDB_FetchAccount_Response::bisbindaccount() const {
  return bisbindaccount_;
}
inline void AccountDB_FetchAccount_Response::set_bisbindaccount(bool value) {
  set_has_bisbindaccount();
  bisbindaccount_ = value;
}

// optional .AccountID stNewAccount = 8;
inline bool AccountDB_FetchAccount_Response::has_stnewaccount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountDB_FetchAccount_Response::set_has_stnewaccount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountDB_FetchAccount_Response::clear_has_stnewaccount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountDB_FetchAccount_Response::clear_stnewaccount() {
  if (stnewaccount_ != NULL) stnewaccount_->::AccountID::Clear();
  clear_has_stnewaccount();
}
inline const ::AccountID& AccountDB_FetchAccount_Response::stnewaccount() const {
  return stnewaccount_ != NULL ? *stnewaccount_ : *default_instance_->stnewaccount_;
}
inline ::AccountID* AccountDB_FetchAccount_Response::mutable_stnewaccount() {
  set_has_stnewaccount();
  if (stnewaccount_ == NULL) stnewaccount_ = new ::AccountID;
  return stnewaccount_;
}
inline ::AccountID* AccountDB_FetchAccount_Response::release_stnewaccount() {
  clear_has_stnewaccount();
  ::AccountID* temp = stnewaccount_;
  stnewaccount_ = NULL;
  return temp;
}
inline void AccountDB_FetchAccount_Response::set_allocated_stnewaccount(::AccountID* stnewaccount) {
  delete stnewaccount_;
  stnewaccount_ = stnewaccount;
  if (stnewaccount) {
    set_has_stnewaccount();
  } else {
    clear_has_stnewaccount();
  }
}

// optional string strNewPassword = 9;
inline bool AccountDB_FetchAccount_Response::has_strnewpassword() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountDB_FetchAccount_Response::set_has_strnewpassword() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountDB_FetchAccount_Response::clear_has_strnewpassword() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountDB_FetchAccount_Response::clear_strnewpassword() {
  if (strnewpassword_ != &::google::protobuf::internal::kEmptyString) {
    strnewpassword_->clear();
  }
  clear_has_strnewpassword();
}
inline const ::std::string& AccountDB_FetchAccount_Response::strnewpassword() const {
  return *strnewpassword_;
}
inline void AccountDB_FetchAccount_Response::set_strnewpassword(const ::std::string& value) {
  set_has_strnewpassword();
  if (strnewpassword_ == &::google::protobuf::internal::kEmptyString) {
    strnewpassword_ = new ::std::string;
  }
  strnewpassword_->assign(value);
}
inline void AccountDB_FetchAccount_Response::set_strnewpassword(const char* value) {
  set_has_strnewpassword();
  if (strnewpassword_ == &::google::protobuf::internal::kEmptyString) {
    strnewpassword_ = new ::std::string;
  }
  strnewpassword_->assign(value);
}
inline void AccountDB_FetchAccount_Response::set_strnewpassword(const char* value, size_t size) {
  set_has_strnewpassword();
  if (strnewpassword_ == &::google::protobuf::internal::kEmptyString) {
    strnewpassword_ = new ::std::string;
  }
  strnewpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountDB_FetchAccount_Response::mutable_strnewpassword() {
  set_has_strnewpassword();
  if (strnewpassword_ == &::google::protobuf::internal::kEmptyString) {
    strnewpassword_ = new ::std::string;
  }
  return strnewpassword_;
}
inline ::std::string* AccountDB_FetchAccount_Response::release_strnewpassword() {
  clear_has_strnewpassword();
  if (strnewpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strnewpassword_;
    strnewpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountDB_FetchAccount_Response::set_allocated_strnewpassword(::std::string* strnewpassword) {
  if (strnewpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strnewpassword_;
  }
  if (strnewpassword) {
    set_has_strnewpassword();
    strnewpassword_ = strnewpassword;
  } else {
    clear_has_strnewpassword();
    strnewpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AccountDB_UpdateAccount_Request

// optional .AccountID stAccountID = 1;
inline bool AccountDB_UpdateAccount_Request::has_staccountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountDB_UpdateAccount_Request::set_has_staccountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountDB_UpdateAccount_Request::clear_has_staccountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountDB_UpdateAccount_Request::clear_staccountid() {
  if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
  clear_has_staccountid();
}
inline const ::AccountID& AccountDB_UpdateAccount_Request::staccountid() const {
  return staccountid_ != NULL ? *staccountid_ : *default_instance_->staccountid_;
}
inline ::AccountID* AccountDB_UpdateAccount_Request::mutable_staccountid() {
  set_has_staccountid();
  if (staccountid_ == NULL) staccountid_ = new ::AccountID;
  return staccountid_;
}
inline ::AccountID* AccountDB_UpdateAccount_Request::release_staccountid() {
  clear_has_staccountid();
  ::AccountID* temp = staccountid_;
  staccountid_ = NULL;
  return temp;
}
inline void AccountDB_UpdateAccount_Request::set_allocated_staccountid(::AccountID* staccountid) {
  delete staccountid_;
  staccountid_ = staccountid;
  if (staccountid) {
    set_has_staccountid();
  } else {
    clear_has_staccountid();
  }
}

// optional string strPassword = 3;
inline bool AccountDB_UpdateAccount_Request::has_strpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountDB_UpdateAccount_Request::set_has_strpassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountDB_UpdateAccount_Request::clear_has_strpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountDB_UpdateAccount_Request::clear_strpassword() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    strpassword_->clear();
  }
  clear_has_strpassword();
}
inline const ::std::string& AccountDB_UpdateAccount_Request::strpassword() const {
  return *strpassword_;
}
inline void AccountDB_UpdateAccount_Request::set_strpassword(const ::std::string& value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void AccountDB_UpdateAccount_Request::set_strpassword(const char* value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void AccountDB_UpdateAccount_Request::set_strpassword(const char* value, size_t size) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountDB_UpdateAccount_Request::mutable_strpassword() {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  return strpassword_;
}
inline ::std::string* AccountDB_UpdateAccount_Request::release_strpassword() {
  clear_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpassword_;
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountDB_UpdateAccount_Request::set_allocated_strpassword(::std::string* strpassword) {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (strpassword) {
    set_has_strpassword();
    strpassword_ = strpassword;
  } else {
    clear_has_strpassword();
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iLastWorldID = 4;
inline bool AccountDB_UpdateAccount_Request::has_ilastworldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountDB_UpdateAccount_Request::set_has_ilastworldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountDB_UpdateAccount_Request::clear_has_ilastworldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountDB_UpdateAccount_Request::clear_ilastworldid() {
  ilastworldid_ = 0;
  clear_has_ilastworldid();
}
inline ::google::protobuf::int32 AccountDB_UpdateAccount_Request::ilastworldid() const {
  return ilastworldid_;
}
inline void AccountDB_UpdateAccount_Request::set_ilastworldid(::google::protobuf::int32 value) {
  set_has_ilastworldid();
  ilastworldid_ = value;
}

// -------------------------------------------------------------------

// AccountDB_UpdateAccount_Response

// optional int32 iResult = 1;
inline bool AccountDB_UpdateAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountDB_UpdateAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountDB_UpdateAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountDB_UpdateAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 AccountDB_UpdateAccount_Response::iresult() const {
  return iresult_;
}
inline void AccountDB_UpdateAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// -------------------------------------------------------------------

// AccountDB_DeleteAccount_Request

// optional .AccountID stAccountID = 1;
inline bool AccountDB_DeleteAccount_Request::has_staccountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountDB_DeleteAccount_Request::set_has_staccountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountDB_DeleteAccount_Request::clear_has_staccountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountDB_DeleteAccount_Request::clear_staccountid() {
  if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
  clear_has_staccountid();
}
inline const ::AccountID& AccountDB_DeleteAccount_Request::staccountid() const {
  return staccountid_ != NULL ? *staccountid_ : *default_instance_->staccountid_;
}
inline ::AccountID* AccountDB_DeleteAccount_Request::mutable_staccountid() {
  set_has_staccountid();
  if (staccountid_ == NULL) staccountid_ = new ::AccountID;
  return staccountid_;
}
inline ::AccountID* AccountDB_DeleteAccount_Request::release_staccountid() {
  clear_has_staccountid();
  ::AccountID* temp = staccountid_;
  staccountid_ = NULL;
  return temp;
}
inline void AccountDB_DeleteAccount_Request::set_allocated_staccountid(::AccountID* staccountid) {
  delete staccountid_;
  staccountid_ = staccountid;
  if (staccountid) {
    set_has_staccountid();
  } else {
    clear_has_staccountid();
  }
}

// -------------------------------------------------------------------

// AccountDB_DeleteAccount_Response

// optional int32 iResult = 1;
inline bool AccountDB_DeleteAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountDB_DeleteAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountDB_DeleteAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountDB_DeleteAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 AccountDB_DeleteAccount_Response::iresult() const {
  return iresult_;
}
inline void AccountDB_DeleteAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enAccountType>() {
  return ::enAccountType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enAddAccountType>() {
  return ::enAddAccountType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameProtocol_2eRegAuth_2eproto__INCLUDED
