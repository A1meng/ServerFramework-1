// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.RegAuth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol.RegAuth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AccountID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountID_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_RegAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_RegAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_RegAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_RegAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_AuthAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_AuthAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_AuthAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_AuthAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_UpdateAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_UpdateAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_UpdateAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_UpdateAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountDB_AddAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountDB_AddAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountDB_AddAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountDB_AddAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountDB_FetchAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountDB_FetchAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountDB_FetchAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountDB_FetchAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountDB_UpdateAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountDB_UpdateAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountDB_UpdateAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountDB_UpdateAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountDB_DeleteAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountDB_DeleteAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountDB_DeleteAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountDB_DeleteAccount_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enAccountType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enAddAccountType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto() {
  protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol.RegAuth.proto");
  GOOGLE_CHECK(file != NULL);
  AccountID_descriptor_ = file->message_type(0);
  static const int AccountID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountID, straccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountID, iaccounttype_),
  };
  AccountID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountID_descriptor_,
      AccountID::default_instance_,
      AccountID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountID));
  RegAuth_RegAccount_Request_descriptor_ = file->message_type(1);
  static const int RegAuth_RegAccount_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Request, iregoptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Request, staccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Request, strpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Request, stnewaccountid_),
  };
  RegAuth_RegAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_RegAccount_Request_descriptor_,
      RegAuth_RegAccount_Request::default_instance_,
      RegAuth_RegAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_RegAccount_Request));
  RegAuth_RegAccount_Response_descriptor_ = file->message_type(2);
  static const int RegAuth_RegAccount_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Response, iresult_),
  };
  RegAuth_RegAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_RegAccount_Response_descriptor_,
      RegAuth_RegAccount_Response::default_instance_,
      RegAuth_RegAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_RegAccount_Response));
  RegAuth_AuthAccount_Request_descriptor_ = file->message_type(3);
  static const int RegAuth_AuthAccount_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Request, staccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Request, strpassword_),
  };
  RegAuth_AuthAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_AuthAccount_Request_descriptor_,
      RegAuth_AuthAccount_Request::default_instance_,
      RegAuth_AuthAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_AuthAccount_Request));
  RegAuth_AuthAccount_Response_descriptor_ = file->message_type(4);
  static const int RegAuth_AuthAccount_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, ilastworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, strsessionkey_),
  };
  RegAuth_AuthAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_AuthAccount_Response_descriptor_,
      RegAuth_AuthAccount_Response::default_instance_,
      RegAuth_AuthAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_AuthAccount_Response));
  RegAuth_UpdateAccount_Request_descriptor_ = file->message_type(5);
  static const int RegAuth_UpdateAccount_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_UpdateAccount_Request, staccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_UpdateAccount_Request, strpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_UpdateAccount_Request, inewworldid_),
  };
  RegAuth_UpdateAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_UpdateAccount_Request_descriptor_,
      RegAuth_UpdateAccount_Request::default_instance_,
      RegAuth_UpdateAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_UpdateAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_UpdateAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_UpdateAccount_Request));
  RegAuth_UpdateAccount_Response_descriptor_ = file->message_type(6);
  static const int RegAuth_UpdateAccount_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_UpdateAccount_Response, iresult_),
  };
  RegAuth_UpdateAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_UpdateAccount_Response_descriptor_,
      RegAuth_UpdateAccount_Response::default_instance_,
      RegAuth_UpdateAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_UpdateAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_UpdateAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_UpdateAccount_Response));
  AccountDB_AddAccount_Request_descriptor_ = file->message_type(7);
  static const int AccountDB_AddAccount_Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Request, staccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Request, ilastworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Request, strpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Request, iaddtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Request, stoldaccountid_),
  };
  AccountDB_AddAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountDB_AddAccount_Request_descriptor_,
      AccountDB_AddAccount_Request::default_instance_,
      AccountDB_AddAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountDB_AddAccount_Request));
  AccountDB_AddAccount_Response_descriptor_ = file->message_type(8);
  static const int AccountDB_AddAccount_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Response, iaddtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Response, stoldaccountid_),
  };
  AccountDB_AddAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountDB_AddAccount_Response_descriptor_,
      AccountDB_AddAccount_Response::default_instance_,
      AccountDB_AddAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_AddAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountDB_AddAccount_Response));
  AccountDB_FetchAccount_Request_descriptor_ = file->message_type(9);
  static const int AccountDB_FetchAccount_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Request, staccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Request, bisbindaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Request, stnewaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Request, strpassword_),
  };
  AccountDB_FetchAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountDB_FetchAccount_Request_descriptor_,
      AccountDB_FetchAccount_Request::default_instance_,
      AccountDB_FetchAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountDB_FetchAccount_Request));
  AccountDB_FetchAccount_Response_descriptor_ = file->message_type(10);
  static const int AccountDB_FetchAccount_Response_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, staccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, ilastworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, bisbinded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, bisbindaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, stnewaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, strnewpassword_),
  };
  AccountDB_FetchAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountDB_FetchAccount_Response_descriptor_,
      AccountDB_FetchAccount_Response::default_instance_,
      AccountDB_FetchAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_FetchAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountDB_FetchAccount_Response));
  AccountDB_UpdateAccount_Request_descriptor_ = file->message_type(11);
  static const int AccountDB_UpdateAccount_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_UpdateAccount_Request, staccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_UpdateAccount_Request, strpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_UpdateAccount_Request, ilastworldid_),
  };
  AccountDB_UpdateAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountDB_UpdateAccount_Request_descriptor_,
      AccountDB_UpdateAccount_Request::default_instance_,
      AccountDB_UpdateAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_UpdateAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_UpdateAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountDB_UpdateAccount_Request));
  AccountDB_UpdateAccount_Response_descriptor_ = file->message_type(12);
  static const int AccountDB_UpdateAccount_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_UpdateAccount_Response, iresult_),
  };
  AccountDB_UpdateAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountDB_UpdateAccount_Response_descriptor_,
      AccountDB_UpdateAccount_Response::default_instance_,
      AccountDB_UpdateAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_UpdateAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_UpdateAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountDB_UpdateAccount_Response));
  AccountDB_DeleteAccount_Request_descriptor_ = file->message_type(13);
  static const int AccountDB_DeleteAccount_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_DeleteAccount_Request, staccountid_),
  };
  AccountDB_DeleteAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountDB_DeleteAccount_Request_descriptor_,
      AccountDB_DeleteAccount_Request::default_instance_,
      AccountDB_DeleteAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_DeleteAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_DeleteAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountDB_DeleteAccount_Request));
  AccountDB_DeleteAccount_Response_descriptor_ = file->message_type(14);
  static const int AccountDB_DeleteAccount_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_DeleteAccount_Response, iresult_),
  };
  AccountDB_DeleteAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountDB_DeleteAccount_Response_descriptor_,
      AccountDB_DeleteAccount_Response::default_instance_,
      AccountDB_DeleteAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_DeleteAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountDB_DeleteAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountDB_DeleteAccount_Response));
  enAccountType_descriptor_ = file->enum_type(0);
  enAddAccountType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_2eRegAuth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountID_descriptor_, &AccountID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_RegAccount_Request_descriptor_, &RegAuth_RegAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_RegAccount_Response_descriptor_, &RegAuth_RegAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_AuthAccount_Request_descriptor_, &RegAuth_AuthAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_AuthAccount_Response_descriptor_, &RegAuth_AuthAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_UpdateAccount_Request_descriptor_, &RegAuth_UpdateAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_UpdateAccount_Response_descriptor_, &RegAuth_UpdateAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountDB_AddAccount_Request_descriptor_, &AccountDB_AddAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountDB_AddAccount_Response_descriptor_, &AccountDB_AddAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountDB_FetchAccount_Request_descriptor_, &AccountDB_FetchAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountDB_FetchAccount_Response_descriptor_, &AccountDB_FetchAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountDB_UpdateAccount_Request_descriptor_, &AccountDB_UpdateAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountDB_UpdateAccount_Response_descriptor_, &AccountDB_UpdateAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountDB_DeleteAccount_Request_descriptor_, &AccountDB_DeleteAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountDB_DeleteAccount_Response_descriptor_, &AccountDB_DeleteAccount_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto() {
  delete AccountID::default_instance_;
  delete AccountID_reflection_;
  delete RegAuth_RegAccount_Request::default_instance_;
  delete RegAuth_RegAccount_Request_reflection_;
  delete RegAuth_RegAccount_Response::default_instance_;
  delete RegAuth_RegAccount_Response_reflection_;
  delete RegAuth_AuthAccount_Request::default_instance_;
  delete RegAuth_AuthAccount_Request_reflection_;
  delete RegAuth_AuthAccount_Response::default_instance_;
  delete RegAuth_AuthAccount_Response_reflection_;
  delete RegAuth_UpdateAccount_Request::default_instance_;
  delete RegAuth_UpdateAccount_Request_reflection_;
  delete RegAuth_UpdateAccount_Response::default_instance_;
  delete RegAuth_UpdateAccount_Response_reflection_;
  delete AccountDB_AddAccount_Request::default_instance_;
  delete AccountDB_AddAccount_Request_reflection_;
  delete AccountDB_AddAccount_Response::default_instance_;
  delete AccountDB_AddAccount_Response_reflection_;
  delete AccountDB_FetchAccount_Request::default_instance_;
  delete AccountDB_FetchAccount_Request_reflection_;
  delete AccountDB_FetchAccount_Response::default_instance_;
  delete AccountDB_FetchAccount_Response_reflection_;
  delete AccountDB_UpdateAccount_Request::default_instance_;
  delete AccountDB_UpdateAccount_Request_reflection_;
  delete AccountDB_UpdateAccount_Response::default_instance_;
  delete AccountDB_UpdateAccount_Response_reflection_;
  delete AccountDB_DeleteAccount_Request::default_instance_;
  delete AccountDB_DeleteAccount_Request_reflection_;
  delete AccountDB_DeleteAccount_Response::default_instance_;
  delete AccountDB_DeleteAccount_Response_reflection_;
}

void protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032GameProtocol.RegAuth.proto\032\031GameProtoc"
    "ol.Common.proto\"5\n\tAccountID\022\022\n\nstrAccou"
    "nt\030\001 \001(\t\022\024\n\014iAccountType\030\002 \001(\005\"\212\001\n\032RegAu"
    "th_RegAccount_Request\022\022\n\niRegOpType\030\001 \001("
    "\005\022\037\n\013stAccountID\030\002 \001(\0132\n.AccountID\022\023\n\013st"
    "rPassword\030\003 \001(\t\022\"\n\016stNewAccountID\030\004 \001(\0132"
    "\n.AccountID\".\n\033RegAuth_RegAccount_Respon"
    "se\022\017\n\007iResult\030\001 \001(\005\"S\n\033RegAuth_AuthAccou"
    "nt_Request\022\037\n\013stAccountID\030\001 \001(\0132\n.Accoun"
    "tID\022\023\n\013strPassword\030\003 \001(\t\"i\n\034RegAuth_Auth"
    "Account_Response\022\017\n\007iResult\030\001 \001(\005\022\013\n\003uin"
    "\030\002 \001(\r\022\024\n\014iLastWorldID\030\003 \001(\005\022\025\n\rstrSessi"
    "onKey\030\004 \001(\t\"j\n\035RegAuth_UpdateAccount_Req"
    "uest\022\037\n\013stAccountID\030\001 \001(\0132\n.AccountID\022\023\n"
    "\013strPassword\030\002 \001(\t\022\023\n\013iNewWorldID\030\003 \001(\005\""
    "1\n\036RegAuth_UpdateAccount_Response\022\017\n\007iRe"
    "sult\030\001 \001(\005\"\255\001\n\034AccountDB_AddAccount_Requ"
    "est\022\037\n\013stAccountID\030\001 \001(\0132\n.AccountID\022\013\n\003"
    "uin\030\002 \001(\r\022\024\n\014iLastWorldID\030\003 \001(\005\022\023\n\013strPa"
    "ssword\030\004 \001(\t\022\020\n\010iAddType\030\005 \001(\005\022\"\n\016stOldA"
    "ccountID\030\006 \001(\0132\n.AccountID\"f\n\035AccountDB_"
    "AddAccount_Response\022\017\n\007iResult\030\001 \001(\005\022\020\n\010"
    "iAddType\030\002 \001(\005\022\"\n\016stOldAccountID\030\003 \001(\0132\n"
    ".AccountID\"\222\001\n\036AccountDB_FetchAccount_Re"
    "quest\022\037\n\013stAccountID\030\001 \001(\0132\n.AccountID\022\026"
    "\n\016bIsBindAccount\030\002 \001(\010\022\"\n\016stNewAccountID"
    "\030\003 \001(\0132\n.AccountID\022\023\n\013strPassword\030\004 \001(\t\""
    "\333\001\n\037AccountDB_FetchAccount_Response\022\017\n\007i"
    "Result\030\001 \001(\005\022\037\n\013stAccountID\030\002 \001(\0132\n.Acco"
    "untID\022\013\n\003uin\030\004 \001(\r\022\024\n\014iLastWorldID\030\005 \001(\005"
    "\022\021\n\tbIsBinded\030\006 \001(\010\022\026\n\016bIsBindAccount\030\007 "
    "\001(\010\022 \n\014stNewAccount\030\010 \001(\0132\n.AccountID\022\026\n"
    "\016strNewPassword\030\t \001(\t\"m\n\037AccountDB_Updat"
    "eAccount_Request\022\037\n\013stAccountID\030\001 \001(\0132\n."
    "AccountID\022\023\n\013strPassword\030\003 \001(\t\022\024\n\014iLastW"
    "orldID\030\004 \001(\005\"3\n AccountDB_UpdateAccount_"
    "Response\022\017\n\007iResult\030\001 \001(\005\"B\n\037AccountDB_D"
    "eleteAccount_Request\022\037\n\013stAccountID\030\001 \001("
    "\0132\n.AccountID\"3\n AccountDB_DeleteAccount"
    "_Response\022\017\n\007iResult\030\001 \001(\005*D\n\renAccountT"
    "ype\022\032\n\026LOGIN_PLATFORM_INVALID\020\000\022\027\n\023LOGIN"
    "_PLATFORM_MAIN\020\001*~\n\020enAddAccountType\022\032\n\026"
    "EN_ADD_ACCOUNT_INVALID\020\000\022\030\n\024EN_ADD_ACCOU"
    "NT_GUEST\020\001\022\033\n\027EN_ADD_ACCOUNT_REGISTER\020\002\022"
    "\027\n\023EN_ADD_ACCOUNT_BIND\020\003", 1784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol.RegAuth.proto", &protobuf_RegisterTypes);
  AccountID::default_instance_ = new AccountID();
  RegAuth_RegAccount_Request::default_instance_ = new RegAuth_RegAccount_Request();
  RegAuth_RegAccount_Response::default_instance_ = new RegAuth_RegAccount_Response();
  RegAuth_AuthAccount_Request::default_instance_ = new RegAuth_AuthAccount_Request();
  RegAuth_AuthAccount_Response::default_instance_ = new RegAuth_AuthAccount_Response();
  RegAuth_UpdateAccount_Request::default_instance_ = new RegAuth_UpdateAccount_Request();
  RegAuth_UpdateAccount_Response::default_instance_ = new RegAuth_UpdateAccount_Response();
  AccountDB_AddAccount_Request::default_instance_ = new AccountDB_AddAccount_Request();
  AccountDB_AddAccount_Response::default_instance_ = new AccountDB_AddAccount_Response();
  AccountDB_FetchAccount_Request::default_instance_ = new AccountDB_FetchAccount_Request();
  AccountDB_FetchAccount_Response::default_instance_ = new AccountDB_FetchAccount_Response();
  AccountDB_UpdateAccount_Request::default_instance_ = new AccountDB_UpdateAccount_Request();
  AccountDB_UpdateAccount_Response::default_instance_ = new AccountDB_UpdateAccount_Response();
  AccountDB_DeleteAccount_Request::default_instance_ = new AccountDB_DeleteAccount_Request();
  AccountDB_DeleteAccount_Response::default_instance_ = new AccountDB_DeleteAccount_Response();
  AccountID::default_instance_->InitAsDefaultInstance();
  RegAuth_RegAccount_Request::default_instance_->InitAsDefaultInstance();
  RegAuth_RegAccount_Response::default_instance_->InitAsDefaultInstance();
  RegAuth_AuthAccount_Request::default_instance_->InitAsDefaultInstance();
  RegAuth_AuthAccount_Response::default_instance_->InitAsDefaultInstance();
  RegAuth_UpdateAccount_Request::default_instance_->InitAsDefaultInstance();
  RegAuth_UpdateAccount_Response::default_instance_->InitAsDefaultInstance();
  AccountDB_AddAccount_Request::default_instance_->InitAsDefaultInstance();
  AccountDB_AddAccount_Response::default_instance_->InitAsDefaultInstance();
  AccountDB_FetchAccount_Request::default_instance_->InitAsDefaultInstance();
  AccountDB_FetchAccount_Response::default_instance_->InitAsDefaultInstance();
  AccountDB_UpdateAccount_Request::default_instance_->InitAsDefaultInstance();
  AccountDB_UpdateAccount_Response::default_instance_->InitAsDefaultInstance();
  AccountDB_DeleteAccount_Request::default_instance_->InitAsDefaultInstance();
  AccountDB_DeleteAccount_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_2eRegAuth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_2eRegAuth_2eproto {
  StaticDescriptorInitializer_GameProtocol_2eRegAuth_2eproto() {
    protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  }
} static_descriptor_initializer_GameProtocol_2eRegAuth_2eproto_;
const ::google::protobuf::EnumDescriptor* enAccountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enAccountType_descriptor_;
}
bool enAccountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enAddAccountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enAddAccountType_descriptor_;
}
bool enAddAccountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AccountID::kStrAccountFieldNumber;
const int AccountID::kIAccountTypeFieldNumber;
#endif  // !_MSC_VER

AccountID::AccountID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountID::InitAsDefaultInstance() {
}

AccountID::AccountID(const AccountID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountID::SharedCtor() {
  _cached_size_ = 0;
  straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iaccounttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountID::~AccountID() {
  SharedDtor();
}

void AccountID::SharedDtor() {
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    delete straccount_;
  }
  if (this != default_instance_) {
  }
}

void AccountID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountID_descriptor_;
}

const AccountID& AccountID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

AccountID* AccountID::default_instance_ = NULL;

AccountID* AccountID::New() const {
  return new AccountID;
}

void AccountID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccount()) {
      if (straccount_ != &::google::protobuf::internal::kEmptyString) {
        straccount_->clear();
      }
    }
    iaccounttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccount().data(), this->straccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iAccountType;
        break;
      }

      // optional int32 iAccountType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAccountType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iaccounttype_)));
          set_has_iaccounttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strAccount = 1;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccount(), output);
  }

  // optional int32 iAccountType = 2;
  if (has_iaccounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iaccounttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strAccount = 1;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccount(), target);
  }

  // optional int32 iAccountType = 2;
  if (has_iaccounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iaccounttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strAccount = 1;
    if (has_straccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccount());
    }

    // optional int32 iAccountType = 2;
    if (has_iaccounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iaccounttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountID::MergeFrom(const AccountID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccount()) {
      set_straccount(from.straccount());
    }
    if (from.has_iaccounttype()) {
      set_iaccounttype(from.iaccounttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountID::CopyFrom(const AccountID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountID::IsInitialized() const {

  return true;
}

void AccountID::Swap(AccountID* other) {
  if (other != this) {
    std::swap(straccount_, other->straccount_);
    std::swap(iaccounttype_, other->iaccounttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountID_descriptor_;
  metadata.reflection = AccountID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_RegAccount_Request::kIRegOpTypeFieldNumber;
const int RegAuth_RegAccount_Request::kStAccountIDFieldNumber;
const int RegAuth_RegAccount_Request::kStrPasswordFieldNumber;
const int RegAuth_RegAccount_Request::kStNewAccountIDFieldNumber;
#endif  // !_MSC_VER

RegAuth_RegAccount_Request::RegAuth_RegAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_RegAccount_Request::InitAsDefaultInstance() {
  staccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
  stnewaccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
}

RegAuth_RegAccount_Request::RegAuth_RegAccount_Request(const RegAuth_RegAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_RegAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  iregoptype_ = 0;
  staccountid_ = NULL;
  strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stnewaccountid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_RegAccount_Request::~RegAuth_RegAccount_Request() {
  SharedDtor();
}

void RegAuth_RegAccount_Request::SharedDtor() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (this != default_instance_) {
    delete staccountid_;
    delete stnewaccountid_;
  }
}

void RegAuth_RegAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_RegAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_RegAccount_Request_descriptor_;
}

const RegAuth_RegAccount_Request& RegAuth_RegAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_RegAccount_Request* RegAuth_RegAccount_Request::default_instance_ = NULL;

RegAuth_RegAccount_Request* RegAuth_RegAccount_Request::New() const {
  return new RegAuth_RegAccount_Request;
}

void RegAuth_RegAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iregoptype_ = 0;
    if (has_staccountid()) {
      if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
    }
    if (has_strpassword()) {
      if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
        strpassword_->clear();
      }
    }
    if (has_stnewaccountid()) {
      if (stnewaccountid_ != NULL) stnewaccountid_->::AccountID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_RegAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iRegOpType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iregoptype_)));
          set_has_iregoptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stAccountID;
        break;
      }

      // optional .AccountID stAccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stAccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strPassword;
        break;
      }

      // optional string strPassword = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpassword().data(), this->strpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stNewAccountID;
        break;
      }

      // optional .AccountID stNewAccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stNewAccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stnewaccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_RegAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iRegOpType = 1;
  if (has_iregoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iregoptype(), output);
  }

  // optional .AccountID stAccountID = 2;
  if (has_staccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->staccountid(), output);
  }

  // optional string strPassword = 3;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strpassword(), output);
  }

  // optional .AccountID stNewAccountID = 4;
  if (has_stnewaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stnewaccountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_RegAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iRegOpType = 1;
  if (has_iregoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iregoptype(), target);
  }

  // optional .AccountID stAccountID = 2;
  if (has_staccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->staccountid(), target);
  }

  // optional string strPassword = 3;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strpassword(), target);
  }

  // optional .AccountID stNewAccountID = 4;
  if (has_stnewaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stnewaccountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_RegAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iRegOpType = 1;
    if (has_iregoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iregoptype());
    }

    // optional .AccountID stAccountID = 2;
    if (has_staccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staccountid());
    }

    // optional string strPassword = 3;
    if (has_strpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpassword());
    }

    // optional .AccountID stNewAccountID = 4;
    if (has_stnewaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stnewaccountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_RegAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_RegAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_RegAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_RegAccount_Request::MergeFrom(const RegAuth_RegAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iregoptype()) {
      set_iregoptype(from.iregoptype());
    }
    if (from.has_staccountid()) {
      mutable_staccountid()->::AccountID::MergeFrom(from.staccountid());
    }
    if (from.has_strpassword()) {
      set_strpassword(from.strpassword());
    }
    if (from.has_stnewaccountid()) {
      mutable_stnewaccountid()->::AccountID::MergeFrom(from.stnewaccountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_RegAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_RegAccount_Request::CopyFrom(const RegAuth_RegAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_RegAccount_Request::IsInitialized() const {

  return true;
}

void RegAuth_RegAccount_Request::Swap(RegAuth_RegAccount_Request* other) {
  if (other != this) {
    std::swap(iregoptype_, other->iregoptype_);
    std::swap(staccountid_, other->staccountid_);
    std::swap(strpassword_, other->strpassword_);
    std::swap(stnewaccountid_, other->stnewaccountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_RegAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_RegAccount_Request_descriptor_;
  metadata.reflection = RegAuth_RegAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_RegAccount_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

RegAuth_RegAccount_Response::RegAuth_RegAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_RegAccount_Response::InitAsDefaultInstance() {
}

RegAuth_RegAccount_Response::RegAuth_RegAccount_Response(const RegAuth_RegAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_RegAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_RegAccount_Response::~RegAuth_RegAccount_Response() {
  SharedDtor();
}

void RegAuth_RegAccount_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegAuth_RegAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_RegAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_RegAccount_Response_descriptor_;
}

const RegAuth_RegAccount_Response& RegAuth_RegAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_RegAccount_Response* RegAuth_RegAccount_Response::default_instance_ = NULL;

RegAuth_RegAccount_Response* RegAuth_RegAccount_Response::New() const {
  return new RegAuth_RegAccount_Response;
}

void RegAuth_RegAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_RegAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_RegAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_RegAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_RegAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_RegAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_RegAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_RegAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_RegAccount_Response::MergeFrom(const RegAuth_RegAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_RegAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_RegAccount_Response::CopyFrom(const RegAuth_RegAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_RegAccount_Response::IsInitialized() const {

  return true;
}

void RegAuth_RegAccount_Response::Swap(RegAuth_RegAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_RegAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_RegAccount_Response_descriptor_;
  metadata.reflection = RegAuth_RegAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_AuthAccount_Request::kStAccountIDFieldNumber;
const int RegAuth_AuthAccount_Request::kStrPasswordFieldNumber;
#endif  // !_MSC_VER

RegAuth_AuthAccount_Request::RegAuth_AuthAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_AuthAccount_Request::InitAsDefaultInstance() {
  staccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
}

RegAuth_AuthAccount_Request::RegAuth_AuthAccount_Request(const RegAuth_AuthAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_AuthAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  staccountid_ = NULL;
  strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_AuthAccount_Request::~RegAuth_AuthAccount_Request() {
  SharedDtor();
}

void RegAuth_AuthAccount_Request::SharedDtor() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (this != default_instance_) {
    delete staccountid_;
  }
}

void RegAuth_AuthAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_AuthAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_AuthAccount_Request_descriptor_;
}

const RegAuth_AuthAccount_Request& RegAuth_AuthAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_AuthAccount_Request* RegAuth_AuthAccount_Request::default_instance_ = NULL;

RegAuth_AuthAccount_Request* RegAuth_AuthAccount_Request::New() const {
  return new RegAuth_AuthAccount_Request;
}

void RegAuth_AuthAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_staccountid()) {
      if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
    }
    if (has_strpassword()) {
      if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
        strpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_AuthAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountID stAccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strPassword;
        break;
      }

      // optional string strPassword = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpassword().data(), this->strpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_AuthAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->staccountid(), output);
  }

  // optional string strPassword = 3;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_AuthAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->staccountid(), target);
  }

  // optional string strPassword = 3;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_AuthAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountID stAccountID = 1;
    if (has_staccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staccountid());
    }

    // optional string strPassword = 3;
    if (has_strpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_AuthAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_AuthAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_AuthAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_AuthAccount_Request::MergeFrom(const RegAuth_AuthAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_staccountid()) {
      mutable_staccountid()->::AccountID::MergeFrom(from.staccountid());
    }
    if (from.has_strpassword()) {
      set_strpassword(from.strpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_AuthAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_AuthAccount_Request::CopyFrom(const RegAuth_AuthAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_AuthAccount_Request::IsInitialized() const {

  return true;
}

void RegAuth_AuthAccount_Request::Swap(RegAuth_AuthAccount_Request* other) {
  if (other != this) {
    std::swap(staccountid_, other->staccountid_);
    std::swap(strpassword_, other->strpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_AuthAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_AuthAccount_Request_descriptor_;
  metadata.reflection = RegAuth_AuthAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_AuthAccount_Response::kIResultFieldNumber;
const int RegAuth_AuthAccount_Response::kUinFieldNumber;
const int RegAuth_AuthAccount_Response::kILastWorldIDFieldNumber;
const int RegAuth_AuthAccount_Response::kStrSessionKeyFieldNumber;
#endif  // !_MSC_VER

RegAuth_AuthAccount_Response::RegAuth_AuthAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_AuthAccount_Response::InitAsDefaultInstance() {
}

RegAuth_AuthAccount_Response::RegAuth_AuthAccount_Response(const RegAuth_AuthAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_AuthAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uin_ = 0u;
  ilastworldid_ = 0;
  strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_AuthAccount_Response::~RegAuth_AuthAccount_Response() {
  SharedDtor();
}

void RegAuth_AuthAccount_Response::SharedDtor() {
  if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete strsessionkey_;
  }
  if (this != default_instance_) {
  }
}

void RegAuth_AuthAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_AuthAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_AuthAccount_Response_descriptor_;
}

const RegAuth_AuthAccount_Response& RegAuth_AuthAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_AuthAccount_Response* RegAuth_AuthAccount_Response::default_instance_ = NULL;

RegAuth_AuthAccount_Response* RegAuth_AuthAccount_Response::New() const {
  return new RegAuth_AuthAccount_Response;
}

void RegAuth_AuthAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uin_ = 0u;
    ilastworldid_ = 0;
    if (has_strsessionkey()) {
      if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
        strsessionkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_AuthAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iLastWorldID;
        break;
      }

      // optional int32 iLastWorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastworldid_)));
          set_has_ilastworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strSessionKey;
        break;
      }

      // optional string strSessionKey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsessionkey().data(), this->strsessionkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_AuthAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional int32 iLastWorldID = 3;
  if (has_ilastworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ilastworldid(), output);
  }

  // optional string strSessionKey = 4;
  if (has_strsessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsessionkey().data(), this->strsessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strsessionkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_AuthAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional int32 iLastWorldID = 3;
  if (has_ilastworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ilastworldid(), target);
  }

  // optional string strSessionKey = 4;
  if (has_strsessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsessionkey().data(), this->strsessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strsessionkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_AuthAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iLastWorldID = 3;
    if (has_ilastworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastworldid());
    }

    // optional string strSessionKey = 4;
    if (has_strsessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsessionkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_AuthAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_AuthAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_AuthAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_AuthAccount_Response::MergeFrom(const RegAuth_AuthAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ilastworldid()) {
      set_ilastworldid(from.ilastworldid());
    }
    if (from.has_strsessionkey()) {
      set_strsessionkey(from.strsessionkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_AuthAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_AuthAccount_Response::CopyFrom(const RegAuth_AuthAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_AuthAccount_Response::IsInitialized() const {

  return true;
}

void RegAuth_AuthAccount_Response::Swap(RegAuth_AuthAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uin_, other->uin_);
    std::swap(ilastworldid_, other->ilastworldid_);
    std::swap(strsessionkey_, other->strsessionkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_AuthAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_AuthAccount_Response_descriptor_;
  metadata.reflection = RegAuth_AuthAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_UpdateAccount_Request::kStAccountIDFieldNumber;
const int RegAuth_UpdateAccount_Request::kStrPasswordFieldNumber;
const int RegAuth_UpdateAccount_Request::kINewWorldIDFieldNumber;
#endif  // !_MSC_VER

RegAuth_UpdateAccount_Request::RegAuth_UpdateAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_UpdateAccount_Request::InitAsDefaultInstance() {
  staccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
}

RegAuth_UpdateAccount_Request::RegAuth_UpdateAccount_Request(const RegAuth_UpdateAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_UpdateAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  staccountid_ = NULL;
  strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inewworldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_UpdateAccount_Request::~RegAuth_UpdateAccount_Request() {
  SharedDtor();
}

void RegAuth_UpdateAccount_Request::SharedDtor() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (this != default_instance_) {
    delete staccountid_;
  }
}

void RegAuth_UpdateAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_UpdateAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_UpdateAccount_Request_descriptor_;
}

const RegAuth_UpdateAccount_Request& RegAuth_UpdateAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_UpdateAccount_Request* RegAuth_UpdateAccount_Request::default_instance_ = NULL;

RegAuth_UpdateAccount_Request* RegAuth_UpdateAccount_Request::New() const {
  return new RegAuth_UpdateAccount_Request;
}

void RegAuth_UpdateAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_staccountid()) {
      if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
    }
    if (has_strpassword()) {
      if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
        strpassword_->clear();
      }
    }
    inewworldid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_UpdateAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountID stAccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strPassword;
        break;
      }

      // optional string strPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpassword().data(), this->strpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iNewWorldID;
        break;
      }

      // optional int32 iNewWorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNewWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inewworldid_)));
          set_has_inewworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_UpdateAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->staccountid(), output);
  }

  // optional string strPassword = 2;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strpassword(), output);
  }

  // optional int32 iNewWorldID = 3;
  if (has_inewworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inewworldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_UpdateAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->staccountid(), target);
  }

  // optional string strPassword = 2;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpassword(), target);
  }

  // optional int32 iNewWorldID = 3;
  if (has_inewworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inewworldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_UpdateAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountID stAccountID = 1;
    if (has_staccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staccountid());
    }

    // optional string strPassword = 2;
    if (has_strpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpassword());
    }

    // optional int32 iNewWorldID = 3;
    if (has_inewworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inewworldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_UpdateAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_UpdateAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_UpdateAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_UpdateAccount_Request::MergeFrom(const RegAuth_UpdateAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_staccountid()) {
      mutable_staccountid()->::AccountID::MergeFrom(from.staccountid());
    }
    if (from.has_strpassword()) {
      set_strpassword(from.strpassword());
    }
    if (from.has_inewworldid()) {
      set_inewworldid(from.inewworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_UpdateAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_UpdateAccount_Request::CopyFrom(const RegAuth_UpdateAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_UpdateAccount_Request::IsInitialized() const {

  return true;
}

void RegAuth_UpdateAccount_Request::Swap(RegAuth_UpdateAccount_Request* other) {
  if (other != this) {
    std::swap(staccountid_, other->staccountid_);
    std::swap(strpassword_, other->strpassword_);
    std::swap(inewworldid_, other->inewworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_UpdateAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_UpdateAccount_Request_descriptor_;
  metadata.reflection = RegAuth_UpdateAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_UpdateAccount_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

RegAuth_UpdateAccount_Response::RegAuth_UpdateAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_UpdateAccount_Response::InitAsDefaultInstance() {
}

RegAuth_UpdateAccount_Response::RegAuth_UpdateAccount_Response(const RegAuth_UpdateAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_UpdateAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_UpdateAccount_Response::~RegAuth_UpdateAccount_Response() {
  SharedDtor();
}

void RegAuth_UpdateAccount_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegAuth_UpdateAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_UpdateAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_UpdateAccount_Response_descriptor_;
}

const RegAuth_UpdateAccount_Response& RegAuth_UpdateAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_UpdateAccount_Response* RegAuth_UpdateAccount_Response::default_instance_ = NULL;

RegAuth_UpdateAccount_Response* RegAuth_UpdateAccount_Response::New() const {
  return new RegAuth_UpdateAccount_Response;
}

void RegAuth_UpdateAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_UpdateAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_UpdateAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_UpdateAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_UpdateAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_UpdateAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_UpdateAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_UpdateAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_UpdateAccount_Response::MergeFrom(const RegAuth_UpdateAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_UpdateAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_UpdateAccount_Response::CopyFrom(const RegAuth_UpdateAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_UpdateAccount_Response::IsInitialized() const {

  return true;
}

void RegAuth_UpdateAccount_Response::Swap(RegAuth_UpdateAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_UpdateAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_UpdateAccount_Response_descriptor_;
  metadata.reflection = RegAuth_UpdateAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountDB_AddAccount_Request::kStAccountIDFieldNumber;
const int AccountDB_AddAccount_Request::kUinFieldNumber;
const int AccountDB_AddAccount_Request::kILastWorldIDFieldNumber;
const int AccountDB_AddAccount_Request::kStrPasswordFieldNumber;
const int AccountDB_AddAccount_Request::kIAddTypeFieldNumber;
const int AccountDB_AddAccount_Request::kStOldAccountIDFieldNumber;
#endif  // !_MSC_VER

AccountDB_AddAccount_Request::AccountDB_AddAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountDB_AddAccount_Request::InitAsDefaultInstance() {
  staccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
  stoldaccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
}

AccountDB_AddAccount_Request::AccountDB_AddAccount_Request(const AccountDB_AddAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountDB_AddAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  staccountid_ = NULL;
  uin_ = 0u;
  ilastworldid_ = 0;
  strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iaddtype_ = 0;
  stoldaccountid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountDB_AddAccount_Request::~AccountDB_AddAccount_Request() {
  SharedDtor();
}

void AccountDB_AddAccount_Request::SharedDtor() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (this != default_instance_) {
    delete staccountid_;
    delete stoldaccountid_;
  }
}

void AccountDB_AddAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountDB_AddAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountDB_AddAccount_Request_descriptor_;
}

const AccountDB_AddAccount_Request& AccountDB_AddAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

AccountDB_AddAccount_Request* AccountDB_AddAccount_Request::default_instance_ = NULL;

AccountDB_AddAccount_Request* AccountDB_AddAccount_Request::New() const {
  return new AccountDB_AddAccount_Request;
}

void AccountDB_AddAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_staccountid()) {
      if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
    }
    uin_ = 0u;
    ilastworldid_ = 0;
    if (has_strpassword()) {
      if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
        strpassword_->clear();
      }
    }
    iaddtype_ = 0;
    if (has_stoldaccountid()) {
      if (stoldaccountid_ != NULL) stoldaccountid_->::AccountID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountDB_AddAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountID stAccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iLastWorldID;
        break;
      }

      // optional int32 iLastWorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastworldid_)));
          set_has_ilastworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strPassword;
        break;
      }

      // optional string strPassword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpassword().data(), this->strpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iAddType;
        break;
      }

      // optional int32 iAddType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAddType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iaddtype_)));
          set_has_iaddtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stOldAccountID;
        break;
      }

      // optional .AccountID stOldAccountID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stOldAccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stoldaccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountDB_AddAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->staccountid(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional int32 iLastWorldID = 3;
  if (has_ilastworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ilastworldid(), output);
  }

  // optional string strPassword = 4;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strpassword(), output);
  }

  // optional int32 iAddType = 5;
  if (has_iaddtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iaddtype(), output);
  }

  // optional .AccountID stOldAccountID = 6;
  if (has_stoldaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stoldaccountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountDB_AddAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->staccountid(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional int32 iLastWorldID = 3;
  if (has_ilastworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ilastworldid(), target);
  }

  // optional string strPassword = 4;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strpassword(), target);
  }

  // optional int32 iAddType = 5;
  if (has_iaddtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iaddtype(), target);
  }

  // optional .AccountID stOldAccountID = 6;
  if (has_stoldaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stoldaccountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountDB_AddAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountID stAccountID = 1;
    if (has_staccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staccountid());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iLastWorldID = 3;
    if (has_ilastworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastworldid());
    }

    // optional string strPassword = 4;
    if (has_strpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpassword());
    }

    // optional int32 iAddType = 5;
    if (has_iaddtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iaddtype());
    }

    // optional .AccountID stOldAccountID = 6;
    if (has_stoldaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stoldaccountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountDB_AddAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountDB_AddAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountDB_AddAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountDB_AddAccount_Request::MergeFrom(const AccountDB_AddAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_staccountid()) {
      mutable_staccountid()->::AccountID::MergeFrom(from.staccountid());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ilastworldid()) {
      set_ilastworldid(from.ilastworldid());
    }
    if (from.has_strpassword()) {
      set_strpassword(from.strpassword());
    }
    if (from.has_iaddtype()) {
      set_iaddtype(from.iaddtype());
    }
    if (from.has_stoldaccountid()) {
      mutable_stoldaccountid()->::AccountID::MergeFrom(from.stoldaccountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountDB_AddAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDB_AddAccount_Request::CopyFrom(const AccountDB_AddAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDB_AddAccount_Request::IsInitialized() const {

  return true;
}

void AccountDB_AddAccount_Request::Swap(AccountDB_AddAccount_Request* other) {
  if (other != this) {
    std::swap(staccountid_, other->staccountid_);
    std::swap(uin_, other->uin_);
    std::swap(ilastworldid_, other->ilastworldid_);
    std::swap(strpassword_, other->strpassword_);
    std::swap(iaddtype_, other->iaddtype_);
    std::swap(stoldaccountid_, other->stoldaccountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountDB_AddAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountDB_AddAccount_Request_descriptor_;
  metadata.reflection = AccountDB_AddAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountDB_AddAccount_Response::kIResultFieldNumber;
const int AccountDB_AddAccount_Response::kIAddTypeFieldNumber;
const int AccountDB_AddAccount_Response::kStOldAccountIDFieldNumber;
#endif  // !_MSC_VER

AccountDB_AddAccount_Response::AccountDB_AddAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountDB_AddAccount_Response::InitAsDefaultInstance() {
  stoldaccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
}

AccountDB_AddAccount_Response::AccountDB_AddAccount_Response(const AccountDB_AddAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountDB_AddAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  iaddtype_ = 0;
  stoldaccountid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountDB_AddAccount_Response::~AccountDB_AddAccount_Response() {
  SharedDtor();
}

void AccountDB_AddAccount_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stoldaccountid_;
  }
}

void AccountDB_AddAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountDB_AddAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountDB_AddAccount_Response_descriptor_;
}

const AccountDB_AddAccount_Response& AccountDB_AddAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

AccountDB_AddAccount_Response* AccountDB_AddAccount_Response::default_instance_ = NULL;

AccountDB_AddAccount_Response* AccountDB_AddAccount_Response::New() const {
  return new AccountDB_AddAccount_Response;
}

void AccountDB_AddAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    iaddtype_ = 0;
    if (has_stoldaccountid()) {
      if (stoldaccountid_ != NULL) stoldaccountid_->::AccountID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountDB_AddAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iAddType;
        break;
      }

      // optional int32 iAddType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAddType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iaddtype_)));
          set_has_iaddtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stOldAccountID;
        break;
      }

      // optional .AccountID stOldAccountID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stOldAccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stoldaccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountDB_AddAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iAddType = 2;
  if (has_iaddtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iaddtype(), output);
  }

  // optional .AccountID stOldAccountID = 3;
  if (has_stoldaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stoldaccountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountDB_AddAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iAddType = 2;
  if (has_iaddtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iaddtype(), target);
  }

  // optional .AccountID stOldAccountID = 3;
  if (has_stoldaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stoldaccountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountDB_AddAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iAddType = 2;
    if (has_iaddtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iaddtype());
    }

    // optional .AccountID stOldAccountID = 3;
    if (has_stoldaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stoldaccountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountDB_AddAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountDB_AddAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountDB_AddAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountDB_AddAccount_Response::MergeFrom(const AccountDB_AddAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_iaddtype()) {
      set_iaddtype(from.iaddtype());
    }
    if (from.has_stoldaccountid()) {
      mutable_stoldaccountid()->::AccountID::MergeFrom(from.stoldaccountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountDB_AddAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDB_AddAccount_Response::CopyFrom(const AccountDB_AddAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDB_AddAccount_Response::IsInitialized() const {

  return true;
}

void AccountDB_AddAccount_Response::Swap(AccountDB_AddAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(iaddtype_, other->iaddtype_);
    std::swap(stoldaccountid_, other->stoldaccountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountDB_AddAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountDB_AddAccount_Response_descriptor_;
  metadata.reflection = AccountDB_AddAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountDB_FetchAccount_Request::kStAccountIDFieldNumber;
const int AccountDB_FetchAccount_Request::kBIsBindAccountFieldNumber;
const int AccountDB_FetchAccount_Request::kStNewAccountIDFieldNumber;
const int AccountDB_FetchAccount_Request::kStrPasswordFieldNumber;
#endif  // !_MSC_VER

AccountDB_FetchAccount_Request::AccountDB_FetchAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountDB_FetchAccount_Request::InitAsDefaultInstance() {
  staccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
  stnewaccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
}

AccountDB_FetchAccount_Request::AccountDB_FetchAccount_Request(const AccountDB_FetchAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountDB_FetchAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  staccountid_ = NULL;
  bisbindaccount_ = false;
  stnewaccountid_ = NULL;
  strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountDB_FetchAccount_Request::~AccountDB_FetchAccount_Request() {
  SharedDtor();
}

void AccountDB_FetchAccount_Request::SharedDtor() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (this != default_instance_) {
    delete staccountid_;
    delete stnewaccountid_;
  }
}

void AccountDB_FetchAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountDB_FetchAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountDB_FetchAccount_Request_descriptor_;
}

const AccountDB_FetchAccount_Request& AccountDB_FetchAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

AccountDB_FetchAccount_Request* AccountDB_FetchAccount_Request::default_instance_ = NULL;

AccountDB_FetchAccount_Request* AccountDB_FetchAccount_Request::New() const {
  return new AccountDB_FetchAccount_Request;
}

void AccountDB_FetchAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_staccountid()) {
      if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
    }
    bisbindaccount_ = false;
    if (has_stnewaccountid()) {
      if (stnewaccountid_ != NULL) stnewaccountid_->::AccountID::Clear();
    }
    if (has_strpassword()) {
      if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
        strpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountDB_FetchAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountID stAccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsBindAccount;
        break;
      }

      // optional bool bIsBindAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsBindAccount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisbindaccount_)));
          set_has_bisbindaccount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stNewAccountID;
        break;
      }

      // optional .AccountID stNewAccountID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stNewAccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stnewaccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strPassword;
        break;
      }

      // optional string strPassword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpassword().data(), this->strpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountDB_FetchAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->staccountid(), output);
  }

  // optional bool bIsBindAccount = 2;
  if (has_bisbindaccount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisbindaccount(), output);
  }

  // optional .AccountID stNewAccountID = 3;
  if (has_stnewaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stnewaccountid(), output);
  }

  // optional string strPassword = 4;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountDB_FetchAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->staccountid(), target);
  }

  // optional bool bIsBindAccount = 2;
  if (has_bisbindaccount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisbindaccount(), target);
  }

  // optional .AccountID stNewAccountID = 3;
  if (has_stnewaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stnewaccountid(), target);
  }

  // optional string strPassword = 4;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountDB_FetchAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountID stAccountID = 1;
    if (has_staccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staccountid());
    }

    // optional bool bIsBindAccount = 2;
    if (has_bisbindaccount()) {
      total_size += 1 + 1;
    }

    // optional .AccountID stNewAccountID = 3;
    if (has_stnewaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stnewaccountid());
    }

    // optional string strPassword = 4;
    if (has_strpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountDB_FetchAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountDB_FetchAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountDB_FetchAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountDB_FetchAccount_Request::MergeFrom(const AccountDB_FetchAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_staccountid()) {
      mutable_staccountid()->::AccountID::MergeFrom(from.staccountid());
    }
    if (from.has_bisbindaccount()) {
      set_bisbindaccount(from.bisbindaccount());
    }
    if (from.has_stnewaccountid()) {
      mutable_stnewaccountid()->::AccountID::MergeFrom(from.stnewaccountid());
    }
    if (from.has_strpassword()) {
      set_strpassword(from.strpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountDB_FetchAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDB_FetchAccount_Request::CopyFrom(const AccountDB_FetchAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDB_FetchAccount_Request::IsInitialized() const {

  return true;
}

void AccountDB_FetchAccount_Request::Swap(AccountDB_FetchAccount_Request* other) {
  if (other != this) {
    std::swap(staccountid_, other->staccountid_);
    std::swap(bisbindaccount_, other->bisbindaccount_);
    std::swap(stnewaccountid_, other->stnewaccountid_);
    std::swap(strpassword_, other->strpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountDB_FetchAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountDB_FetchAccount_Request_descriptor_;
  metadata.reflection = AccountDB_FetchAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountDB_FetchAccount_Response::kIResultFieldNumber;
const int AccountDB_FetchAccount_Response::kStAccountIDFieldNumber;
const int AccountDB_FetchAccount_Response::kUinFieldNumber;
const int AccountDB_FetchAccount_Response::kILastWorldIDFieldNumber;
const int AccountDB_FetchAccount_Response::kBIsBindedFieldNumber;
const int AccountDB_FetchAccount_Response::kBIsBindAccountFieldNumber;
const int AccountDB_FetchAccount_Response::kStNewAccountFieldNumber;
const int AccountDB_FetchAccount_Response::kStrNewPasswordFieldNumber;
#endif  // !_MSC_VER

AccountDB_FetchAccount_Response::AccountDB_FetchAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountDB_FetchAccount_Response::InitAsDefaultInstance() {
  staccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
  stnewaccount_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
}

AccountDB_FetchAccount_Response::AccountDB_FetchAccount_Response(const AccountDB_FetchAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountDB_FetchAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  staccountid_ = NULL;
  uin_ = 0u;
  ilastworldid_ = 0;
  bisbinded_ = false;
  bisbindaccount_ = false;
  stnewaccount_ = NULL;
  strnewpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountDB_FetchAccount_Response::~AccountDB_FetchAccount_Response() {
  SharedDtor();
}

void AccountDB_FetchAccount_Response::SharedDtor() {
  if (strnewpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strnewpassword_;
  }
  if (this != default_instance_) {
    delete staccountid_;
    delete stnewaccount_;
  }
}

void AccountDB_FetchAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountDB_FetchAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountDB_FetchAccount_Response_descriptor_;
}

const AccountDB_FetchAccount_Response& AccountDB_FetchAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

AccountDB_FetchAccount_Response* AccountDB_FetchAccount_Response::default_instance_ = NULL;

AccountDB_FetchAccount_Response* AccountDB_FetchAccount_Response::New() const {
  return new AccountDB_FetchAccount_Response;
}

void AccountDB_FetchAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_staccountid()) {
      if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
    }
    uin_ = 0u;
    ilastworldid_ = 0;
    bisbinded_ = false;
    bisbindaccount_ = false;
    if (has_stnewaccount()) {
      if (stnewaccount_ != NULL) stnewaccount_->::AccountID::Clear();
    }
    if (has_strnewpassword()) {
      if (strnewpassword_ != &::google::protobuf::internal::kEmptyString) {
        strnewpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountDB_FetchAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stAccountID;
        break;
      }

      // optional .AccountID stAccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stAccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iLastWorldID;
        break;
      }

      // optional int32 iLastWorldID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastworldid_)));
          set_has_ilastworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bIsBinded;
        break;
      }

      // optional bool bIsBinded = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsBinded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisbinded_)));
          set_has_bisbinded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bIsBindAccount;
        break;
      }

      // optional bool bIsBindAccount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsBindAccount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisbindaccount_)));
          set_has_bisbindaccount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_stNewAccount;
        break;
      }

      // optional .AccountID stNewAccount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stNewAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stnewaccount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strNewPassword;
        break;
      }

      // optional string strNewPassword = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNewPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnewpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnewpassword().data(), this->strnewpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountDB_FetchAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .AccountID stAccountID = 2;
  if (has_staccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->staccountid(), output);
  }

  // optional uint32 uin = 4;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uin(), output);
  }

  // optional int32 iLastWorldID = 5;
  if (has_ilastworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ilastworldid(), output);
  }

  // optional bool bIsBinded = 6;
  if (has_bisbinded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bisbinded(), output);
  }

  // optional bool bIsBindAccount = 7;
  if (has_bisbindaccount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bisbindaccount(), output);
  }

  // optional .AccountID stNewAccount = 8;
  if (has_stnewaccount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stnewaccount(), output);
  }

  // optional string strNewPassword = 9;
  if (has_strnewpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnewpassword().data(), this->strnewpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->strnewpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountDB_FetchAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .AccountID stAccountID = 2;
  if (has_staccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->staccountid(), target);
  }

  // optional uint32 uin = 4;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uin(), target);
  }

  // optional int32 iLastWorldID = 5;
  if (has_ilastworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ilastworldid(), target);
  }

  // optional bool bIsBinded = 6;
  if (has_bisbinded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bisbinded(), target);
  }

  // optional bool bIsBindAccount = 7;
  if (has_bisbindaccount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bisbindaccount(), target);
  }

  // optional .AccountID stNewAccount = 8;
  if (has_stnewaccount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->stnewaccount(), target);
  }

  // optional string strNewPassword = 9;
  if (has_strnewpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnewpassword().data(), this->strnewpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->strnewpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountDB_FetchAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .AccountID stAccountID = 2;
    if (has_staccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staccountid());
    }

    // optional uint32 uin = 4;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iLastWorldID = 5;
    if (has_ilastworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastworldid());
    }

    // optional bool bIsBinded = 6;
    if (has_bisbinded()) {
      total_size += 1 + 1;
    }

    // optional bool bIsBindAccount = 7;
    if (has_bisbindaccount()) {
      total_size += 1 + 1;
    }

    // optional .AccountID stNewAccount = 8;
    if (has_stnewaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stnewaccount());
    }

    // optional string strNewPassword = 9;
    if (has_strnewpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnewpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountDB_FetchAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountDB_FetchAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountDB_FetchAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountDB_FetchAccount_Response::MergeFrom(const AccountDB_FetchAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_staccountid()) {
      mutable_staccountid()->::AccountID::MergeFrom(from.staccountid());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ilastworldid()) {
      set_ilastworldid(from.ilastworldid());
    }
    if (from.has_bisbinded()) {
      set_bisbinded(from.bisbinded());
    }
    if (from.has_bisbindaccount()) {
      set_bisbindaccount(from.bisbindaccount());
    }
    if (from.has_stnewaccount()) {
      mutable_stnewaccount()->::AccountID::MergeFrom(from.stnewaccount());
    }
    if (from.has_strnewpassword()) {
      set_strnewpassword(from.strnewpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountDB_FetchAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDB_FetchAccount_Response::CopyFrom(const AccountDB_FetchAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDB_FetchAccount_Response::IsInitialized() const {

  return true;
}

void AccountDB_FetchAccount_Response::Swap(AccountDB_FetchAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(staccountid_, other->staccountid_);
    std::swap(uin_, other->uin_);
    std::swap(ilastworldid_, other->ilastworldid_);
    std::swap(bisbinded_, other->bisbinded_);
    std::swap(bisbindaccount_, other->bisbindaccount_);
    std::swap(stnewaccount_, other->stnewaccount_);
    std::swap(strnewpassword_, other->strnewpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountDB_FetchAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountDB_FetchAccount_Response_descriptor_;
  metadata.reflection = AccountDB_FetchAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountDB_UpdateAccount_Request::kStAccountIDFieldNumber;
const int AccountDB_UpdateAccount_Request::kStrPasswordFieldNumber;
const int AccountDB_UpdateAccount_Request::kILastWorldIDFieldNumber;
#endif  // !_MSC_VER

AccountDB_UpdateAccount_Request::AccountDB_UpdateAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountDB_UpdateAccount_Request::InitAsDefaultInstance() {
  staccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
}

AccountDB_UpdateAccount_Request::AccountDB_UpdateAccount_Request(const AccountDB_UpdateAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountDB_UpdateAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  staccountid_ = NULL;
  strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ilastworldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountDB_UpdateAccount_Request::~AccountDB_UpdateAccount_Request() {
  SharedDtor();
}

void AccountDB_UpdateAccount_Request::SharedDtor() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (this != default_instance_) {
    delete staccountid_;
  }
}

void AccountDB_UpdateAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountDB_UpdateAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountDB_UpdateAccount_Request_descriptor_;
}

const AccountDB_UpdateAccount_Request& AccountDB_UpdateAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

AccountDB_UpdateAccount_Request* AccountDB_UpdateAccount_Request::default_instance_ = NULL;

AccountDB_UpdateAccount_Request* AccountDB_UpdateAccount_Request::New() const {
  return new AccountDB_UpdateAccount_Request;
}

void AccountDB_UpdateAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_staccountid()) {
      if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
    }
    if (has_strpassword()) {
      if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
        strpassword_->clear();
      }
    }
    ilastworldid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountDB_UpdateAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountID stAccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strPassword;
        break;
      }

      // optional string strPassword = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpassword().data(), this->strpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iLastWorldID;
        break;
      }

      // optional int32 iLastWorldID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastworldid_)));
          set_has_ilastworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountDB_UpdateAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->staccountid(), output);
  }

  // optional string strPassword = 3;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strpassword(), output);
  }

  // optional int32 iLastWorldID = 4;
  if (has_ilastworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ilastworldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountDB_UpdateAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->staccountid(), target);
  }

  // optional string strPassword = 3;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strpassword(), target);
  }

  // optional int32 iLastWorldID = 4;
  if (has_ilastworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ilastworldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountDB_UpdateAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountID stAccountID = 1;
    if (has_staccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staccountid());
    }

    // optional string strPassword = 3;
    if (has_strpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpassword());
    }

    // optional int32 iLastWorldID = 4;
    if (has_ilastworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastworldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountDB_UpdateAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountDB_UpdateAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountDB_UpdateAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountDB_UpdateAccount_Request::MergeFrom(const AccountDB_UpdateAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_staccountid()) {
      mutable_staccountid()->::AccountID::MergeFrom(from.staccountid());
    }
    if (from.has_strpassword()) {
      set_strpassword(from.strpassword());
    }
    if (from.has_ilastworldid()) {
      set_ilastworldid(from.ilastworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountDB_UpdateAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDB_UpdateAccount_Request::CopyFrom(const AccountDB_UpdateAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDB_UpdateAccount_Request::IsInitialized() const {

  return true;
}

void AccountDB_UpdateAccount_Request::Swap(AccountDB_UpdateAccount_Request* other) {
  if (other != this) {
    std::swap(staccountid_, other->staccountid_);
    std::swap(strpassword_, other->strpassword_);
    std::swap(ilastworldid_, other->ilastworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountDB_UpdateAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountDB_UpdateAccount_Request_descriptor_;
  metadata.reflection = AccountDB_UpdateAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountDB_UpdateAccount_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

AccountDB_UpdateAccount_Response::AccountDB_UpdateAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountDB_UpdateAccount_Response::InitAsDefaultInstance() {
}

AccountDB_UpdateAccount_Response::AccountDB_UpdateAccount_Response(const AccountDB_UpdateAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountDB_UpdateAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountDB_UpdateAccount_Response::~AccountDB_UpdateAccount_Response() {
  SharedDtor();
}

void AccountDB_UpdateAccount_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountDB_UpdateAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountDB_UpdateAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountDB_UpdateAccount_Response_descriptor_;
}

const AccountDB_UpdateAccount_Response& AccountDB_UpdateAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

AccountDB_UpdateAccount_Response* AccountDB_UpdateAccount_Response::default_instance_ = NULL;

AccountDB_UpdateAccount_Response* AccountDB_UpdateAccount_Response::New() const {
  return new AccountDB_UpdateAccount_Response;
}

void AccountDB_UpdateAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountDB_UpdateAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountDB_UpdateAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountDB_UpdateAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountDB_UpdateAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountDB_UpdateAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountDB_UpdateAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountDB_UpdateAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountDB_UpdateAccount_Response::MergeFrom(const AccountDB_UpdateAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountDB_UpdateAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDB_UpdateAccount_Response::CopyFrom(const AccountDB_UpdateAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDB_UpdateAccount_Response::IsInitialized() const {

  return true;
}

void AccountDB_UpdateAccount_Response::Swap(AccountDB_UpdateAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountDB_UpdateAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountDB_UpdateAccount_Response_descriptor_;
  metadata.reflection = AccountDB_UpdateAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountDB_DeleteAccount_Request::kStAccountIDFieldNumber;
#endif  // !_MSC_VER

AccountDB_DeleteAccount_Request::AccountDB_DeleteAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountDB_DeleteAccount_Request::InitAsDefaultInstance() {
  staccountid_ = const_cast< ::AccountID*>(&::AccountID::default_instance());
}

AccountDB_DeleteAccount_Request::AccountDB_DeleteAccount_Request(const AccountDB_DeleteAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountDB_DeleteAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  staccountid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountDB_DeleteAccount_Request::~AccountDB_DeleteAccount_Request() {
  SharedDtor();
}

void AccountDB_DeleteAccount_Request::SharedDtor() {
  if (this != default_instance_) {
    delete staccountid_;
  }
}

void AccountDB_DeleteAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountDB_DeleteAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountDB_DeleteAccount_Request_descriptor_;
}

const AccountDB_DeleteAccount_Request& AccountDB_DeleteAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

AccountDB_DeleteAccount_Request* AccountDB_DeleteAccount_Request::default_instance_ = NULL;

AccountDB_DeleteAccount_Request* AccountDB_DeleteAccount_Request::New() const {
  return new AccountDB_DeleteAccount_Request;
}

void AccountDB_DeleteAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_staccountid()) {
      if (staccountid_ != NULL) staccountid_->::AccountID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountDB_DeleteAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountID stAccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staccountid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountDB_DeleteAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->staccountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountDB_DeleteAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountID stAccountID = 1;
  if (has_staccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->staccountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountDB_DeleteAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountID stAccountID = 1;
    if (has_staccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staccountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountDB_DeleteAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountDB_DeleteAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountDB_DeleteAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountDB_DeleteAccount_Request::MergeFrom(const AccountDB_DeleteAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_staccountid()) {
      mutable_staccountid()->::AccountID::MergeFrom(from.staccountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountDB_DeleteAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDB_DeleteAccount_Request::CopyFrom(const AccountDB_DeleteAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDB_DeleteAccount_Request::IsInitialized() const {

  return true;
}

void AccountDB_DeleteAccount_Request::Swap(AccountDB_DeleteAccount_Request* other) {
  if (other != this) {
    std::swap(staccountid_, other->staccountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountDB_DeleteAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountDB_DeleteAccount_Request_descriptor_;
  metadata.reflection = AccountDB_DeleteAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountDB_DeleteAccount_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

AccountDB_DeleteAccount_Response::AccountDB_DeleteAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountDB_DeleteAccount_Response::InitAsDefaultInstance() {
}

AccountDB_DeleteAccount_Response::AccountDB_DeleteAccount_Response(const AccountDB_DeleteAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountDB_DeleteAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountDB_DeleteAccount_Response::~AccountDB_DeleteAccount_Response() {
  SharedDtor();
}

void AccountDB_DeleteAccount_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountDB_DeleteAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountDB_DeleteAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountDB_DeleteAccount_Response_descriptor_;
}

const AccountDB_DeleteAccount_Response& AccountDB_DeleteAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eRegAuth_2eproto();
  return *default_instance_;
}

AccountDB_DeleteAccount_Response* AccountDB_DeleteAccount_Response::default_instance_ = NULL;

AccountDB_DeleteAccount_Response* AccountDB_DeleteAccount_Response::New() const {
  return new AccountDB_DeleteAccount_Response;
}

void AccountDB_DeleteAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountDB_DeleteAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountDB_DeleteAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountDB_DeleteAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountDB_DeleteAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountDB_DeleteAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountDB_DeleteAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountDB_DeleteAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountDB_DeleteAccount_Response::MergeFrom(const AccountDB_DeleteAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountDB_DeleteAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDB_DeleteAccount_Response::CopyFrom(const AccountDB_DeleteAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDB_DeleteAccount_Response::IsInitialized() const {

  return true;
}

void AccountDB_DeleteAccount_Response::Swap(AccountDB_DeleteAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountDB_DeleteAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountDB_DeleteAccount_Response_descriptor_;
  metadata.reflection = AccountDB_DeleteAccount_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
