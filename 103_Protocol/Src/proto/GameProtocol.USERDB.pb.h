// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.USERDB.proto

#ifndef PROTOBUF_GameProtocol_2eUSERDB_2eproto__INCLUDED
#define PROTOBUF_GameProtocol_2eUSERDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "GameProtocol.Common.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

class GameUserInfo;
class BASEDBINFO;
class QUESTDBINFO;
class OneSlotInfo;
class ItemSlotInfo;
class ITEMDBINFO;
class UnitItemInfo;
class OneFightUnitInfo;
class FightUnitRepInfo;
class FightForm;
class FIGHTDBINFO;
class FRIENDDBINFO;
class RESERVED1DBINFO;
class RESERVED2DBINFO;

// ===================================================================

class GameUserInfo : public ::google::protobuf::Message {
 public:
  GameUserInfo();
  virtual ~GameUserInfo();

  GameUserInfo(const GameUserInfo& from);

  inline GameUserInfo& operator=(const GameUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameUserInfo& default_instance();

  void Swap(GameUserInfo* other);

  // implements Message ----------------------------------------------

  GameUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameUserInfo& from);
  void MergeFrom(const GameUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional uint32 uiSeq = 2;
  inline bool has_uiseq() const;
  inline void clear_uiseq();
  static const int kUiSeqFieldNumber = 2;
  inline ::google::protobuf::uint32 uiseq() const;
  inline void set_uiseq(::google::protobuf::uint32 value);

  // optional bytes strBaseInfo = 3;
  inline bool has_strbaseinfo() const;
  inline void clear_strbaseinfo();
  static const int kStrBaseInfoFieldNumber = 3;
  inline const ::std::string& strbaseinfo() const;
  inline void set_strbaseinfo(const ::std::string& value);
  inline void set_strbaseinfo(const char* value);
  inline void set_strbaseinfo(const void* value, size_t size);
  inline ::std::string* mutable_strbaseinfo();
  inline ::std::string* release_strbaseinfo();
  inline void set_allocated_strbaseinfo(::std::string* strbaseinfo);

  // optional bytes strQuestInfo = 4;
  inline bool has_strquestinfo() const;
  inline void clear_strquestinfo();
  static const int kStrQuestInfoFieldNumber = 4;
  inline const ::std::string& strquestinfo() const;
  inline void set_strquestinfo(const ::std::string& value);
  inline void set_strquestinfo(const char* value);
  inline void set_strquestinfo(const void* value, size_t size);
  inline ::std::string* mutable_strquestinfo();
  inline ::std::string* release_strquestinfo();
  inline void set_allocated_strquestinfo(::std::string* strquestinfo);

  // optional bytes strItemInfo = 5;
  inline bool has_striteminfo() const;
  inline void clear_striteminfo();
  static const int kStrItemInfoFieldNumber = 5;
  inline const ::std::string& striteminfo() const;
  inline void set_striteminfo(const ::std::string& value);
  inline void set_striteminfo(const char* value);
  inline void set_striteminfo(const void* value, size_t size);
  inline ::std::string* mutable_striteminfo();
  inline ::std::string* release_striteminfo();
  inline void set_allocated_striteminfo(::std::string* striteminfo);

  // optional bytes strFightInfo = 7;
  inline bool has_strfightinfo() const;
  inline void clear_strfightinfo();
  static const int kStrFightInfoFieldNumber = 7;
  inline const ::std::string& strfightinfo() const;
  inline void set_strfightinfo(const ::std::string& value);
  inline void set_strfightinfo(const char* value);
  inline void set_strfightinfo(const void* value, size_t size);
  inline ::std::string* mutable_strfightinfo();
  inline ::std::string* release_strfightinfo();
  inline void set_allocated_strfightinfo(::std::string* strfightinfo);

  // optional bytes strFriendInfo = 8;
  inline bool has_strfriendinfo() const;
  inline void clear_strfriendinfo();
  static const int kStrFriendInfoFieldNumber = 8;
  inline const ::std::string& strfriendinfo() const;
  inline void set_strfriendinfo(const ::std::string& value);
  inline void set_strfriendinfo(const char* value);
  inline void set_strfriendinfo(const void* value, size_t size);
  inline ::std::string* mutable_strfriendinfo();
  inline ::std::string* release_strfriendinfo();
  inline void set_allocated_strfriendinfo(::std::string* strfriendinfo);

  // optional bytes strReserved1 = 9;
  inline bool has_strreserved1() const;
  inline void clear_strreserved1();
  static const int kStrReserved1FieldNumber = 9;
  inline const ::std::string& strreserved1() const;
  inline void set_strreserved1(const ::std::string& value);
  inline void set_strreserved1(const char* value);
  inline void set_strreserved1(const void* value, size_t size);
  inline ::std::string* mutable_strreserved1();
  inline ::std::string* release_strreserved1();
  inline void set_allocated_strreserved1(::std::string* strreserved1);

  // optional bytes strReserved2 = 10;
  inline bool has_strreserved2() const;
  inline void clear_strreserved2();
  static const int kStrReserved2FieldNumber = 10;
  inline const ::std::string& strreserved2() const;
  inline void set_strreserved2(const ::std::string& value);
  inline void set_strreserved2(const char* value);
  inline void set_strreserved2(const void* value, size_t size);
  inline ::std::string* mutable_strreserved2();
  inline ::std::string* release_strreserved2();
  inline void set_allocated_strreserved2(::std::string* strreserved2);

  // @@protoc_insertion_point(class_scope:GameUserInfo)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_uiseq();
  inline void clear_has_uiseq();
  inline void set_has_strbaseinfo();
  inline void clear_has_strbaseinfo();
  inline void set_has_strquestinfo();
  inline void clear_has_strquestinfo();
  inline void set_has_striteminfo();
  inline void clear_has_striteminfo();
  inline void set_has_strfightinfo();
  inline void clear_has_strfightinfo();
  inline void set_has_strfriendinfo();
  inline void clear_has_strfriendinfo();
  inline void set_has_strreserved1();
  inline void clear_has_strreserved1();
  inline void set_has_strreserved2();
  inline void clear_has_strreserved2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uin_;
  ::google::protobuf::uint32 uiseq_;
  ::std::string* strbaseinfo_;
  ::std::string* strquestinfo_;
  ::std::string* striteminfo_;
  ::std::string* strfightinfo_;
  ::std::string* strfriendinfo_;
  ::std::string* strreserved1_;
  ::std::string* strreserved2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static GameUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class BASEDBINFO : public ::google::protobuf::Message {
 public:
  BASEDBINFO();
  virtual ~BASEDBINFO();

  BASEDBINFO(const BASEDBINFO& from);

  inline BASEDBINFO& operator=(const BASEDBINFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BASEDBINFO& default_instance();

  void Swap(BASEDBINFO* other);

  // implements Message ----------------------------------------------

  BASEDBINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BASEDBINFO& from);
  void MergeFrom(const BASEDBINFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string szNickName = 1;
  inline bool has_sznickname() const;
  inline void clear_sznickname();
  static const int kSzNickNameFieldNumber = 1;
  inline const ::std::string& sznickname() const;
  inline void set_sznickname(const ::std::string& value);
  inline void set_sznickname(const char* value);
  inline void set_sznickname(const char* value, size_t size);
  inline ::std::string* mutable_sznickname();
  inline ::std::string* release_sznickname();
  inline void set_allocated_sznickname(::std::string* sznickname);

  // repeated int32 iResources = 3;
  inline int iresources_size() const;
  inline void clear_iresources();
  static const int kIResourcesFieldNumber = 3;
  inline ::google::protobuf::int32 iresources(int index) const;
  inline void set_iresources(int index, ::google::protobuf::int32 value);
  inline void add_iresources(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      iresources() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_iresources();

  // optional uint32 uStatus = 9;
  inline bool has_ustatus() const;
  inline void clear_ustatus();
  static const int kUStatusFieldNumber = 9;
  inline ::google::protobuf::uint32 ustatus() const;
  inline void set_ustatus(::google::protobuf::uint32 value);

  // optional int32 iLastLogin = 11;
  inline bool has_ilastlogin() const;
  inline void clear_ilastlogin();
  static const int kILastLoginFieldNumber = 11;
  inline ::google::protobuf::int32 ilastlogin() const;
  inline void set_ilastlogin(::google::protobuf::int32 value);

  // optional int32 iLastLogout = 12;
  inline bool has_ilastlogout() const;
  inline void clear_ilastlogout();
  static const int kILastLogoutFieldNumber = 12;
  inline ::google::protobuf::int32 ilastlogout() const;
  inline void set_ilastlogout(::google::protobuf::int32 value);

  // optional int32 iCreateTime = 13;
  inline bool has_icreatetime() const;
  inline void clear_icreatetime();
  static const int kICreateTimeFieldNumber = 13;
  inline ::google::protobuf::int32 icreatetime() const;
  inline void set_icreatetime(::google::protobuf::int32 value);

  // optional int32 iOnlineTime = 14;
  inline bool has_ionlinetime() const;
  inline void clear_ionlinetime();
  static const int kIOnlineTimeFieldNumber = 14;
  inline ::google::protobuf::int32 ionlinetime() const;
  inline void set_ionlinetime(::google::protobuf::int32 value);

  // optional int32 iLoginCount = 15;
  inline bool has_ilogincount() const;
  inline void clear_ilogincount();
  static const int kILoginCountFieldNumber = 15;
  inline ::google::protobuf::int32 ilogincount() const;
  inline void set_ilogincount(::google::protobuf::int32 value);

  // optional int32 iForbidTalkingTime = 16;
  inline bool has_iforbidtalkingtime() const;
  inline void clear_iforbidtalkingtime();
  static const int kIForbidTalkingTimeFieldNumber = 16;
  inline ::google::protobuf::int32 iforbidtalkingtime() const;
  inline void set_iforbidtalkingtime(::google::protobuf::int32 value);

  // optional int32 iLoginTime = 17;
  inline bool has_ilogintime() const;
  inline void clear_ilogintime();
  static const int kILoginTimeFieldNumber = 17;
  inline ::google::protobuf::int32 ilogintime() const;
  inline void set_ilogintime(::google::protobuf::int32 value);

  // optional int32 iLogoutTime = 18;
  inline bool has_ilogouttime() const;
  inline void clear_ilogouttime();
  static const int kILogoutTimeFieldNumber = 18;
  inline ::google::protobuf::int32 ilogouttime() const;
  inline void set_ilogouttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BASEDBINFO)
 private:
  inline void set_has_sznickname();
  inline void clear_has_sznickname();
  inline void set_has_ustatus();
  inline void clear_has_ustatus();
  inline void set_has_ilastlogin();
  inline void clear_has_ilastlogin();
  inline void set_has_ilastlogout();
  inline void clear_has_ilastlogout();
  inline void set_has_icreatetime();
  inline void clear_has_icreatetime();
  inline void set_has_ionlinetime();
  inline void clear_has_ionlinetime();
  inline void set_has_ilogincount();
  inline void clear_has_ilogincount();
  inline void set_has_iforbidtalkingtime();
  inline void clear_has_iforbidtalkingtime();
  inline void set_has_ilogintime();
  inline void clear_has_ilogintime();
  inline void set_has_ilogouttime();
  inline void clear_has_ilogouttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sznickname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > iresources_;
  ::google::protobuf::uint32 ustatus_;
  ::google::protobuf::int32 ilastlogin_;
  ::google::protobuf::int32 ilastlogout_;
  ::google::protobuf::int32 icreatetime_;
  ::google::protobuf::int32 ionlinetime_;
  ::google::protobuf::int32 ilogincount_;
  ::google::protobuf::int32 iforbidtalkingtime_;
  ::google::protobuf::int32 ilogintime_;
  ::google::protobuf::int32 ilogouttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static BASEDBINFO* default_instance_;
};
// -------------------------------------------------------------------

class QUESTDBINFO : public ::google::protobuf::Message {
 public:
  QUESTDBINFO();
  virtual ~QUESTDBINFO();

  QUESTDBINFO(const QUESTDBINFO& from);

  inline QUESTDBINFO& operator=(const QUESTDBINFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QUESTDBINFO& default_instance();

  void Swap(QUESTDBINFO* other);

  // implements Message ----------------------------------------------

  QUESTDBINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QUESTDBINFO& from);
  void MergeFrom(const QUESTDBINFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:QUESTDBINFO)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static QUESTDBINFO* default_instance_;
};
// -------------------------------------------------------------------

class OneSlotInfo : public ::google::protobuf::Message {
 public:
  OneSlotInfo();
  virtual ~OneSlotInfo();

  OneSlotInfo(const OneSlotInfo& from);

  inline OneSlotInfo& operator=(const OneSlotInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneSlotInfo& default_instance();

  void Swap(OneSlotInfo* other);

  // implements Message ----------------------------------------------

  OneSlotInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneSlotInfo& from);
  void MergeFrom(const OneSlotInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iItemID = 1;
  inline bool has_iitemid() const;
  inline void clear_iitemid();
  static const int kIItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 iitemid() const;
  inline void set_iitemid(::google::protobuf::int32 value);

  // optional int32 iItemNum = 2;
  inline bool has_iitemnum() const;
  inline void clear_iitemnum();
  static const int kIItemNumFieldNumber = 2;
  inline ::google::protobuf::int32 iitemnum() const;
  inline void set_iitemnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneSlotInfo)
 private:
  inline void set_has_iitemid();
  inline void clear_has_iitemid();
  inline void set_has_iitemnum();
  inline void clear_has_iitemnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iitemid_;
  ::google::protobuf::int32 iitemnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static OneSlotInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemSlotInfo : public ::google::protobuf::Message {
 public:
  ItemSlotInfo();
  virtual ~ItemSlotInfo();

  ItemSlotInfo(const ItemSlotInfo& from);

  inline ItemSlotInfo& operator=(const ItemSlotInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemSlotInfo& default_instance();

  void Swap(ItemSlotInfo* other);

  // implements Message ----------------------------------------------

  ItemSlotInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemSlotInfo& from);
  void MergeFrom(const ItemSlotInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OneSlotInfo stSlots = 1;
  inline int stslots_size() const;
  inline void clear_stslots();
  static const int kStSlotsFieldNumber = 1;
  inline const ::OneSlotInfo& stslots(int index) const;
  inline ::OneSlotInfo* mutable_stslots(int index);
  inline ::OneSlotInfo* add_stslots();
  inline const ::google::protobuf::RepeatedPtrField< ::OneSlotInfo >&
      stslots() const;
  inline ::google::protobuf::RepeatedPtrField< ::OneSlotInfo >*
      mutable_stslots();

  // @@protoc_insertion_point(class_scope:ItemSlotInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::OneSlotInfo > stslots_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static ItemSlotInfo* default_instance_;
};
// -------------------------------------------------------------------

class ITEMDBINFO : public ::google::protobuf::Message {
 public:
  ITEMDBINFO();
  virtual ~ITEMDBINFO();

  ITEMDBINFO(const ITEMDBINFO& from);

  inline ITEMDBINFO& operator=(const ITEMDBINFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ITEMDBINFO& default_instance();

  void Swap(ITEMDBINFO* other);

  // implements Message ----------------------------------------------

  ITEMDBINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ITEMDBINFO& from);
  void MergeFrom(const ITEMDBINFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_iOpenedSlotNum = 1;
  inline bool has_m_iopenedslotnum() const;
  inline void clear_m_iopenedslotnum();
  static const int kMIOpenedSlotNumFieldNumber = 1;
  inline ::google::protobuf::int32 m_iopenedslotnum() const;
  inline void set_m_iopenedslotnum(::google::protobuf::int32 value);

  // optional .ItemSlotInfo stItemSlot = 2;
  inline bool has_stitemslot() const;
  inline void clear_stitemslot();
  static const int kStItemSlotFieldNumber = 2;
  inline const ::ItemSlotInfo& stitemslot() const;
  inline ::ItemSlotInfo* mutable_stitemslot();
  inline ::ItemSlotInfo* release_stitemslot();
  inline void set_allocated_stitemslot(::ItemSlotInfo* stitemslot);

  // @@protoc_insertion_point(class_scope:ITEMDBINFO)
 private:
  inline void set_has_m_iopenedslotnum();
  inline void clear_has_m_iopenedslotnum();
  inline void set_has_stitemslot();
  inline void clear_has_stitemslot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ItemSlotInfo* stitemslot_;
  ::google::protobuf::int32 m_iopenedslotnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static ITEMDBINFO* default_instance_;
};
// -------------------------------------------------------------------

class UnitItemInfo : public ::google::protobuf::Message {
 public:
  UnitItemInfo();
  virtual ~UnitItemInfo();

  UnitItemInfo(const UnitItemInfo& from);

  inline UnitItemInfo& operator=(const UnitItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitItemInfo& default_instance();

  void Swap(UnitItemInfo* other);

  // implements Message ----------------------------------------------

  UnitItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitItemInfo& from);
  void MergeFrom(const UnitItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OneSlotInfo stItems = 1;
  inline int stitems_size() const;
  inline void clear_stitems();
  static const int kStItemsFieldNumber = 1;
  inline const ::OneSlotInfo& stitems(int index) const;
  inline ::OneSlotInfo* mutable_stitems(int index);
  inline ::OneSlotInfo* add_stitems();
  inline const ::google::protobuf::RepeatedPtrField< ::OneSlotInfo >&
      stitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::OneSlotInfo >*
      mutable_stitems();

  // @@protoc_insertion_point(class_scope:UnitItemInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::OneSlotInfo > stitems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static UnitItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class OneFightUnitInfo : public ::google::protobuf::Message {
 public:
  OneFightUnitInfo();
  virtual ~OneFightUnitInfo();

  OneFightUnitInfo(const OneFightUnitInfo& from);

  inline OneFightUnitInfo& operator=(const OneFightUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneFightUnitInfo& default_instance();

  void Swap(OneFightUnitInfo* other);

  // implements Message ----------------------------------------------

  OneFightUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneFightUnitInfo& from);
  void MergeFrom(const OneFightUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iUnitID = 1;
  inline bool has_iunitid() const;
  inline void clear_iunitid();
  static const int kIUnitIDFieldNumber = 1;
  inline ::google::protobuf::int32 iunitid() const;
  inline void set_iunitid(::google::protobuf::int32 value);

  // optional int32 iUnitAIID = 2;
  inline bool has_iunitaiid() const;
  inline void clear_iunitaiid();
  static const int kIUnitAIIDFieldNumber = 2;
  inline ::google::protobuf::int32 iunitaiid() const;
  inline void set_iunitaiid(::google::protobuf::int32 value);

  // repeated int32 iAttributes = 3;
  inline int iattributes_size() const;
  inline void clear_iattributes();
  static const int kIAttributesFieldNumber = 3;
  inline ::google::protobuf::int32 iattributes(int index) const;
  inline void set_iattributes(int index, ::google::protobuf::int32 value);
  inline void add_iattributes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      iattributes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_iattributes();

  // optional int32 iNormalSkillID = 4;
  inline bool has_inormalskillid() const;
  inline void clear_inormalskillid();
  static const int kINormalSkillIDFieldNumber = 4;
  inline ::google::protobuf::int32 inormalskillid() const;
  inline void set_inormalskillid(::google::protobuf::int32 value);

  // optional int32 iLevel = 5;
  inline bool has_ilevel() const;
  inline void clear_ilevel();
  static const int kILevelFieldNumber = 5;
  inline ::google::protobuf::int32 ilevel() const;
  inline void set_ilevel(::google::protobuf::int32 value);

  // optional int32 iLevelExp = 6;
  inline bool has_ilevelexp() const;
  inline void clear_ilevelexp();
  static const int kILevelExpFieldNumber = 6;
  inline ::google::protobuf::int32 ilevelexp() const;
  inline void set_ilevelexp(::google::protobuf::int32 value);

  // optional .UnitItemInfo stItemInfo = 7;
  inline bool has_stiteminfo() const;
  inline void clear_stiteminfo();
  static const int kStItemInfoFieldNumber = 7;
  inline const ::UnitItemInfo& stiteminfo() const;
  inline ::UnitItemInfo* mutable_stiteminfo();
  inline ::UnitItemInfo* release_stiteminfo();
  inline void set_allocated_stiteminfo(::UnitItemInfo* stiteminfo);

  // @@protoc_insertion_point(class_scope:OneFightUnitInfo)
 private:
  inline void set_has_iunitid();
  inline void clear_has_iunitid();
  inline void set_has_iunitaiid();
  inline void clear_has_iunitaiid();
  inline void set_has_inormalskillid();
  inline void clear_has_inormalskillid();
  inline void set_has_ilevel();
  inline void clear_has_ilevel();
  inline void set_has_ilevelexp();
  inline void clear_has_ilevelexp();
  inline void set_has_stiteminfo();
  inline void clear_has_stiteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iunitid_;
  ::google::protobuf::int32 iunitaiid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > iattributes_;
  ::google::protobuf::int32 inormalskillid_;
  ::google::protobuf::int32 ilevel_;
  ::UnitItemInfo* stiteminfo_;
  ::google::protobuf::int32 ilevelexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static OneFightUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class FightUnitRepInfo : public ::google::protobuf::Message {
 public:
  FightUnitRepInfo();
  virtual ~FightUnitRepInfo();

  FightUnitRepInfo(const FightUnitRepInfo& from);

  inline FightUnitRepInfo& operator=(const FightUnitRepInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightUnitRepInfo& default_instance();

  void Swap(FightUnitRepInfo* other);

  // implements Message ----------------------------------------------

  FightUnitRepInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightUnitRepInfo& from);
  void MergeFrom(const FightUnitRepInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OneFightUnitInfo stUnits = 1;
  inline int stunits_size() const;
  inline void clear_stunits();
  static const int kStUnitsFieldNumber = 1;
  inline const ::OneFightUnitInfo& stunits(int index) const;
  inline ::OneFightUnitInfo* mutable_stunits(int index);
  inline ::OneFightUnitInfo* add_stunits();
  inline const ::google::protobuf::RepeatedPtrField< ::OneFightUnitInfo >&
      stunits() const;
  inline ::google::protobuf::RepeatedPtrField< ::OneFightUnitInfo >*
      mutable_stunits();

  // @@protoc_insertion_point(class_scope:FightUnitRepInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::OneFightUnitInfo > stunits_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static FightUnitRepInfo* default_instance_;
};
// -------------------------------------------------------------------

class FightForm : public ::google::protobuf::Message {
 public:
  FightForm();
  virtual ~FightForm();

  FightForm(const FightForm& from);

  inline FightForm& operator=(const FightForm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightForm& default_instance();

  void Swap(FightForm* other);

  // implements Message ----------------------------------------------

  FightForm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightForm& from);
  void MergeFrom(const FightForm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 iFightUnitIDs = 1;
  inline int ifightunitids_size() const;
  inline void clear_ifightunitids();
  static const int kIFightUnitIDsFieldNumber = 1;
  inline ::google::protobuf::int32 ifightunitids(int index) const;
  inline void set_ifightunitids(int index, ::google::protobuf::int32 value);
  inline void add_ifightunitids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ifightunitids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ifightunitids();

  // @@protoc_insertion_point(class_scope:FightForm)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ifightunitids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static FightForm* default_instance_;
};
// -------------------------------------------------------------------

class FIGHTDBINFO : public ::google::protobuf::Message {
 public:
  FIGHTDBINFO();
  virtual ~FIGHTDBINFO();

  FIGHTDBINFO(const FIGHTDBINFO& from);

  inline FIGHTDBINFO& operator=(const FIGHTDBINFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FIGHTDBINFO& default_instance();

  void Swap(FIGHTDBINFO* other);

  // implements Message ----------------------------------------------

  FIGHTDBINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FIGHTDBINFO& from);
  void MergeFrom(const FIGHTDBINFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FightUnitRepInfo stUnitRep = 1;
  inline bool has_stunitrep() const;
  inline void clear_stunitrep();
  static const int kStUnitRepFieldNumber = 1;
  inline const ::FightUnitRepInfo& stunitrep() const;
  inline ::FightUnitRepInfo* mutable_stunitrep();
  inline ::FightUnitRepInfo* release_stunitrep();
  inline void set_allocated_stunitrep(::FightUnitRepInfo* stunitrep);

  // optional .FightForm stForms = 2;
  inline bool has_stforms() const;
  inline void clear_stforms();
  static const int kStFormsFieldNumber = 2;
  inline const ::FightForm& stforms() const;
  inline ::FightForm* mutable_stforms();
  inline ::FightForm* release_stforms();
  inline void set_allocated_stforms(::FightForm* stforms);

  // @@protoc_insertion_point(class_scope:FIGHTDBINFO)
 private:
  inline void set_has_stunitrep();
  inline void clear_has_stunitrep();
  inline void set_has_stforms();
  inline void clear_has_stforms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FightUnitRepInfo* stunitrep_;
  ::FightForm* stforms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static FIGHTDBINFO* default_instance_;
};
// -------------------------------------------------------------------

class FRIENDDBINFO : public ::google::protobuf::Message {
 public:
  FRIENDDBINFO();
  virtual ~FRIENDDBINFO();

  FRIENDDBINFO(const FRIENDDBINFO& from);

  inline FRIENDDBINFO& operator=(const FRIENDDBINFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FRIENDDBINFO& default_instance();

  void Swap(FRIENDDBINFO* other);

  // implements Message ----------------------------------------------

  FRIENDDBINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FRIENDDBINFO& from);
  void MergeFrom(const FRIENDDBINFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FRIENDDBINFO)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static FRIENDDBINFO* default_instance_;
};
// -------------------------------------------------------------------

class RESERVED1DBINFO : public ::google::protobuf::Message {
 public:
  RESERVED1DBINFO();
  virtual ~RESERVED1DBINFO();

  RESERVED1DBINFO(const RESERVED1DBINFO& from);

  inline RESERVED1DBINFO& operator=(const RESERVED1DBINFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RESERVED1DBINFO& default_instance();

  void Swap(RESERVED1DBINFO* other);

  // implements Message ----------------------------------------------

  RESERVED1DBINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RESERVED1DBINFO& from);
  void MergeFrom(const RESERVED1DBINFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:RESERVED1DBINFO)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static RESERVED1DBINFO* default_instance_;
};
// -------------------------------------------------------------------

class RESERVED2DBINFO : public ::google::protobuf::Message {
 public:
  RESERVED2DBINFO();
  virtual ~RESERVED2DBINFO();

  RESERVED2DBINFO(const RESERVED2DBINFO& from);

  inline RESERVED2DBINFO& operator=(const RESERVED2DBINFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RESERVED2DBINFO& default_instance();

  void Swap(RESERVED2DBINFO* other);

  // implements Message ----------------------------------------------

  RESERVED2DBINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RESERVED2DBINFO& from);
  void MergeFrom(const RESERVED2DBINFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:RESERVED2DBINFO)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto();

  void InitAsDefaultInstance();
  static RESERVED2DBINFO* default_instance_;
};
// ===================================================================


// ===================================================================

// GameUserInfo

// optional uint32 uin = 1;
inline bool GameUserInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameUserInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameUserInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameUserInfo::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 GameUserInfo::uin() const {
  return uin_;
}
inline void GameUserInfo::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// optional uint32 uiSeq = 2;
inline bool GameUserInfo::has_uiseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameUserInfo::set_has_uiseq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameUserInfo::clear_has_uiseq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameUserInfo::clear_uiseq() {
  uiseq_ = 0u;
  clear_has_uiseq();
}
inline ::google::protobuf::uint32 GameUserInfo::uiseq() const {
  return uiseq_;
}
inline void GameUserInfo::set_uiseq(::google::protobuf::uint32 value) {
  set_has_uiseq();
  uiseq_ = value;
}

// optional bytes strBaseInfo = 3;
inline bool GameUserInfo::has_strbaseinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameUserInfo::set_has_strbaseinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameUserInfo::clear_has_strbaseinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameUserInfo::clear_strbaseinfo() {
  if (strbaseinfo_ != &::google::protobuf::internal::kEmptyString) {
    strbaseinfo_->clear();
  }
  clear_has_strbaseinfo();
}
inline const ::std::string& GameUserInfo::strbaseinfo() const {
  return *strbaseinfo_;
}
inline void GameUserInfo::set_strbaseinfo(const ::std::string& value) {
  set_has_strbaseinfo();
  if (strbaseinfo_ == &::google::protobuf::internal::kEmptyString) {
    strbaseinfo_ = new ::std::string;
  }
  strbaseinfo_->assign(value);
}
inline void GameUserInfo::set_strbaseinfo(const char* value) {
  set_has_strbaseinfo();
  if (strbaseinfo_ == &::google::protobuf::internal::kEmptyString) {
    strbaseinfo_ = new ::std::string;
  }
  strbaseinfo_->assign(value);
}
inline void GameUserInfo::set_strbaseinfo(const void* value, size_t size) {
  set_has_strbaseinfo();
  if (strbaseinfo_ == &::google::protobuf::internal::kEmptyString) {
    strbaseinfo_ = new ::std::string;
  }
  strbaseinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_strbaseinfo() {
  set_has_strbaseinfo();
  if (strbaseinfo_ == &::google::protobuf::internal::kEmptyString) {
    strbaseinfo_ = new ::std::string;
  }
  return strbaseinfo_;
}
inline ::std::string* GameUserInfo::release_strbaseinfo() {
  clear_has_strbaseinfo();
  if (strbaseinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strbaseinfo_;
    strbaseinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_strbaseinfo(::std::string* strbaseinfo) {
  if (strbaseinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strbaseinfo_;
  }
  if (strbaseinfo) {
    set_has_strbaseinfo();
    strbaseinfo_ = strbaseinfo;
  } else {
    clear_has_strbaseinfo();
    strbaseinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strQuestInfo = 4;
inline bool GameUserInfo::has_strquestinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameUserInfo::set_has_strquestinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameUserInfo::clear_has_strquestinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameUserInfo::clear_strquestinfo() {
  if (strquestinfo_ != &::google::protobuf::internal::kEmptyString) {
    strquestinfo_->clear();
  }
  clear_has_strquestinfo();
}
inline const ::std::string& GameUserInfo::strquestinfo() const {
  return *strquestinfo_;
}
inline void GameUserInfo::set_strquestinfo(const ::std::string& value) {
  set_has_strquestinfo();
  if (strquestinfo_ == &::google::protobuf::internal::kEmptyString) {
    strquestinfo_ = new ::std::string;
  }
  strquestinfo_->assign(value);
}
inline void GameUserInfo::set_strquestinfo(const char* value) {
  set_has_strquestinfo();
  if (strquestinfo_ == &::google::protobuf::internal::kEmptyString) {
    strquestinfo_ = new ::std::string;
  }
  strquestinfo_->assign(value);
}
inline void GameUserInfo::set_strquestinfo(const void* value, size_t size) {
  set_has_strquestinfo();
  if (strquestinfo_ == &::google::protobuf::internal::kEmptyString) {
    strquestinfo_ = new ::std::string;
  }
  strquestinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_strquestinfo() {
  set_has_strquestinfo();
  if (strquestinfo_ == &::google::protobuf::internal::kEmptyString) {
    strquestinfo_ = new ::std::string;
  }
  return strquestinfo_;
}
inline ::std::string* GameUserInfo::release_strquestinfo() {
  clear_has_strquestinfo();
  if (strquestinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strquestinfo_;
    strquestinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_strquestinfo(::std::string* strquestinfo) {
  if (strquestinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strquestinfo_;
  }
  if (strquestinfo) {
    set_has_strquestinfo();
    strquestinfo_ = strquestinfo;
  } else {
    clear_has_strquestinfo();
    strquestinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strItemInfo = 5;
inline bool GameUserInfo::has_striteminfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameUserInfo::set_has_striteminfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameUserInfo::clear_has_striteminfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameUserInfo::clear_striteminfo() {
  if (striteminfo_ != &::google::protobuf::internal::kEmptyString) {
    striteminfo_->clear();
  }
  clear_has_striteminfo();
}
inline const ::std::string& GameUserInfo::striteminfo() const {
  return *striteminfo_;
}
inline void GameUserInfo::set_striteminfo(const ::std::string& value) {
  set_has_striteminfo();
  if (striteminfo_ == &::google::protobuf::internal::kEmptyString) {
    striteminfo_ = new ::std::string;
  }
  striteminfo_->assign(value);
}
inline void GameUserInfo::set_striteminfo(const char* value) {
  set_has_striteminfo();
  if (striteminfo_ == &::google::protobuf::internal::kEmptyString) {
    striteminfo_ = new ::std::string;
  }
  striteminfo_->assign(value);
}
inline void GameUserInfo::set_striteminfo(const void* value, size_t size) {
  set_has_striteminfo();
  if (striteminfo_ == &::google::protobuf::internal::kEmptyString) {
    striteminfo_ = new ::std::string;
  }
  striteminfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_striteminfo() {
  set_has_striteminfo();
  if (striteminfo_ == &::google::protobuf::internal::kEmptyString) {
    striteminfo_ = new ::std::string;
  }
  return striteminfo_;
}
inline ::std::string* GameUserInfo::release_striteminfo() {
  clear_has_striteminfo();
  if (striteminfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = striteminfo_;
    striteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_striteminfo(::std::string* striteminfo) {
  if (striteminfo_ != &::google::protobuf::internal::kEmptyString) {
    delete striteminfo_;
  }
  if (striteminfo) {
    set_has_striteminfo();
    striteminfo_ = striteminfo;
  } else {
    clear_has_striteminfo();
    striteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strFightInfo = 7;
inline bool GameUserInfo::has_strfightinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameUserInfo::set_has_strfightinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameUserInfo::clear_has_strfightinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameUserInfo::clear_strfightinfo() {
  if (strfightinfo_ != &::google::protobuf::internal::kEmptyString) {
    strfightinfo_->clear();
  }
  clear_has_strfightinfo();
}
inline const ::std::string& GameUserInfo::strfightinfo() const {
  return *strfightinfo_;
}
inline void GameUserInfo::set_strfightinfo(const ::std::string& value) {
  set_has_strfightinfo();
  if (strfightinfo_ == &::google::protobuf::internal::kEmptyString) {
    strfightinfo_ = new ::std::string;
  }
  strfightinfo_->assign(value);
}
inline void GameUserInfo::set_strfightinfo(const char* value) {
  set_has_strfightinfo();
  if (strfightinfo_ == &::google::protobuf::internal::kEmptyString) {
    strfightinfo_ = new ::std::string;
  }
  strfightinfo_->assign(value);
}
inline void GameUserInfo::set_strfightinfo(const void* value, size_t size) {
  set_has_strfightinfo();
  if (strfightinfo_ == &::google::protobuf::internal::kEmptyString) {
    strfightinfo_ = new ::std::string;
  }
  strfightinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_strfightinfo() {
  set_has_strfightinfo();
  if (strfightinfo_ == &::google::protobuf::internal::kEmptyString) {
    strfightinfo_ = new ::std::string;
  }
  return strfightinfo_;
}
inline ::std::string* GameUserInfo::release_strfightinfo() {
  clear_has_strfightinfo();
  if (strfightinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strfightinfo_;
    strfightinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_strfightinfo(::std::string* strfightinfo) {
  if (strfightinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strfightinfo_;
  }
  if (strfightinfo) {
    set_has_strfightinfo();
    strfightinfo_ = strfightinfo;
  } else {
    clear_has_strfightinfo();
    strfightinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strFriendInfo = 8;
inline bool GameUserInfo::has_strfriendinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameUserInfo::set_has_strfriendinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameUserInfo::clear_has_strfriendinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameUserInfo::clear_strfriendinfo() {
  if (strfriendinfo_ != &::google::protobuf::internal::kEmptyString) {
    strfriendinfo_->clear();
  }
  clear_has_strfriendinfo();
}
inline const ::std::string& GameUserInfo::strfriendinfo() const {
  return *strfriendinfo_;
}
inline void GameUserInfo::set_strfriendinfo(const ::std::string& value) {
  set_has_strfriendinfo();
  if (strfriendinfo_ == &::google::protobuf::internal::kEmptyString) {
    strfriendinfo_ = new ::std::string;
  }
  strfriendinfo_->assign(value);
}
inline void GameUserInfo::set_strfriendinfo(const char* value) {
  set_has_strfriendinfo();
  if (strfriendinfo_ == &::google::protobuf::internal::kEmptyString) {
    strfriendinfo_ = new ::std::string;
  }
  strfriendinfo_->assign(value);
}
inline void GameUserInfo::set_strfriendinfo(const void* value, size_t size) {
  set_has_strfriendinfo();
  if (strfriendinfo_ == &::google::protobuf::internal::kEmptyString) {
    strfriendinfo_ = new ::std::string;
  }
  strfriendinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_strfriendinfo() {
  set_has_strfriendinfo();
  if (strfriendinfo_ == &::google::protobuf::internal::kEmptyString) {
    strfriendinfo_ = new ::std::string;
  }
  return strfriendinfo_;
}
inline ::std::string* GameUserInfo::release_strfriendinfo() {
  clear_has_strfriendinfo();
  if (strfriendinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strfriendinfo_;
    strfriendinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_strfriendinfo(::std::string* strfriendinfo) {
  if (strfriendinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strfriendinfo_;
  }
  if (strfriendinfo) {
    set_has_strfriendinfo();
    strfriendinfo_ = strfriendinfo;
  } else {
    clear_has_strfriendinfo();
    strfriendinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strReserved1 = 9;
inline bool GameUserInfo::has_strreserved1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameUserInfo::set_has_strreserved1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameUserInfo::clear_has_strreserved1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameUserInfo::clear_strreserved1() {
  if (strreserved1_ != &::google::protobuf::internal::kEmptyString) {
    strreserved1_->clear();
  }
  clear_has_strreserved1();
}
inline const ::std::string& GameUserInfo::strreserved1() const {
  return *strreserved1_;
}
inline void GameUserInfo::set_strreserved1(const ::std::string& value) {
  set_has_strreserved1();
  if (strreserved1_ == &::google::protobuf::internal::kEmptyString) {
    strreserved1_ = new ::std::string;
  }
  strreserved1_->assign(value);
}
inline void GameUserInfo::set_strreserved1(const char* value) {
  set_has_strreserved1();
  if (strreserved1_ == &::google::protobuf::internal::kEmptyString) {
    strreserved1_ = new ::std::string;
  }
  strreserved1_->assign(value);
}
inline void GameUserInfo::set_strreserved1(const void* value, size_t size) {
  set_has_strreserved1();
  if (strreserved1_ == &::google::protobuf::internal::kEmptyString) {
    strreserved1_ = new ::std::string;
  }
  strreserved1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_strreserved1() {
  set_has_strreserved1();
  if (strreserved1_ == &::google::protobuf::internal::kEmptyString) {
    strreserved1_ = new ::std::string;
  }
  return strreserved1_;
}
inline ::std::string* GameUserInfo::release_strreserved1() {
  clear_has_strreserved1();
  if (strreserved1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strreserved1_;
    strreserved1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_strreserved1(::std::string* strreserved1) {
  if (strreserved1_ != &::google::protobuf::internal::kEmptyString) {
    delete strreserved1_;
  }
  if (strreserved1) {
    set_has_strreserved1();
    strreserved1_ = strreserved1;
  } else {
    clear_has_strreserved1();
    strreserved1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strReserved2 = 10;
inline bool GameUserInfo::has_strreserved2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameUserInfo::set_has_strreserved2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameUserInfo::clear_has_strreserved2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameUserInfo::clear_strreserved2() {
  if (strreserved2_ != &::google::protobuf::internal::kEmptyString) {
    strreserved2_->clear();
  }
  clear_has_strreserved2();
}
inline const ::std::string& GameUserInfo::strreserved2() const {
  return *strreserved2_;
}
inline void GameUserInfo::set_strreserved2(const ::std::string& value) {
  set_has_strreserved2();
  if (strreserved2_ == &::google::protobuf::internal::kEmptyString) {
    strreserved2_ = new ::std::string;
  }
  strreserved2_->assign(value);
}
inline void GameUserInfo::set_strreserved2(const char* value) {
  set_has_strreserved2();
  if (strreserved2_ == &::google::protobuf::internal::kEmptyString) {
    strreserved2_ = new ::std::string;
  }
  strreserved2_->assign(value);
}
inline void GameUserInfo::set_strreserved2(const void* value, size_t size) {
  set_has_strreserved2();
  if (strreserved2_ == &::google::protobuf::internal::kEmptyString) {
    strreserved2_ = new ::std::string;
  }
  strreserved2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_strreserved2() {
  set_has_strreserved2();
  if (strreserved2_ == &::google::protobuf::internal::kEmptyString) {
    strreserved2_ = new ::std::string;
  }
  return strreserved2_;
}
inline ::std::string* GameUserInfo::release_strreserved2() {
  clear_has_strreserved2();
  if (strreserved2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strreserved2_;
    strreserved2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_strreserved2(::std::string* strreserved2) {
  if (strreserved2_ != &::google::protobuf::internal::kEmptyString) {
    delete strreserved2_;
  }
  if (strreserved2) {
    set_has_strreserved2();
    strreserved2_ = strreserved2;
  } else {
    clear_has_strreserved2();
    strreserved2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BASEDBINFO

// optional string szNickName = 1;
inline bool BASEDBINFO::has_sznickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BASEDBINFO::set_has_sznickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BASEDBINFO::clear_has_sznickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BASEDBINFO::clear_sznickname() {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    sznickname_->clear();
  }
  clear_has_sznickname();
}
inline const ::std::string& BASEDBINFO::sznickname() const {
  return *sznickname_;
}
inline void BASEDBINFO::set_sznickname(const ::std::string& value) {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  sznickname_->assign(value);
}
inline void BASEDBINFO::set_sznickname(const char* value) {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  sznickname_->assign(value);
}
inline void BASEDBINFO::set_sznickname(const char* value, size_t size) {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  sznickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BASEDBINFO::mutable_sznickname() {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  return sznickname_;
}
inline ::std::string* BASEDBINFO::release_sznickname() {
  clear_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sznickname_;
    sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BASEDBINFO::set_allocated_sznickname(::std::string* sznickname) {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sznickname_;
  }
  if (sznickname) {
    set_has_sznickname();
    sznickname_ = sznickname;
  } else {
    clear_has_sznickname();
    sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 iResources = 3;
inline int BASEDBINFO::iresources_size() const {
  return iresources_.size();
}
inline void BASEDBINFO::clear_iresources() {
  iresources_.Clear();
}
inline ::google::protobuf::int32 BASEDBINFO::iresources(int index) const {
  return iresources_.Get(index);
}
inline void BASEDBINFO::set_iresources(int index, ::google::protobuf::int32 value) {
  iresources_.Set(index, value);
}
inline void BASEDBINFO::add_iresources(::google::protobuf::int32 value) {
  iresources_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BASEDBINFO::iresources() const {
  return iresources_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BASEDBINFO::mutable_iresources() {
  return &iresources_;
}

// optional uint32 uStatus = 9;
inline bool BASEDBINFO::has_ustatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BASEDBINFO::set_has_ustatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BASEDBINFO::clear_has_ustatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BASEDBINFO::clear_ustatus() {
  ustatus_ = 0u;
  clear_has_ustatus();
}
inline ::google::protobuf::uint32 BASEDBINFO::ustatus() const {
  return ustatus_;
}
inline void BASEDBINFO::set_ustatus(::google::protobuf::uint32 value) {
  set_has_ustatus();
  ustatus_ = value;
}

// optional int32 iLastLogin = 11;
inline bool BASEDBINFO::has_ilastlogin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BASEDBINFO::set_has_ilastlogin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BASEDBINFO::clear_has_ilastlogin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BASEDBINFO::clear_ilastlogin() {
  ilastlogin_ = 0;
  clear_has_ilastlogin();
}
inline ::google::protobuf::int32 BASEDBINFO::ilastlogin() const {
  return ilastlogin_;
}
inline void BASEDBINFO::set_ilastlogin(::google::protobuf::int32 value) {
  set_has_ilastlogin();
  ilastlogin_ = value;
}

// optional int32 iLastLogout = 12;
inline bool BASEDBINFO::has_ilastlogout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BASEDBINFO::set_has_ilastlogout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BASEDBINFO::clear_has_ilastlogout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BASEDBINFO::clear_ilastlogout() {
  ilastlogout_ = 0;
  clear_has_ilastlogout();
}
inline ::google::protobuf::int32 BASEDBINFO::ilastlogout() const {
  return ilastlogout_;
}
inline void BASEDBINFO::set_ilastlogout(::google::protobuf::int32 value) {
  set_has_ilastlogout();
  ilastlogout_ = value;
}

// optional int32 iCreateTime = 13;
inline bool BASEDBINFO::has_icreatetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BASEDBINFO::set_has_icreatetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BASEDBINFO::clear_has_icreatetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BASEDBINFO::clear_icreatetime() {
  icreatetime_ = 0;
  clear_has_icreatetime();
}
inline ::google::protobuf::int32 BASEDBINFO::icreatetime() const {
  return icreatetime_;
}
inline void BASEDBINFO::set_icreatetime(::google::protobuf::int32 value) {
  set_has_icreatetime();
  icreatetime_ = value;
}

// optional int32 iOnlineTime = 14;
inline bool BASEDBINFO::has_ionlinetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BASEDBINFO::set_has_ionlinetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BASEDBINFO::clear_has_ionlinetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BASEDBINFO::clear_ionlinetime() {
  ionlinetime_ = 0;
  clear_has_ionlinetime();
}
inline ::google::protobuf::int32 BASEDBINFO::ionlinetime() const {
  return ionlinetime_;
}
inline void BASEDBINFO::set_ionlinetime(::google::protobuf::int32 value) {
  set_has_ionlinetime();
  ionlinetime_ = value;
}

// optional int32 iLoginCount = 15;
inline bool BASEDBINFO::has_ilogincount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BASEDBINFO::set_has_ilogincount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BASEDBINFO::clear_has_ilogincount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BASEDBINFO::clear_ilogincount() {
  ilogincount_ = 0;
  clear_has_ilogincount();
}
inline ::google::protobuf::int32 BASEDBINFO::ilogincount() const {
  return ilogincount_;
}
inline void BASEDBINFO::set_ilogincount(::google::protobuf::int32 value) {
  set_has_ilogincount();
  ilogincount_ = value;
}

// optional int32 iForbidTalkingTime = 16;
inline bool BASEDBINFO::has_iforbidtalkingtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BASEDBINFO::set_has_iforbidtalkingtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BASEDBINFO::clear_has_iforbidtalkingtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BASEDBINFO::clear_iforbidtalkingtime() {
  iforbidtalkingtime_ = 0;
  clear_has_iforbidtalkingtime();
}
inline ::google::protobuf::int32 BASEDBINFO::iforbidtalkingtime() const {
  return iforbidtalkingtime_;
}
inline void BASEDBINFO::set_iforbidtalkingtime(::google::protobuf::int32 value) {
  set_has_iforbidtalkingtime();
  iforbidtalkingtime_ = value;
}

// optional int32 iLoginTime = 17;
inline bool BASEDBINFO::has_ilogintime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BASEDBINFO::set_has_ilogintime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BASEDBINFO::clear_has_ilogintime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BASEDBINFO::clear_ilogintime() {
  ilogintime_ = 0;
  clear_has_ilogintime();
}
inline ::google::protobuf::int32 BASEDBINFO::ilogintime() const {
  return ilogintime_;
}
inline void BASEDBINFO::set_ilogintime(::google::protobuf::int32 value) {
  set_has_ilogintime();
  ilogintime_ = value;
}

// optional int32 iLogoutTime = 18;
inline bool BASEDBINFO::has_ilogouttime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BASEDBINFO::set_has_ilogouttime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BASEDBINFO::clear_has_ilogouttime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BASEDBINFO::clear_ilogouttime() {
  ilogouttime_ = 0;
  clear_has_ilogouttime();
}
inline ::google::protobuf::int32 BASEDBINFO::ilogouttime() const {
  return ilogouttime_;
}
inline void BASEDBINFO::set_ilogouttime(::google::protobuf::int32 value) {
  set_has_ilogouttime();
  ilogouttime_ = value;
}

// -------------------------------------------------------------------

// QUESTDBINFO

// -------------------------------------------------------------------

// OneSlotInfo

// optional int32 iItemID = 1;
inline bool OneSlotInfo::has_iitemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneSlotInfo::set_has_iitemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneSlotInfo::clear_has_iitemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneSlotInfo::clear_iitemid() {
  iitemid_ = 0;
  clear_has_iitemid();
}
inline ::google::protobuf::int32 OneSlotInfo::iitemid() const {
  return iitemid_;
}
inline void OneSlotInfo::set_iitemid(::google::protobuf::int32 value) {
  set_has_iitemid();
  iitemid_ = value;
}

// optional int32 iItemNum = 2;
inline bool OneSlotInfo::has_iitemnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneSlotInfo::set_has_iitemnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneSlotInfo::clear_has_iitemnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneSlotInfo::clear_iitemnum() {
  iitemnum_ = 0;
  clear_has_iitemnum();
}
inline ::google::protobuf::int32 OneSlotInfo::iitemnum() const {
  return iitemnum_;
}
inline void OneSlotInfo::set_iitemnum(::google::protobuf::int32 value) {
  set_has_iitemnum();
  iitemnum_ = value;
}

// -------------------------------------------------------------------

// ItemSlotInfo

// repeated .OneSlotInfo stSlots = 1;
inline int ItemSlotInfo::stslots_size() const {
  return stslots_.size();
}
inline void ItemSlotInfo::clear_stslots() {
  stslots_.Clear();
}
inline const ::OneSlotInfo& ItemSlotInfo::stslots(int index) const {
  return stslots_.Get(index);
}
inline ::OneSlotInfo* ItemSlotInfo::mutable_stslots(int index) {
  return stslots_.Mutable(index);
}
inline ::OneSlotInfo* ItemSlotInfo::add_stslots() {
  return stslots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OneSlotInfo >&
ItemSlotInfo::stslots() const {
  return stslots_;
}
inline ::google::protobuf::RepeatedPtrField< ::OneSlotInfo >*
ItemSlotInfo::mutable_stslots() {
  return &stslots_;
}

// -------------------------------------------------------------------

// ITEMDBINFO

// optional int32 m_iOpenedSlotNum = 1;
inline bool ITEMDBINFO::has_m_iopenedslotnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ITEMDBINFO::set_has_m_iopenedslotnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ITEMDBINFO::clear_has_m_iopenedslotnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ITEMDBINFO::clear_m_iopenedslotnum() {
  m_iopenedslotnum_ = 0;
  clear_has_m_iopenedslotnum();
}
inline ::google::protobuf::int32 ITEMDBINFO::m_iopenedslotnum() const {
  return m_iopenedslotnum_;
}
inline void ITEMDBINFO::set_m_iopenedslotnum(::google::protobuf::int32 value) {
  set_has_m_iopenedslotnum();
  m_iopenedslotnum_ = value;
}

// optional .ItemSlotInfo stItemSlot = 2;
inline bool ITEMDBINFO::has_stitemslot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ITEMDBINFO::set_has_stitemslot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ITEMDBINFO::clear_has_stitemslot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ITEMDBINFO::clear_stitemslot() {
  if (stitemslot_ != NULL) stitemslot_->::ItemSlotInfo::Clear();
  clear_has_stitemslot();
}
inline const ::ItemSlotInfo& ITEMDBINFO::stitemslot() const {
  return stitemslot_ != NULL ? *stitemslot_ : *default_instance_->stitemslot_;
}
inline ::ItemSlotInfo* ITEMDBINFO::mutable_stitemslot() {
  set_has_stitemslot();
  if (stitemslot_ == NULL) stitemslot_ = new ::ItemSlotInfo;
  return stitemslot_;
}
inline ::ItemSlotInfo* ITEMDBINFO::release_stitemslot() {
  clear_has_stitemslot();
  ::ItemSlotInfo* temp = stitemslot_;
  stitemslot_ = NULL;
  return temp;
}
inline void ITEMDBINFO::set_allocated_stitemslot(::ItemSlotInfo* stitemslot) {
  delete stitemslot_;
  stitemslot_ = stitemslot;
  if (stitemslot) {
    set_has_stitemslot();
  } else {
    clear_has_stitemslot();
  }
}

// -------------------------------------------------------------------

// UnitItemInfo

// repeated .OneSlotInfo stItems = 1;
inline int UnitItemInfo::stitems_size() const {
  return stitems_.size();
}
inline void UnitItemInfo::clear_stitems() {
  stitems_.Clear();
}
inline const ::OneSlotInfo& UnitItemInfo::stitems(int index) const {
  return stitems_.Get(index);
}
inline ::OneSlotInfo* UnitItemInfo::mutable_stitems(int index) {
  return stitems_.Mutable(index);
}
inline ::OneSlotInfo* UnitItemInfo::add_stitems() {
  return stitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OneSlotInfo >&
UnitItemInfo::stitems() const {
  return stitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::OneSlotInfo >*
UnitItemInfo::mutable_stitems() {
  return &stitems_;
}

// -------------------------------------------------------------------

// OneFightUnitInfo

// optional int32 iUnitID = 1;
inline bool OneFightUnitInfo::has_iunitid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneFightUnitInfo::set_has_iunitid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneFightUnitInfo::clear_has_iunitid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneFightUnitInfo::clear_iunitid() {
  iunitid_ = 0;
  clear_has_iunitid();
}
inline ::google::protobuf::int32 OneFightUnitInfo::iunitid() const {
  return iunitid_;
}
inline void OneFightUnitInfo::set_iunitid(::google::protobuf::int32 value) {
  set_has_iunitid();
  iunitid_ = value;
}

// optional int32 iUnitAIID = 2;
inline bool OneFightUnitInfo::has_iunitaiid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneFightUnitInfo::set_has_iunitaiid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneFightUnitInfo::clear_has_iunitaiid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneFightUnitInfo::clear_iunitaiid() {
  iunitaiid_ = 0;
  clear_has_iunitaiid();
}
inline ::google::protobuf::int32 OneFightUnitInfo::iunitaiid() const {
  return iunitaiid_;
}
inline void OneFightUnitInfo::set_iunitaiid(::google::protobuf::int32 value) {
  set_has_iunitaiid();
  iunitaiid_ = value;
}

// repeated int32 iAttributes = 3;
inline int OneFightUnitInfo::iattributes_size() const {
  return iattributes_.size();
}
inline void OneFightUnitInfo::clear_iattributes() {
  iattributes_.Clear();
}
inline ::google::protobuf::int32 OneFightUnitInfo::iattributes(int index) const {
  return iattributes_.Get(index);
}
inline void OneFightUnitInfo::set_iattributes(int index, ::google::protobuf::int32 value) {
  iattributes_.Set(index, value);
}
inline void OneFightUnitInfo::add_iattributes(::google::protobuf::int32 value) {
  iattributes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OneFightUnitInfo::iattributes() const {
  return iattributes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OneFightUnitInfo::mutable_iattributes() {
  return &iattributes_;
}

// optional int32 iNormalSkillID = 4;
inline bool OneFightUnitInfo::has_inormalskillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneFightUnitInfo::set_has_inormalskillid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneFightUnitInfo::clear_has_inormalskillid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneFightUnitInfo::clear_inormalskillid() {
  inormalskillid_ = 0;
  clear_has_inormalskillid();
}
inline ::google::protobuf::int32 OneFightUnitInfo::inormalskillid() const {
  return inormalskillid_;
}
inline void OneFightUnitInfo::set_inormalskillid(::google::protobuf::int32 value) {
  set_has_inormalskillid();
  inormalskillid_ = value;
}

// optional int32 iLevel = 5;
inline bool OneFightUnitInfo::has_ilevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneFightUnitInfo::set_has_ilevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneFightUnitInfo::clear_has_ilevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneFightUnitInfo::clear_ilevel() {
  ilevel_ = 0;
  clear_has_ilevel();
}
inline ::google::protobuf::int32 OneFightUnitInfo::ilevel() const {
  return ilevel_;
}
inline void OneFightUnitInfo::set_ilevel(::google::protobuf::int32 value) {
  set_has_ilevel();
  ilevel_ = value;
}

// optional int32 iLevelExp = 6;
inline bool OneFightUnitInfo::has_ilevelexp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneFightUnitInfo::set_has_ilevelexp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneFightUnitInfo::clear_has_ilevelexp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneFightUnitInfo::clear_ilevelexp() {
  ilevelexp_ = 0;
  clear_has_ilevelexp();
}
inline ::google::protobuf::int32 OneFightUnitInfo::ilevelexp() const {
  return ilevelexp_;
}
inline void OneFightUnitInfo::set_ilevelexp(::google::protobuf::int32 value) {
  set_has_ilevelexp();
  ilevelexp_ = value;
}

// optional .UnitItemInfo stItemInfo = 7;
inline bool OneFightUnitInfo::has_stiteminfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneFightUnitInfo::set_has_stiteminfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneFightUnitInfo::clear_has_stiteminfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneFightUnitInfo::clear_stiteminfo() {
  if (stiteminfo_ != NULL) stiteminfo_->::UnitItemInfo::Clear();
  clear_has_stiteminfo();
}
inline const ::UnitItemInfo& OneFightUnitInfo::stiteminfo() const {
  return stiteminfo_ != NULL ? *stiteminfo_ : *default_instance_->stiteminfo_;
}
inline ::UnitItemInfo* OneFightUnitInfo::mutable_stiteminfo() {
  set_has_stiteminfo();
  if (stiteminfo_ == NULL) stiteminfo_ = new ::UnitItemInfo;
  return stiteminfo_;
}
inline ::UnitItemInfo* OneFightUnitInfo::release_stiteminfo() {
  clear_has_stiteminfo();
  ::UnitItemInfo* temp = stiteminfo_;
  stiteminfo_ = NULL;
  return temp;
}
inline void OneFightUnitInfo::set_allocated_stiteminfo(::UnitItemInfo* stiteminfo) {
  delete stiteminfo_;
  stiteminfo_ = stiteminfo;
  if (stiteminfo) {
    set_has_stiteminfo();
  } else {
    clear_has_stiteminfo();
  }
}

// -------------------------------------------------------------------

// FightUnitRepInfo

// repeated .OneFightUnitInfo stUnits = 1;
inline int FightUnitRepInfo::stunits_size() const {
  return stunits_.size();
}
inline void FightUnitRepInfo::clear_stunits() {
  stunits_.Clear();
}
inline const ::OneFightUnitInfo& FightUnitRepInfo::stunits(int index) const {
  return stunits_.Get(index);
}
inline ::OneFightUnitInfo* FightUnitRepInfo::mutable_stunits(int index) {
  return stunits_.Mutable(index);
}
inline ::OneFightUnitInfo* FightUnitRepInfo::add_stunits() {
  return stunits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OneFightUnitInfo >&
FightUnitRepInfo::stunits() const {
  return stunits_;
}
inline ::google::protobuf::RepeatedPtrField< ::OneFightUnitInfo >*
FightUnitRepInfo::mutable_stunits() {
  return &stunits_;
}

// -------------------------------------------------------------------

// FightForm

// repeated int32 iFightUnitIDs = 1;
inline int FightForm::ifightunitids_size() const {
  return ifightunitids_.size();
}
inline void FightForm::clear_ifightunitids() {
  ifightunitids_.Clear();
}
inline ::google::protobuf::int32 FightForm::ifightunitids(int index) const {
  return ifightunitids_.Get(index);
}
inline void FightForm::set_ifightunitids(int index, ::google::protobuf::int32 value) {
  ifightunitids_.Set(index, value);
}
inline void FightForm::add_ifightunitids(::google::protobuf::int32 value) {
  ifightunitids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FightForm::ifightunitids() const {
  return ifightunitids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FightForm::mutable_ifightunitids() {
  return &ifightunitids_;
}

// -------------------------------------------------------------------

// FIGHTDBINFO

// optional .FightUnitRepInfo stUnitRep = 1;
inline bool FIGHTDBINFO::has_stunitrep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FIGHTDBINFO::set_has_stunitrep() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FIGHTDBINFO::clear_has_stunitrep() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FIGHTDBINFO::clear_stunitrep() {
  if (stunitrep_ != NULL) stunitrep_->::FightUnitRepInfo::Clear();
  clear_has_stunitrep();
}
inline const ::FightUnitRepInfo& FIGHTDBINFO::stunitrep() const {
  return stunitrep_ != NULL ? *stunitrep_ : *default_instance_->stunitrep_;
}
inline ::FightUnitRepInfo* FIGHTDBINFO::mutable_stunitrep() {
  set_has_stunitrep();
  if (stunitrep_ == NULL) stunitrep_ = new ::FightUnitRepInfo;
  return stunitrep_;
}
inline ::FightUnitRepInfo* FIGHTDBINFO::release_stunitrep() {
  clear_has_stunitrep();
  ::FightUnitRepInfo* temp = stunitrep_;
  stunitrep_ = NULL;
  return temp;
}
inline void FIGHTDBINFO::set_allocated_stunitrep(::FightUnitRepInfo* stunitrep) {
  delete stunitrep_;
  stunitrep_ = stunitrep;
  if (stunitrep) {
    set_has_stunitrep();
  } else {
    clear_has_stunitrep();
  }
}

// optional .FightForm stForms = 2;
inline bool FIGHTDBINFO::has_stforms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FIGHTDBINFO::set_has_stforms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FIGHTDBINFO::clear_has_stforms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FIGHTDBINFO::clear_stforms() {
  if (stforms_ != NULL) stforms_->::FightForm::Clear();
  clear_has_stforms();
}
inline const ::FightForm& FIGHTDBINFO::stforms() const {
  return stforms_ != NULL ? *stforms_ : *default_instance_->stforms_;
}
inline ::FightForm* FIGHTDBINFO::mutable_stforms() {
  set_has_stforms();
  if (stforms_ == NULL) stforms_ = new ::FightForm;
  return stforms_;
}
inline ::FightForm* FIGHTDBINFO::release_stforms() {
  clear_has_stforms();
  ::FightForm* temp = stforms_;
  stforms_ = NULL;
  return temp;
}
inline void FIGHTDBINFO::set_allocated_stforms(::FightForm* stforms) {
  delete stforms_;
  stforms_ = stforms;
  if (stforms) {
    set_has_stforms();
  } else {
    clear_has_stforms();
  }
}

// -------------------------------------------------------------------

// FRIENDDBINFO

// -------------------------------------------------------------------

// RESERVED1DBINFO

// -------------------------------------------------------------------

// RESERVED2DBINFO


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameProtocol_2eUSERDB_2eproto__INCLUDED
