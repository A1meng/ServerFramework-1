// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.CS.proto

#ifndef PROTOBUF_GameProtocol_2eCS_2eproto__INCLUDED
#define PROTOBUF_GameProtocol_2eCS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "GameProtocol.Common.pb.h"
#include "GameProtocol.Account.pb.h"
#include "GameProtocol.World.pb.h"
#include "GameProtocol.Zone.pb.h"
#include "GameProtocol.RegAuth.pb.h"
#include "GameProtocol.MsgID.pb.h"
#include "GameProtocol.Fight.pb.h"
// @@protoc_insertion_point(includes)

namespace GameProtocol {
namespace CS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameProtocol_2eCS_2eproto();
void protobuf_AssignDesc_GameProtocol_2eCS_2eproto();
void protobuf_ShutdownFile_GameProtocol_2eCS_2eproto();

class CSMsgBody;
class CSMsgHead;
class ProtocolCSMsg;

// ===================================================================

class CSMsgBody : public ::google::protobuf::Message {
 public:
  CSMsgBody();
  virtual ~CSMsgBody();

  CSMsgBody(const CSMsgBody& from);

  inline CSMsgBody& operator=(const CSMsgBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsgBody& default_instance();

  void Swap(CSMsgBody* other);

  // implements Message ----------------------------------------------

  CSMsgBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsgBody& from);
  void MergeFrom(const CSMsgBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountDB_AddAccount_Request m_stAccountDB_AddAccount_Request = 1;
  inline bool has_m_staccountdb_addaccount_request() const;
  inline void clear_m_staccountdb_addaccount_request();
  static const int kMStAccountDBAddAccountRequestFieldNumber = 1;
  inline const ::AccountDB_AddAccount_Request& m_staccountdb_addaccount_request() const;
  inline ::AccountDB_AddAccount_Request* mutable_m_staccountdb_addaccount_request();
  inline ::AccountDB_AddAccount_Request* release_m_staccountdb_addaccount_request();
  inline void set_allocated_m_staccountdb_addaccount_request(::AccountDB_AddAccount_Request* m_staccountdb_addaccount_request);

  // optional .AccountDB_AddAccount_Response m_stAccountDB_AddAccount_Response = 2;
  inline bool has_m_staccountdb_addaccount_response() const;
  inline void clear_m_staccountdb_addaccount_response();
  static const int kMStAccountDBAddAccountResponseFieldNumber = 2;
  inline const ::AccountDB_AddAccount_Response& m_staccountdb_addaccount_response() const;
  inline ::AccountDB_AddAccount_Response* mutable_m_staccountdb_addaccount_response();
  inline ::AccountDB_AddAccount_Response* release_m_staccountdb_addaccount_response();
  inline void set_allocated_m_staccountdb_addaccount_response(::AccountDB_AddAccount_Response* m_staccountdb_addaccount_response);

  // optional .AccountDB_DeleteAccount_Request m_stAccountDB_Delete_Request = 3;
  inline bool has_m_staccountdb_delete_request() const;
  inline void clear_m_staccountdb_delete_request();
  static const int kMStAccountDBDeleteRequestFieldNumber = 3;
  inline const ::AccountDB_DeleteAccount_Request& m_staccountdb_delete_request() const;
  inline ::AccountDB_DeleteAccount_Request* mutable_m_staccountdb_delete_request();
  inline ::AccountDB_DeleteAccount_Request* release_m_staccountdb_delete_request();
  inline void set_allocated_m_staccountdb_delete_request(::AccountDB_DeleteAccount_Request* m_staccountdb_delete_request);

  // optional .AccountDB_DeleteAccount_Response m_stAccountDB_Delete_Response = 4;
  inline bool has_m_staccountdb_delete_response() const;
  inline void clear_m_staccountdb_delete_response();
  static const int kMStAccountDBDeleteResponseFieldNumber = 4;
  inline const ::AccountDB_DeleteAccount_Response& m_staccountdb_delete_response() const;
  inline ::AccountDB_DeleteAccount_Response* mutable_m_staccountdb_delete_response();
  inline ::AccountDB_DeleteAccount_Response* release_m_staccountdb_delete_response();
  inline void set_allocated_m_staccountdb_delete_response(::AccountDB_DeleteAccount_Response* m_staccountdb_delete_response);

  // optional .AccountDB_FetchAccount_Request m_stAccountDB_Fetch_Request = 5;
  inline bool has_m_staccountdb_fetch_request() const;
  inline void clear_m_staccountdb_fetch_request();
  static const int kMStAccountDBFetchRequestFieldNumber = 5;
  inline const ::AccountDB_FetchAccount_Request& m_staccountdb_fetch_request() const;
  inline ::AccountDB_FetchAccount_Request* mutable_m_staccountdb_fetch_request();
  inline ::AccountDB_FetchAccount_Request* release_m_staccountdb_fetch_request();
  inline void set_allocated_m_staccountdb_fetch_request(::AccountDB_FetchAccount_Request* m_staccountdb_fetch_request);

  // optional .AccountDB_FetchAccount_Response m_stAccountDB_Fetch_Response = 6;
  inline bool has_m_staccountdb_fetch_response() const;
  inline void clear_m_staccountdb_fetch_response();
  static const int kMStAccountDBFetchResponseFieldNumber = 6;
  inline const ::AccountDB_FetchAccount_Response& m_staccountdb_fetch_response() const;
  inline ::AccountDB_FetchAccount_Response* mutable_m_staccountdb_fetch_response();
  inline ::AccountDB_FetchAccount_Response* release_m_staccountdb_fetch_response();
  inline void set_allocated_m_staccountdb_fetch_response(::AccountDB_FetchAccount_Response* m_staccountdb_fetch_response);

  // optional .AccountDB_UpdateAccount_Request m_stAccountDB_Update_Request = 7;
  inline bool has_m_staccountdb_update_request() const;
  inline void clear_m_staccountdb_update_request();
  static const int kMStAccountDBUpdateRequestFieldNumber = 7;
  inline const ::AccountDB_UpdateAccount_Request& m_staccountdb_update_request() const;
  inline ::AccountDB_UpdateAccount_Request* mutable_m_staccountdb_update_request();
  inline ::AccountDB_UpdateAccount_Request* release_m_staccountdb_update_request();
  inline void set_allocated_m_staccountdb_update_request(::AccountDB_UpdateAccount_Request* m_staccountdb_update_request);

  // optional .AccountDB_UpdateAccount_Response m_stAccountDB_Update_Response = 8;
  inline bool has_m_staccountdb_update_response() const;
  inline void clear_m_staccountdb_update_response();
  static const int kMStAccountDBUpdateResponseFieldNumber = 8;
  inline const ::AccountDB_UpdateAccount_Response& m_staccountdb_update_response() const;
  inline ::AccountDB_UpdateAccount_Response* mutable_m_staccountdb_update_response();
  inline ::AccountDB_UpdateAccount_Response* release_m_staccountdb_update_response();
  inline void set_allocated_m_staccountdb_update_response(::AccountDB_UpdateAccount_Response* m_staccountdb_update_response);

  // optional .RegAuth_RegAccount_Request m_stRegAuth_RegAccount_Request = 9;
  inline bool has_m_stregauth_regaccount_request() const;
  inline void clear_m_stregauth_regaccount_request();
  static const int kMStRegAuthRegAccountRequestFieldNumber = 9;
  inline const ::RegAuth_RegAccount_Request& m_stregauth_regaccount_request() const;
  inline ::RegAuth_RegAccount_Request* mutable_m_stregauth_regaccount_request();
  inline ::RegAuth_RegAccount_Request* release_m_stregauth_regaccount_request();
  inline void set_allocated_m_stregauth_regaccount_request(::RegAuth_RegAccount_Request* m_stregauth_regaccount_request);

  // optional .RegAuth_RegAccount_Response m_stRegAuth_RegAccount_Response = 10;
  inline bool has_m_stregauth_regaccount_response() const;
  inline void clear_m_stregauth_regaccount_response();
  static const int kMStRegAuthRegAccountResponseFieldNumber = 10;
  inline const ::RegAuth_RegAccount_Response& m_stregauth_regaccount_response() const;
  inline ::RegAuth_RegAccount_Response* mutable_m_stregauth_regaccount_response();
  inline ::RegAuth_RegAccount_Response* release_m_stregauth_regaccount_response();
  inline void set_allocated_m_stregauth_regaccount_response(::RegAuth_RegAccount_Response* m_stregauth_regaccount_response);

  // optional .RegAuth_AuthAccount_Request m_stRegAuth_AuthAccount_Request = 11;
  inline bool has_m_stregauth_authaccount_request() const;
  inline void clear_m_stregauth_authaccount_request();
  static const int kMStRegAuthAuthAccountRequestFieldNumber = 11;
  inline const ::RegAuth_AuthAccount_Request& m_stregauth_authaccount_request() const;
  inline ::RegAuth_AuthAccount_Request* mutable_m_stregauth_authaccount_request();
  inline ::RegAuth_AuthAccount_Request* release_m_stregauth_authaccount_request();
  inline void set_allocated_m_stregauth_authaccount_request(::RegAuth_AuthAccount_Request* m_stregauth_authaccount_request);

  // optional .RegAuth_AuthAccount_Response m_stRegAuth_AuthAccount_Response = 12;
  inline bool has_m_stregauth_authaccount_response() const;
  inline void clear_m_stregauth_authaccount_response();
  static const int kMStRegAuthAuthAccountResponseFieldNumber = 12;
  inline const ::RegAuth_AuthAccount_Response& m_stregauth_authaccount_response() const;
  inline ::RegAuth_AuthAccount_Response* mutable_m_stregauth_authaccount_response();
  inline ::RegAuth_AuthAccount_Response* release_m_stregauth_authaccount_response();
  inline void set_allocated_m_stregauth_authaccount_response(::RegAuth_AuthAccount_Response* m_stregauth_authaccount_response);

  // optional .RegAuth_UpdateAccount_Request m_stRegAuth_UpdateAccount_Request = 13;
  inline bool has_m_stregauth_updateaccount_request() const;
  inline void clear_m_stregauth_updateaccount_request();
  static const int kMStRegAuthUpdateAccountRequestFieldNumber = 13;
  inline const ::RegAuth_UpdateAccount_Request& m_stregauth_updateaccount_request() const;
  inline ::RegAuth_UpdateAccount_Request* mutable_m_stregauth_updateaccount_request();
  inline ::RegAuth_UpdateAccount_Request* release_m_stregauth_updateaccount_request();
  inline void set_allocated_m_stregauth_updateaccount_request(::RegAuth_UpdateAccount_Request* m_stregauth_updateaccount_request);

  // optional .RegAuth_UpdateAccount_Response m_stRegAuth_UpdateAccount_Response = 14;
  inline bool has_m_stregauth_updateaccount_response() const;
  inline void clear_m_stregauth_updateaccount_response();
  static const int kMStRegAuthUpdateAccountResponseFieldNumber = 14;
  inline const ::RegAuth_UpdateAccount_Response& m_stregauth_updateaccount_response() const;
  inline ::RegAuth_UpdateAccount_Response* mutable_m_stregauth_updateaccount_response();
  inline ::RegAuth_UpdateAccount_Response* release_m_stregauth_updateaccount_response();
  inline void set_allocated_m_stregauth_updateaccount_response(::RegAuth_UpdateAccount_Response* m_stregauth_updateaccount_response);

  // optional .CreateRole_Account_Request m_stAccountCreateRoleRequest = 21;
  inline bool has_m_staccountcreaterolerequest() const;
  inline void clear_m_staccountcreaterolerequest();
  static const int kMStAccountCreateRoleRequestFieldNumber = 21;
  inline const ::CreateRole_Account_Request& m_staccountcreaterolerequest() const;
  inline ::CreateRole_Account_Request* mutable_m_staccountcreaterolerequest();
  inline ::CreateRole_Account_Request* release_m_staccountcreaterolerequest();
  inline void set_allocated_m_staccountcreaterolerequest(::CreateRole_Account_Request* m_staccountcreaterolerequest);

  // optional .CreateRole_Account_Response m_stAccountCreateRoleResponse = 22;
  inline bool has_m_staccountcreateroleresponse() const;
  inline void clear_m_staccountcreateroleresponse();
  static const int kMStAccountCreateRoleResponseFieldNumber = 22;
  inline const ::CreateRole_Account_Response& m_staccountcreateroleresponse() const;
  inline ::CreateRole_Account_Response* mutable_m_staccountcreateroleresponse();
  inline ::CreateRole_Account_Response* release_m_staccountcreateroleresponse();
  inline void set_allocated_m_staccountcreateroleresponse(::CreateRole_Account_Response* m_staccountcreateroleresponse);

  // optional .Account_ListZone_Request m_stAccount_ListZone_Request = 23;
  inline bool has_m_staccount_listzone_request() const;
  inline void clear_m_staccount_listzone_request();
  static const int kMStAccountListZoneRequestFieldNumber = 23;
  inline const ::Account_ListZone_Request& m_staccount_listzone_request() const;
  inline ::Account_ListZone_Request* mutable_m_staccount_listzone_request();
  inline ::Account_ListZone_Request* release_m_staccount_listzone_request();
  inline void set_allocated_m_staccount_listzone_request(::Account_ListZone_Request* m_staccount_listzone_request);

  // optional .Account_ListZone_Response m_stAccount_ListZone_Response = 24;
  inline bool has_m_staccount_listzone_response() const;
  inline void clear_m_staccount_listzone_response();
  static const int kMStAccountListZoneResponseFieldNumber = 24;
  inline const ::Account_ListZone_Response& m_staccount_listzone_response() const;
  inline ::Account_ListZone_Response* mutable_m_staccount_listzone_response();
  inline ::Account_ListZone_Response* release_m_staccount_listzone_response();
  inline void set_allocated_m_staccount_listzone_response(::Account_ListZone_Response* m_staccount_listzone_response);

  // optional .DeleteRole_Account_Request m_stAccountDeleteRoleRequest = 25;
  inline bool has_m_staccountdeleterolerequest() const;
  inline void clear_m_staccountdeleterolerequest();
  static const int kMStAccountDeleteRoleRequestFieldNumber = 25;
  inline const ::DeleteRole_Account_Request& m_staccountdeleterolerequest() const;
  inline ::DeleteRole_Account_Request* mutable_m_staccountdeleterolerequest();
  inline ::DeleteRole_Account_Request* release_m_staccountdeleterolerequest();
  inline void set_allocated_m_staccountdeleterolerequest(::DeleteRole_Account_Request* m_staccountdeleterolerequest);

  // optional .DeleteRole_Account_Response m_stAccountDeleteRoleResponse = 26;
  inline bool has_m_staccountdeleteroleresponse() const;
  inline void clear_m_staccountdeleteroleresponse();
  static const int kMStAccountDeleteRoleResponseFieldNumber = 26;
  inline const ::DeleteRole_Account_Response& m_staccountdeleteroleresponse() const;
  inline ::DeleteRole_Account_Response* mutable_m_staccountdeleteroleresponse();
  inline ::DeleteRole_Account_Response* release_m_staccountdeleteroleresponse();
  inline void set_allocated_m_staccountdeleteroleresponse(::DeleteRole_Account_Response* m_staccountdeleteroleresponse);

  // optional .Account_ListRole_Request m_stAccountListRoleRequest = 27;
  inline bool has_m_staccountlistrolerequest() const;
  inline void clear_m_staccountlistrolerequest();
  static const int kMStAccountListRoleRequestFieldNumber = 27;
  inline const ::Account_ListRole_Request& m_staccountlistrolerequest() const;
  inline ::Account_ListRole_Request* mutable_m_staccountlistrolerequest();
  inline ::Account_ListRole_Request* release_m_staccountlistrolerequest();
  inline void set_allocated_m_staccountlistrolerequest(::Account_ListRole_Request* m_staccountlistrolerequest);

  // optional .Account_ListRole_Response m_stAccountListRoleResponse = 28;
  inline bool has_m_staccountlistroleresponse() const;
  inline void clear_m_staccountlistroleresponse();
  static const int kMStAccountListRoleResponseFieldNumber = 28;
  inline const ::Account_ListRole_Response& m_staccountlistroleresponse() const;
  inline ::Account_ListRole_Response* mutable_m_staccountlistroleresponse();
  inline ::Account_ListRole_Response* release_m_staccountlistroleresponse();
  inline void set_allocated_m_staccountlistroleresponse(::Account_ListRole_Response* m_staccountlistroleresponse);

  // optional .LogoutServer_Response m_stLogoutServer_Response = 30;
  inline bool has_m_stlogoutserver_response() const;
  inline void clear_m_stlogoutserver_response();
  static const int kMStLogoutServerResponseFieldNumber = 30;
  inline const ::LogoutServer_Response& m_stlogoutserver_response() const;
  inline ::LogoutServer_Response* mutable_m_stlogoutserver_response();
  inline ::LogoutServer_Response* release_m_stlogoutserver_response();
  inline void set_allocated_m_stlogoutserver_response(::LogoutServer_Response* m_stlogoutserver_response);

  // optional .World_ZoneChanged_Notify m_stWorld_ZoneChanged_Notify = 31;
  inline bool has_m_stworld_zonechanged_notify() const;
  inline void clear_m_stworld_zonechanged_notify();
  static const int kMStWorldZoneChangedNotifyFieldNumber = 31;
  inline const ::World_ZoneChanged_Notify& m_stworld_zonechanged_notify() const;
  inline ::World_ZoneChanged_Notify* mutable_m_stworld_zonechanged_notify();
  inline ::World_ZoneChanged_Notify* release_m_stworld_zonechanged_notify();
  inline void set_allocated_m_stworld_zonechanged_notify(::World_ZoneChanged_Notify* m_stworld_zonechanged_notify);

  // optional .World_CreateRole_Request m_stWorld_CreateRole_Request = 32;
  inline bool has_m_stworld_createrole_request() const;
  inline void clear_m_stworld_createrole_request();
  static const int kMStWorldCreateRoleRequestFieldNumber = 32;
  inline const ::World_CreateRole_Request& m_stworld_createrole_request() const;
  inline ::World_CreateRole_Request* mutable_m_stworld_createrole_request();
  inline ::World_CreateRole_Request* release_m_stworld_createrole_request();
  inline void set_allocated_m_stworld_createrole_request(::World_CreateRole_Request* m_stworld_createrole_request);

  // optional .World_CreateRole_Response m_stWorld_CreateRole_Response = 33;
  inline bool has_m_stworld_createrole_response() const;
  inline void clear_m_stworld_createrole_response();
  static const int kMStWorldCreateRoleResponseFieldNumber = 33;
  inline const ::World_CreateRole_Response& m_stworld_createrole_response() const;
  inline ::World_CreateRole_Response* mutable_m_stworld_createrole_response();
  inline ::World_CreateRole_Response* release_m_stworld_createrole_response();
  inline void set_allocated_m_stworld_createrole_response(::World_CreateRole_Response* m_stworld_createrole_response);

  // optional .World_FetchRole_Request m_stWorld_FetchRole_Request = 34;
  inline bool has_m_stworld_fetchrole_request() const;
  inline void clear_m_stworld_fetchrole_request();
  static const int kMStWorldFetchRoleRequestFieldNumber = 34;
  inline const ::World_FetchRole_Request& m_stworld_fetchrole_request() const;
  inline ::World_FetchRole_Request* mutable_m_stworld_fetchrole_request();
  inline ::World_FetchRole_Request* release_m_stworld_fetchrole_request();
  inline void set_allocated_m_stworld_fetchrole_request(::World_FetchRole_Request* m_stworld_fetchrole_request);

  // optional .World_FetchRole_Response m_stWorld_FetchRole_Response = 35;
  inline bool has_m_stworld_fetchrole_response() const;
  inline void clear_m_stworld_fetchrole_response();
  static const int kMStWorldFetchRoleResponseFieldNumber = 35;
  inline const ::World_FetchRole_Response& m_stworld_fetchrole_response() const;
  inline ::World_FetchRole_Response* mutable_m_stworld_fetchrole_response();
  inline ::World_FetchRole_Response* release_m_stworld_fetchrole_response();
  inline void set_allocated_m_stworld_fetchrole_response(::World_FetchRole_Response* m_stworld_fetchrole_response);

  // optional .Zone_Logout_Notify m_stZone_Logout_Notify = 36;
  inline bool has_m_stzone_logout_notify() const;
  inline void clear_m_stzone_logout_notify();
  static const int kMStZoneLogoutNotifyFieldNumber = 36;
  inline const ::Zone_Logout_Notify& m_stzone_logout_notify() const;
  inline ::Zone_Logout_Notify* mutable_m_stzone_logout_notify();
  inline ::Zone_Logout_Notify* release_m_stzone_logout_notify();
  inline void set_allocated_m_stzone_logout_notify(::Zone_Logout_Notify* m_stzone_logout_notify);

  // optional .World_UpdateRole_Request m_stWorld_UpdateRole_Request = 37;
  inline bool has_m_stworld_updaterole_request() const;
  inline void clear_m_stworld_updaterole_request();
  static const int kMStWorldUpdateRoleRequestFieldNumber = 37;
  inline const ::World_UpdateRole_Request& m_stworld_updaterole_request() const;
  inline ::World_UpdateRole_Request* mutable_m_stworld_updaterole_request();
  inline ::World_UpdateRole_Request* release_m_stworld_updaterole_request();
  inline void set_allocated_m_stworld_updaterole_request(::World_UpdateRole_Request* m_stworld_updaterole_request);

  // optional .World_UpdateRole_Response m_stWorld_UpdateRole_Response = 38;
  inline bool has_m_stworld_updaterole_response() const;
  inline void clear_m_stworld_updaterole_response();
  static const int kMStWorldUpdateRoleResponseFieldNumber = 38;
  inline const ::World_UpdateRole_Response& m_stworld_updaterole_response() const;
  inline ::World_UpdateRole_Response* mutable_m_stworld_updaterole_response();
  inline ::World_UpdateRole_Response* release_m_stworld_updaterole_response();
  inline void set_allocated_m_stworld_updaterole_response(::World_UpdateRole_Response* m_stworld_updaterole_response);

  // optional .Zone_GetFriendInfo_Request m_stZone_GetFriendInfo_Request = 39;
  inline bool has_m_stzone_getfriendinfo_request() const;
  inline void clear_m_stzone_getfriendinfo_request();
  static const int kMStZoneGetFriendInfoRequestFieldNumber = 39;
  inline const ::Zone_GetFriendInfo_Request& m_stzone_getfriendinfo_request() const;
  inline ::Zone_GetFriendInfo_Request* mutable_m_stzone_getfriendinfo_request();
  inline ::Zone_GetFriendInfo_Request* release_m_stzone_getfriendinfo_request();
  inline void set_allocated_m_stzone_getfriendinfo_request(::Zone_GetFriendInfo_Request* m_stzone_getfriendinfo_request);

  // optional .Zone_GetFriendInfo_Response m_stZone_GetFriendInfo_Response = 40;
  inline bool has_m_stzone_getfriendinfo_response() const;
  inline void clear_m_stzone_getfriendinfo_response();
  static const int kMStZoneGetFriendInfoResponseFieldNumber = 40;
  inline const ::Zone_GetFriendInfo_Response& m_stzone_getfriendinfo_response() const;
  inline ::Zone_GetFriendInfo_Response* mutable_m_stzone_getfriendinfo_response();
  inline ::Zone_GetFriendInfo_Response* release_m_stzone_getfriendinfo_response();
  inline void set_allocated_m_stzone_getfriendinfo_response(::Zone_GetFriendInfo_Response* m_stzone_getfriendinfo_response);

  // optional .Zone_LoginServer_Request m_stZone_LoginServer_Request = 41;
  inline bool has_m_stzone_loginserver_request() const;
  inline void clear_m_stzone_loginserver_request();
  static const int kMStZoneLoginServerRequestFieldNumber = 41;
  inline const ::Zone_LoginServer_Request& m_stzone_loginserver_request() const;
  inline ::Zone_LoginServer_Request* mutable_m_stzone_loginserver_request();
  inline ::Zone_LoginServer_Request* release_m_stzone_loginserver_request();
  inline void set_allocated_m_stzone_loginserver_request(::Zone_LoginServer_Request* m_stzone_loginserver_request);

  // optional .Zone_LoginServer_Response m_stZone_LoginServer_Response = 42;
  inline bool has_m_stzone_loginserver_response() const;
  inline void clear_m_stzone_loginserver_response();
  static const int kMStZoneLoginServerResponseFieldNumber = 42;
  inline const ::Zone_LoginServer_Response& m_stzone_loginserver_response() const;
  inline ::Zone_LoginServer_Response* mutable_m_stzone_loginserver_response();
  inline ::Zone_LoginServer_Response* release_m_stzone_loginserver_response();
  inline void set_allocated_m_stzone_loginserver_response(::Zone_LoginServer_Response* m_stzone_loginserver_response);

  // optional .World_KickRole_Request m_stWorld_KickRole_Request = 43;
  inline bool has_m_stworld_kickrole_request() const;
  inline void clear_m_stworld_kickrole_request();
  static const int kMStWorldKickRoleRequestFieldNumber = 43;
  inline const ::World_KickRole_Request& m_stworld_kickrole_request() const;
  inline ::World_KickRole_Request* mutable_m_stworld_kickrole_request();
  inline ::World_KickRole_Request* release_m_stworld_kickrole_request();
  inline void set_allocated_m_stworld_kickrole_request(::World_KickRole_Request* m_stworld_kickrole_request);

  // optional .World_KickRole_Response m_stWorld_KickRole_Response = 44;
  inline bool has_m_stworld_kickrole_response() const;
  inline void clear_m_stworld_kickrole_response();
  static const int kMStWorldKickRoleResponseFieldNumber = 44;
  inline const ::World_KickRole_Response& m_stworld_kickrole_response() const;
  inline ::World_KickRole_Response* mutable_m_stworld_kickrole_response();
  inline ::World_KickRole_Response* release_m_stworld_kickrole_response();
  inline void set_allocated_m_stworld_kickrole_response(::World_KickRole_Response* m_stworld_kickrole_response);

  // optional .Zone_OnlineRole_Request m_stZone_OnlineRole_Request = 45;
  inline bool has_m_stzone_onlinerole_request() const;
  inline void clear_m_stzone_onlinerole_request();
  static const int kMStZoneOnlineRoleRequestFieldNumber = 45;
  inline const ::Zone_OnlineRole_Request& m_stzone_onlinerole_request() const;
  inline ::Zone_OnlineRole_Request* mutable_m_stzone_onlinerole_request();
  inline ::Zone_OnlineRole_Request* release_m_stzone_onlinerole_request();
  inline void set_allocated_m_stzone_onlinerole_request(::Zone_OnlineRole_Request* m_stzone_onlinerole_request);

  // optional .World_OnlineStat_Request m_stWorld_OnlineStat_Request = 46;
  inline bool has_m_stworld_onlinestat_request() const;
  inline void clear_m_stworld_onlinestat_request();
  static const int kMStWorldOnlineStatRequestFieldNumber = 46;
  inline const ::World_OnlineStat_Request& m_stworld_onlinestat_request() const;
  inline ::World_OnlineStat_Request* mutable_m_stworld_onlinestat_request();
  inline ::World_OnlineStat_Request* release_m_stworld_onlinestat_request();
  inline void set_allocated_m_stworld_onlinestat_request(::World_OnlineStat_Request* m_stworld_onlinestat_request);

  // optional .World_OnlineStat_Response m_stWorld_OnlineStat_Response = 47;
  inline bool has_m_stworld_onlinestat_response() const;
  inline void clear_m_stworld_onlinestat_response();
  static const int kMStWorldOnlineStatResponseFieldNumber = 47;
  inline const ::World_OnlineStat_Response& m_stworld_onlinestat_response() const;
  inline ::World_OnlineStat_Response* mutable_m_stworld_onlinestat_response();
  inline ::World_OnlineStat_Response* release_m_stworld_onlinestat_response();
  inline void set_allocated_m_stworld_onlinestat_response(::World_OnlineStat_Response* m_stworld_onlinestat_response);

  // optional .Zone_GameMaster_Request m_stZone_GameMaster_Request = 48;
  inline bool has_m_stzone_gamemaster_request() const;
  inline void clear_m_stzone_gamemaster_request();
  static const int kMStZoneGameMasterRequestFieldNumber = 48;
  inline const ::Zone_GameMaster_Request& m_stzone_gamemaster_request() const;
  inline ::Zone_GameMaster_Request* mutable_m_stzone_gamemaster_request();
  inline ::Zone_GameMaster_Request* release_m_stzone_gamemaster_request();
  inline void set_allocated_m_stzone_gamemaster_request(::Zone_GameMaster_Request* m_stzone_gamemaster_request);

  // optional .Zone_GameMaster_Response m_stZone_GameMaster_Response = 49;
  inline bool has_m_stzone_gamemaster_response() const;
  inline void clear_m_stzone_gamemaster_response();
  static const int kMStZoneGameMasterResponseFieldNumber = 49;
  inline const ::Zone_GameMaster_Response& m_stzone_gamemaster_response() const;
  inline ::Zone_GameMaster_Response* mutable_m_stzone_gamemaster_response();
  inline ::Zone_GameMaster_Response* release_m_stzone_gamemaster_response();
  inline void set_allocated_m_stzone_gamemaster_response(::Zone_GameMaster_Response* m_stzone_gamemaster_response);

  // optional .AddNewName_Request m_stAddNewName_Request = 50;
  inline bool has_m_staddnewname_request() const;
  inline void clear_m_staddnewname_request();
  static const int kMStAddNewNameRequestFieldNumber = 50;
  inline const ::AddNewName_Request& m_staddnewname_request() const;
  inline ::AddNewName_Request* mutable_m_staddnewname_request();
  inline ::AddNewName_Request* release_m_staddnewname_request();
  inline void set_allocated_m_staddnewname_request(::AddNewName_Request* m_staddnewname_request);

  // optional .AddNewName_Response m_stAddNewName_Response = 51;
  inline bool has_m_staddnewname_response() const;
  inline void clear_m_staddnewname_response();
  static const int kMStAddNewNameResponseFieldNumber = 51;
  inline const ::AddNewName_Response& m_staddnewname_response() const;
  inline ::AddNewName_Response* mutable_m_staddnewname_response();
  inline ::AddNewName_Response* release_m_staddnewname_response();
  inline void set_allocated_m_staddnewname_response(::AddNewName_Response* m_staddnewname_response);

  // optional .DeleteName_Request m_stDeleteName_Request = 52;
  inline bool has_m_stdeletename_request() const;
  inline void clear_m_stdeletename_request();
  static const int kMStDeleteNameRequestFieldNumber = 52;
  inline const ::DeleteName_Request& m_stdeletename_request() const;
  inline ::DeleteName_Request* mutable_m_stdeletename_request();
  inline ::DeleteName_Request* release_m_stdeletename_request();
  inline void set_allocated_m_stdeletename_request(::DeleteName_Request* m_stdeletename_request);

  // optional .DeleteName_Response m_stDeleteName_Response = 53;
  inline bool has_m_stdeletename_response() const;
  inline void clear_m_stdeletename_response();
  static const int kMStDeleteNameResponseFieldNumber = 53;
  inline const ::DeleteName_Response& m_stdeletename_response() const;
  inline ::DeleteName_Response* mutable_m_stdeletename_response();
  inline ::DeleteName_Response* release_m_stdeletename_response();
  inline void set_allocated_m_stdeletename_response(::DeleteName_Response* m_stdeletename_response);

  // optional .Zone_LoginServer_Notify m_stLoginServer_Notify = 57;
  inline bool has_m_stloginserver_notify() const;
  inline void clear_m_stloginserver_notify();
  static const int kMStLoginServerNotifyFieldNumber = 57;
  inline const ::Zone_LoginServer_Notify& m_stloginserver_notify() const;
  inline ::Zone_LoginServer_Notify* mutable_m_stloginserver_notify();
  inline ::Zone_LoginServer_Notify* release_m_stloginserver_notify();
  inline void set_allocated_m_stloginserver_notify(::Zone_LoginServer_Notify* m_stloginserver_notify);

  // optional .Zone_RepOpera_Request m_stZone_RepOpera_Request = 64;
  inline bool has_m_stzone_repopera_request() const;
  inline void clear_m_stzone_repopera_request();
  static const int kMStZoneRepOperaRequestFieldNumber = 64;
  inline const ::Zone_RepOpera_Request& m_stzone_repopera_request() const;
  inline ::Zone_RepOpera_Request* mutable_m_stzone_repopera_request();
  inline ::Zone_RepOpera_Request* release_m_stzone_repopera_request();
  inline void set_allocated_m_stzone_repopera_request(::Zone_RepOpera_Request* m_stzone_repopera_request);

  // optional .Zone_RepOpera_Response m_stZone_RepOpera_Response = 65;
  inline bool has_m_stzone_repopera_response() const;
  inline void clear_m_stzone_repopera_response();
  static const int kMStZoneRepOperaResponseFieldNumber = 65;
  inline const ::Zone_RepOpera_Response& m_stzone_repopera_response() const;
  inline ::Zone_RepOpera_Response* mutable_m_stzone_repopera_response();
  inline ::Zone_RepOpera_Response* release_m_stzone_repopera_response();
  inline void set_allocated_m_stzone_repopera_response(::Zone_RepOpera_Response* m_stzone_repopera_response);

  // optional .Zone_GetRepInfo_Request m_stZone_GetRepInfo_Request = 66;
  inline bool has_m_stzone_getrepinfo_request() const;
  inline void clear_m_stzone_getrepinfo_request();
  static const int kMStZoneGetRepInfoRequestFieldNumber = 66;
  inline const ::Zone_GetRepInfo_Request& m_stzone_getrepinfo_request() const;
  inline ::Zone_GetRepInfo_Request* mutable_m_stzone_getrepinfo_request();
  inline ::Zone_GetRepInfo_Request* release_m_stzone_getrepinfo_request();
  inline void set_allocated_m_stzone_getrepinfo_request(::Zone_GetRepInfo_Request* m_stzone_getrepinfo_request);

  // optional .Zone_GetRepInfo_Response m_stZone_GetRepInfo_Response = 67;
  inline bool has_m_stzone_getrepinfo_response() const;
  inline void clear_m_stzone_getrepinfo_response();
  static const int kMStZoneGetRepInfoResponseFieldNumber = 67;
  inline const ::Zone_GetRepInfo_Response& m_stzone_getrepinfo_response() const;
  inline ::Zone_GetRepInfo_Response* mutable_m_stzone_getrepinfo_response();
  inline ::Zone_GetRepInfo_Response* release_m_stzone_getrepinfo_response();
  inline void set_allocated_m_stzone_getrepinfo_response(::Zone_GetRepInfo_Response* m_stzone_getrepinfo_response);

  // optional .Zone_WearEquip_Request m_stZone_WearEquip_Request = 68;
  inline bool has_m_stzone_wearequip_request() const;
  inline void clear_m_stzone_wearequip_request();
  static const int kMStZoneWearEquipRequestFieldNumber = 68;
  inline const ::Zone_WearEquip_Request& m_stzone_wearequip_request() const;
  inline ::Zone_WearEquip_Request* mutable_m_stzone_wearequip_request();
  inline ::Zone_WearEquip_Request* release_m_stzone_wearequip_request();
  inline void set_allocated_m_stzone_wearequip_request(::Zone_WearEquip_Request* m_stzone_wearequip_request);

  // optional .Zone_WearEquip_Response m_stZone_WearEquip_Response = 69;
  inline bool has_m_stzone_wearequip_response() const;
  inline void clear_m_stzone_wearequip_response();
  static const int kMStZoneWearEquipResponseFieldNumber = 69;
  inline const ::Zone_WearEquip_Response& m_stzone_wearequip_response() const;
  inline ::Zone_WearEquip_Response* mutable_m_stzone_wearequip_response();
  inline ::Zone_WearEquip_Response* release_m_stzone_wearequip_response();
  inline void set_allocated_m_stzone_wearequip_response(::Zone_WearEquip_Response* m_stzone_wearequip_response);

  // optional .Zone_RepChange_Notify m_stZone_RepChange_Notify = 70;
  inline bool has_m_stzone_repchange_notify() const;
  inline void clear_m_stzone_repchange_notify();
  static const int kMStZoneRepChangeNotifyFieldNumber = 70;
  inline const ::Zone_RepChange_Notify& m_stzone_repchange_notify() const;
  inline ::Zone_RepChange_Notify* mutable_m_stzone_repchange_notify();
  inline ::Zone_RepChange_Notify* release_m_stzone_repchange_notify();
  inline void set_allocated_m_stzone_repchange_notify(::Zone_RepChange_Notify* m_stzone_repchange_notify);

  // optional .Zone_ResourceChange_Notify m_stZone_ResourceChange_Notify = 73;
  inline bool has_m_stzone_resourcechange_notify() const;
  inline void clear_m_stzone_resourcechange_notify();
  static const int kMStZoneResourceChangeNotifyFieldNumber = 73;
  inline const ::Zone_ResourceChange_Notify& m_stzone_resourcechange_notify() const;
  inline ::Zone_ResourceChange_Notify* mutable_m_stzone_resourcechange_notify();
  inline ::Zone_ResourceChange_Notify* release_m_stzone_resourcechange_notify();
  inline void set_allocated_m_stzone_resourcechange_notify(::Zone_ResourceChange_Notify* m_stzone_resourcechange_notify);

  // optional .Zone_Chat_Request m_stZone_Chat_Request = 76;
  inline bool has_m_stzone_chat_request() const;
  inline void clear_m_stzone_chat_request();
  static const int kMStZoneChatRequestFieldNumber = 76;
  inline const ::Zone_Chat_Request& m_stzone_chat_request() const;
  inline ::Zone_Chat_Request* mutable_m_stzone_chat_request();
  inline ::Zone_Chat_Request* release_m_stzone_chat_request();
  inline void set_allocated_m_stzone_chat_request(::Zone_Chat_Request* m_stzone_chat_request);

  // optional .Zone_Chat_Response m_stZone_Chat_Response = 77;
  inline bool has_m_stzone_chat_response() const;
  inline void clear_m_stzone_chat_response();
  static const int kMStZoneChatResponseFieldNumber = 77;
  inline const ::Zone_Chat_Response& m_stzone_chat_response() const;
  inline ::Zone_Chat_Response* mutable_m_stzone_chat_response();
  inline ::Zone_Chat_Response* release_m_stzone_chat_response();
  inline void set_allocated_m_stzone_chat_response(::Zone_Chat_Response* m_stzone_chat_response);

  // optional .World_Chat_Notify m_stWorld_Chat_Notify = 78;
  inline bool has_m_stworld_chat_notify() const;
  inline void clear_m_stworld_chat_notify();
  static const int kMStWorldChatNotifyFieldNumber = 78;
  inline const ::World_Chat_Notify& m_stworld_chat_notify() const;
  inline ::World_Chat_Notify* mutable_m_stworld_chat_notify();
  inline ::World_Chat_Notify* release_m_stworld_chat_notify();
  inline void set_allocated_m_stworld_chat_notify(::World_Chat_Notify* m_stworld_chat_notify);

  // optional .Zone_SellItem_Request m_stZone_SellItem_Request = 79;
  inline bool has_m_stzone_sellitem_request() const;
  inline void clear_m_stzone_sellitem_request();
  static const int kMStZoneSellItemRequestFieldNumber = 79;
  inline const ::Zone_SellItem_Request& m_stzone_sellitem_request() const;
  inline ::Zone_SellItem_Request* mutable_m_stzone_sellitem_request();
  inline ::Zone_SellItem_Request* release_m_stzone_sellitem_request();
  inline void set_allocated_m_stzone_sellitem_request(::Zone_SellItem_Request* m_stzone_sellitem_request);

  // optional .Zone_SellItem_Response m_stZone_SellItem_Response = 80;
  inline bool has_m_stzone_sellitem_response() const;
  inline void clear_m_stzone_sellitem_response();
  static const int kMStZoneSellItemResponseFieldNumber = 80;
  inline const ::Zone_SellItem_Response& m_stzone_sellitem_response() const;
  inline ::Zone_SellItem_Response* mutable_m_stzone_sellitem_response();
  inline ::Zone_SellItem_Response* release_m_stzone_sellitem_response();
  inline void set_allocated_m_stzone_sellitem_response(::Zone_SellItem_Response* m_stzone_sellitem_response);

  // optional .Zone_DoCombat_Request m_stZone_DoCombat_Request = 81;
  inline bool has_m_stzone_docombat_request() const;
  inline void clear_m_stzone_docombat_request();
  static const int kMStZoneDoCombatRequestFieldNumber = 81;
  inline const ::Zone_DoCombat_Request& m_stzone_docombat_request() const;
  inline ::Zone_DoCombat_Request* mutable_m_stzone_docombat_request();
  inline ::Zone_DoCombat_Request* release_m_stzone_docombat_request();
  inline void set_allocated_m_stzone_docombat_request(::Zone_DoCombat_Request* m_stzone_docombat_request);

  // optional .Zone_DoCombat_Response m_stZone_DoCombat_Response = 82;
  inline bool has_m_stzone_docombat_response() const;
  inline void clear_m_stzone_docombat_response();
  static const int kMStZoneDoCombatResponseFieldNumber = 82;
  inline const ::Zone_DoCombat_Response& m_stzone_docombat_response() const;
  inline ::Zone_DoCombat_Response* mutable_m_stzone_docombat_response();
  inline ::Zone_DoCombat_Response* release_m_stzone_docombat_response();
  inline void set_allocated_m_stzone_docombat_response(::Zone_DoCombat_Response* m_stzone_docombat_response);

  // optional .Zone_Battlefield_Notify m_stZone_Battlefield_Notify = 83;
  inline bool has_m_stzone_battlefield_notify() const;
  inline void clear_m_stzone_battlefield_notify();
  static const int kMStZoneBattlefieldNotifyFieldNumber = 83;
  inline const ::Zone_Battlefield_Notify& m_stzone_battlefield_notify() const;
  inline ::Zone_Battlefield_Notify* mutable_m_stzone_battlefield_notify();
  inline ::Zone_Battlefield_Notify* release_m_stzone_battlefield_notify();
  inline void set_allocated_m_stzone_battlefield_notify(::Zone_Battlefield_Notify* m_stzone_battlefield_notify);

  // optional .Zone_CombatMove_Request m_stZone_CombatMove_Request = 84;
  inline bool has_m_stzone_combatmove_request() const;
  inline void clear_m_stzone_combatmove_request();
  static const int kMStZoneCombatMoveRequestFieldNumber = 84;
  inline const ::Zone_CombatMove_Request& m_stzone_combatmove_request() const;
  inline ::Zone_CombatMove_Request* mutable_m_stzone_combatmove_request();
  inline ::Zone_CombatMove_Request* release_m_stzone_combatmove_request();
  inline void set_allocated_m_stzone_combatmove_request(::Zone_CombatMove_Request* m_stzone_combatmove_request);

  // optional .Zone_CombatMove_Response m_stZone_CombatMove_Response = 85;
  inline bool has_m_stzone_combatmove_response() const;
  inline void clear_m_stzone_combatmove_response();
  static const int kMStZoneCombatMoveResponseFieldNumber = 85;
  inline const ::Zone_CombatMove_Response& m_stzone_combatmove_response() const;
  inline ::Zone_CombatMove_Response* mutable_m_stzone_combatmove_response();
  inline ::Zone_CombatMove_Response* release_m_stzone_combatmove_response();
  inline void set_allocated_m_stzone_combatmove_response(::Zone_CombatMove_Response* m_stzone_combatmove_response);

  // optional .Zone_CombatAction_Request m_stZone_CombatAction_Request = 86;
  inline bool has_m_stzone_combataction_request() const;
  inline void clear_m_stzone_combataction_request();
  static const int kMStZoneCombatActionRequestFieldNumber = 86;
  inline const ::Zone_CombatAction_Request& m_stzone_combataction_request() const;
  inline ::Zone_CombatAction_Request* mutable_m_stzone_combataction_request();
  inline ::Zone_CombatAction_Request* release_m_stzone_combataction_request();
  inline void set_allocated_m_stzone_combataction_request(::Zone_CombatAction_Request* m_stzone_combataction_request);

  // optional .Zone_CombatAction_Response m_stZone_CombatAction_Response = 87;
  inline bool has_m_stzone_combataction_response() const;
  inline void clear_m_stzone_combataction_response();
  static const int kMStZoneCombatActionResponseFieldNumber = 87;
  inline const ::Zone_CombatAction_Response& m_stzone_combataction_response() const;
  inline ::Zone_CombatAction_Response* mutable_m_stzone_combataction_response();
  inline ::Zone_CombatAction_Response* release_m_stzone_combataction_response();
  inline void set_allocated_m_stzone_combataction_response(::Zone_CombatAction_Response* m_stzone_combataction_response);

  // optional .Zone_CombatMove_Notify m_stZone_CombatMove_Notify = 92;
  inline bool has_m_stzone_combatmove_notify() const;
  inline void clear_m_stzone_combatmove_notify();
  static const int kMStZoneCombatMoveNotifyFieldNumber = 92;
  inline const ::Zone_CombatMove_Notify& m_stzone_combatmove_notify() const;
  inline ::Zone_CombatMove_Notify* mutable_m_stzone_combatmove_notify();
  inline ::Zone_CombatMove_Notify* release_m_stzone_combatmove_notify();
  inline void set_allocated_m_stzone_combatmove_notify(::Zone_CombatMove_Notify* m_stzone_combatmove_notify);

  // optional .Zone_CombatAction_Notify m_stZone_CombatAction_Notify = 93;
  inline bool has_m_stzone_combataction_notify() const;
  inline void clear_m_stzone_combataction_notify();
  static const int kMStZoneCombatActionNotifyFieldNumber = 93;
  inline const ::Zone_CombatAction_Notify& m_stzone_combataction_notify() const;
  inline ::Zone_CombatAction_Notify* mutable_m_stzone_combataction_notify();
  inline ::Zone_CombatAction_Notify* release_m_stzone_combataction_notify();
  inline void set_allocated_m_stzone_combataction_notify(::Zone_CombatAction_Notify* m_stzone_combataction_notify);

  // optional .Zone_FinCombat_Notify m_stZone_FinCombat_Notify = 94;
  inline bool has_m_stzone_fincombat_notify() const;
  inline void clear_m_stzone_fincombat_notify();
  static const int kMStZoneFinCombatNotifyFieldNumber = 94;
  inline const ::Zone_FinCombat_Notify& m_stzone_fincombat_notify() const;
  inline ::Zone_FinCombat_Notify* mutable_m_stzone_fincombat_notify();
  inline ::Zone_FinCombat_Notify* release_m_stzone_fincombat_notify();
  inline void set_allocated_m_stzone_fincombat_notify(::Zone_FinCombat_Notify* m_stzone_fincombat_notify);

  // optional .Zone_UnitDirective_Notify m_stZone_UnitDirective_Notify = 95;
  inline bool has_m_stzone_unitdirective_notify() const;
  inline void clear_m_stzone_unitdirective_notify();
  static const int kMStZoneUnitDirectiveNotifyFieldNumber = 95;
  inline const ::Zone_UnitDirective_Notify& m_stzone_unitdirective_notify() const;
  inline ::Zone_UnitDirective_Notify* mutable_m_stzone_unitdirective_notify();
  inline ::Zone_UnitDirective_Notify* release_m_stzone_unitdirective_notify();
  inline void set_allocated_m_stzone_unitdirective_notify(::Zone_UnitDirective_Notify* m_stzone_unitdirective_notify);

  // optional .Zone_UpdatePartnerAI_Request m_stZone_UpdatePartnerAI_Request = 111;
  inline bool has_m_stzone_updatepartnerai_request() const;
  inline void clear_m_stzone_updatepartnerai_request();
  static const int kMStZoneUpdatePartnerAIRequestFieldNumber = 111;
  inline const ::Zone_UpdatePartnerAI_Request& m_stzone_updatepartnerai_request() const;
  inline ::Zone_UpdatePartnerAI_Request* mutable_m_stzone_updatepartnerai_request();
  inline ::Zone_UpdatePartnerAI_Request* release_m_stzone_updatepartnerai_request();
  inline void set_allocated_m_stzone_updatepartnerai_request(::Zone_UpdatePartnerAI_Request* m_stzone_updatepartnerai_request);

  // optional .Zone_UpdatePartnerAI_Response m_stZone_UpdatePartnerAI_Response = 112;
  inline bool has_m_stzone_updatepartnerai_response() const;
  inline void clear_m_stzone_updatepartnerai_response();
  static const int kMStZoneUpdatePartnerAIResponseFieldNumber = 112;
  inline const ::Zone_UpdatePartnerAI_Response& m_stzone_updatepartnerai_response() const;
  inline ::Zone_UpdatePartnerAI_Response* mutable_m_stzone_updatepartnerai_response();
  inline ::Zone_UpdatePartnerAI_Response* release_m_stzone_updatepartnerai_response();
  inline void set_allocated_m_stzone_updatepartnerai_response(::Zone_UpdatePartnerAI_Response* m_stzone_updatepartnerai_response);

  // optional .Zone_CombatAddBuff_Notify m_stZone_CombatAddBuff_Notify = 113;
  inline bool has_m_stzone_combataddbuff_notify() const;
  inline void clear_m_stzone_combataddbuff_notify();
  static const int kMStZoneCombatAddBuffNotifyFieldNumber = 113;
  inline const ::Zone_CombatAddBuff_Notify& m_stzone_combataddbuff_notify() const;
  inline ::Zone_CombatAddBuff_Notify* mutable_m_stzone_combataddbuff_notify();
  inline ::Zone_CombatAddBuff_Notify* release_m_stzone_combataddbuff_notify();
  inline void set_allocated_m_stzone_combataddbuff_notify(::Zone_CombatAddBuff_Notify* m_stzone_combataddbuff_notify);

  // optional .Zone_DoBuffEffect_Notify m_stZone_DoBuffEffect_Notify = 114;
  inline bool has_m_stzone_dobuffeffect_notify() const;
  inline void clear_m_stzone_dobuffeffect_notify();
  static const int kMStZoneDoBuffEffectNotifyFieldNumber = 114;
  inline const ::Zone_DoBuffEffect_Notify& m_stzone_dobuffeffect_notify() const;
  inline ::Zone_DoBuffEffect_Notify* mutable_m_stzone_dobuffeffect_notify();
  inline ::Zone_DoBuffEffect_Notify* release_m_stzone_dobuffeffect_notify();
  inline void set_allocated_m_stzone_dobuffeffect_notify(::Zone_DoBuffEffect_Notify* m_stzone_dobuffeffect_notify);

  // optional .Zone_RemoveBuff_Notify m_stZone_RemoveBuff_Notify = 115;
  inline bool has_m_stzone_removebuff_notify() const;
  inline void clear_m_stzone_removebuff_notify();
  static const int kMStZoneRemoveBuffNotifyFieldNumber = 115;
  inline const ::Zone_RemoveBuff_Notify& m_stzone_removebuff_notify() const;
  inline ::Zone_RemoveBuff_Notify* mutable_m_stzone_removebuff_notify();
  inline ::Zone_RemoveBuff_Notify* release_m_stzone_removebuff_notify();
  inline void set_allocated_m_stzone_removebuff_notify(::Zone_RemoveBuff_Notify* m_stzone_removebuff_notify);

  // optional .Zone_AddCombatUnit_Notify m_stZone_AddCombatUnit_Notify = 148;
  inline bool has_m_stzone_addcombatunit_notify() const;
  inline void clear_m_stzone_addcombatunit_notify();
  static const int kMStZoneAddCombatUnitNotifyFieldNumber = 148;
  inline const ::Zone_AddCombatUnit_Notify& m_stzone_addcombatunit_notify() const;
  inline ::Zone_AddCombatUnit_Notify* mutable_m_stzone_addcombatunit_notify();
  inline ::Zone_AddCombatUnit_Notify* release_m_stzone_addcombatunit_notify();
  inline void set_allocated_m_stzone_addcombatunit_notify(::Zone_AddCombatUnit_Notify* m_stzone_addcombatunit_notify);

  // optional .Zone_KillCombatUnit_Notify m_stZone_KillCombatUnit_Notify = 149;
  inline bool has_m_stzone_killcombatunit_notify() const;
  inline void clear_m_stzone_killcombatunit_notify();
  static const int kMStZoneKillCombatUnitNotifyFieldNumber = 149;
  inline const ::Zone_KillCombatUnit_Notify& m_stzone_killcombatunit_notify() const;
  inline ::Zone_KillCombatUnit_Notify* mutable_m_stzone_killcombatunit_notify();
  inline ::Zone_KillCombatUnit_Notify* release_m_stzone_killcombatunit_notify();
  inline void set_allocated_m_stzone_killcombatunit_notify(::Zone_KillCombatUnit_Notify* m_stzone_killcombatunit_notify);

  // optional .Zone_AddCombatTrap_Notify m_stZone_AddCombatTrap_Notify = 154;
  inline bool has_m_stzone_addcombattrap_notify() const;
  inline void clear_m_stzone_addcombattrap_notify();
  static const int kMStZoneAddCombatTrapNotifyFieldNumber = 154;
  inline const ::Zone_AddCombatTrap_Notify& m_stzone_addcombattrap_notify() const;
  inline ::Zone_AddCombatTrap_Notify* mutable_m_stzone_addcombattrap_notify();
  inline ::Zone_AddCombatTrap_Notify* release_m_stzone_addcombattrap_notify();
  inline void set_allocated_m_stzone_addcombattrap_notify(::Zone_AddCombatTrap_Notify* m_stzone_addcombattrap_notify);

  // optional .Zone_TriggerCombatTrap_Notify m_stZone_TriggerCombatTrap_Notify = 155;
  inline bool has_m_stzone_triggercombattrap_notify() const;
  inline void clear_m_stzone_triggercombattrap_notify();
  static const int kMStZoneTriggerCombatTrapNotifyFieldNumber = 155;
  inline const ::Zone_TriggerCombatTrap_Notify& m_stzone_triggercombattrap_notify() const;
  inline ::Zone_TriggerCombatTrap_Notify* mutable_m_stzone_triggercombattrap_notify();
  inline ::Zone_TriggerCombatTrap_Notify* release_m_stzone_triggercombattrap_notify();
  inline void set_allocated_m_stzone_triggercombattrap_notify(::Zone_TriggerCombatTrap_Notify* m_stzone_triggercombattrap_notify);

  // optional .Zone_DeleteCombatTrap_Notify m_stZone_DeleteCombatTrap_Notify = 156;
  inline bool has_m_stzone_deletecombattrap_notify() const;
  inline void clear_m_stzone_deletecombattrap_notify();
  static const int kMStZoneDeleteCombatTrapNotifyFieldNumber = 156;
  inline const ::Zone_DeleteCombatTrap_Notify& m_stzone_deletecombattrap_notify() const;
  inline ::Zone_DeleteCombatTrap_Notify* mutable_m_stzone_deletecombattrap_notify();
  inline ::Zone_DeleteCombatTrap_Notify* release_m_stzone_deletecombattrap_notify();
  inline void set_allocated_m_stzone_deletecombattrap_notify(::Zone_DeleteCombatTrap_Notify* m_stzone_deletecombattrap_notify);

  // optional .Zone_UnitAttrChange_Notify m_stZone_UnitAttrChange_Notify = 157;
  inline bool has_m_stzone_unitattrchange_notify() const;
  inline void clear_m_stzone_unitattrchange_notify();
  static const int kMStZoneUnitAttrChangeNotifyFieldNumber = 157;
  inline const ::Zone_UnitAttrChange_Notify& m_stzone_unitattrchange_notify() const;
  inline ::Zone_UnitAttrChange_Notify* mutable_m_stzone_unitattrchange_notify();
  inline ::Zone_UnitAttrChange_Notify* release_m_stzone_unitattrchange_notify();
  inline void set_allocated_m_stzone_unitattrchange_notify(::Zone_UnitAttrChange_Notify* m_stzone_unitattrchange_notify);

  // optional .Zone_StartPVPCombat_Request m_stZone_StartPVPCombat_Request = 158;
  inline bool has_m_stzone_startpvpcombat_request() const;
  inline void clear_m_stzone_startpvpcombat_request();
  static const int kMStZoneStartPVPCombatRequestFieldNumber = 158;
  inline const ::Zone_StartPVPCombat_Request& m_stzone_startpvpcombat_request() const;
  inline ::Zone_StartPVPCombat_Request* mutable_m_stzone_startpvpcombat_request();
  inline ::Zone_StartPVPCombat_Request* release_m_stzone_startpvpcombat_request();
  inline void set_allocated_m_stzone_startpvpcombat_request(::Zone_StartPVPCombat_Request* m_stzone_startpvpcombat_request);

  // optional .Zone_StartPVPCombat_Response m_stZone_StartPVPCombat_Response = 159;
  inline bool has_m_stzone_startpvpcombat_response() const;
  inline void clear_m_stzone_startpvpcombat_response();
  static const int kMStZoneStartPVPCombatResponseFieldNumber = 159;
  inline const ::Zone_StartPVPCombat_Response& m_stzone_startpvpcombat_response() const;
  inline ::Zone_StartPVPCombat_Response* mutable_m_stzone_startpvpcombat_response();
  inline ::Zone_StartPVPCombat_Response* release_m_stzone_startpvpcombat_response();
  inline void set_allocated_m_stzone_startpvpcombat_response(::Zone_StartPVPCombat_Response* m_stzone_startpvpcombat_response);

  // optional .Zone_StartPVPCombat_Notify m_stZone_StartPVPCombat_Notify = 160;
  inline bool has_m_stzone_startpvpcombat_notify() const;
  inline void clear_m_stzone_startpvpcombat_notify();
  static const int kMStZoneStartPVPCombatNotifyFieldNumber = 160;
  inline const ::Zone_StartPVPCombat_Notify& m_stzone_startpvpcombat_notify() const;
  inline ::Zone_StartPVPCombat_Notify* mutable_m_stzone_startpvpcombat_notify();
  inline ::Zone_StartPVPCombat_Notify* release_m_stzone_startpvpcombat_notify();
  inline void set_allocated_m_stzone_startpvpcombat_notify(::Zone_StartPVPCombat_Notify* m_stzone_startpvpcombat_notify);

  // optional .Zone_AcceptPVPCombat_Request m_stZone_AcceptPVPCombat_Request = 161;
  inline bool has_m_stzone_acceptpvpcombat_request() const;
  inline void clear_m_stzone_acceptpvpcombat_request();
  static const int kMStZoneAcceptPVPCombatRequestFieldNumber = 161;
  inline const ::Zone_AcceptPVPCombat_Request& m_stzone_acceptpvpcombat_request() const;
  inline ::Zone_AcceptPVPCombat_Request* mutable_m_stzone_acceptpvpcombat_request();
  inline ::Zone_AcceptPVPCombat_Request* release_m_stzone_acceptpvpcombat_request();
  inline void set_allocated_m_stzone_acceptpvpcombat_request(::Zone_AcceptPVPCombat_Request* m_stzone_acceptpvpcombat_request);

  // optional .Zone_AcceptPVPCombat_Response m_stZone_AcceptPVPCombat_Response = 162;
  inline bool has_m_stzone_acceptpvpcombat_response() const;
  inline void clear_m_stzone_acceptpvpcombat_response();
  static const int kMStZoneAcceptPVPCombatResponseFieldNumber = 162;
  inline const ::Zone_AcceptPVPCombat_Response& m_stzone_acceptpvpcombat_response() const;
  inline ::Zone_AcceptPVPCombat_Response* mutable_m_stzone_acceptpvpcombat_response();
  inline ::Zone_AcceptPVPCombat_Response* release_m_stzone_acceptpvpcombat_response();
  inline void set_allocated_m_stzone_acceptpvpcombat_response(::Zone_AcceptPVPCombat_Response* m_stzone_acceptpvpcombat_response);

  // optional .Zone_SetCombatForm_Request m_stZone_SetCombatForm_Request = 168;
  inline bool has_m_stzone_setcombatform_request() const;
  inline void clear_m_stzone_setcombatform_request();
  static const int kMStZoneSetCombatFormRequestFieldNumber = 168;
  inline const ::Zone_SetCombatForm_Request& m_stzone_setcombatform_request() const;
  inline ::Zone_SetCombatForm_Request* mutable_m_stzone_setcombatform_request();
  inline ::Zone_SetCombatForm_Request* release_m_stzone_setcombatform_request();
  inline void set_allocated_m_stzone_setcombatform_request(::Zone_SetCombatForm_Request* m_stzone_setcombatform_request);

  // optional .Zone_SetCombatForm_Response m_stZone_SetCombatForm_Response = 169;
  inline bool has_m_stzone_setcombatform_response() const;
  inline void clear_m_stzone_setcombatform_response();
  static const int kMStZoneSetCombatFormResponseFieldNumber = 169;
  inline const ::Zone_SetCombatForm_Response& m_stzone_setcombatform_response() const;
  inline ::Zone_SetCombatForm_Response* mutable_m_stzone_setcombatform_response();
  inline ::Zone_SetCombatForm_Response* release_m_stzone_setcombatform_response();
  inline void set_allocated_m_stzone_setcombatform_response(::Zone_SetCombatForm_Response* m_stzone_setcombatform_response);

  // optional .Zone_SetCombatForm_Notify m_stZone_SetCombatForm_Notify = 170;
  inline bool has_m_stzone_setcombatform_notify() const;
  inline void clear_m_stzone_setcombatform_notify();
  static const int kMStZoneSetCombatFormNotifyFieldNumber = 170;
  inline const ::Zone_SetCombatForm_Notify& m_stzone_setcombatform_notify() const;
  inline ::Zone_SetCombatForm_Notify* mutable_m_stzone_setcombatform_notify();
  inline ::Zone_SetCombatForm_Notify* release_m_stzone_setcombatform_notify();
  inline void set_allocated_m_stzone_setcombatform_notify(::Zone_SetCombatForm_Notify* m_stzone_setcombatform_notify);

  // optional .Zone_RejectPVPCombat_Notify m_stZone_RejectPVPCombat_Notify = 175;
  inline bool has_m_stzone_rejectpvpcombat_notify() const;
  inline void clear_m_stzone_rejectpvpcombat_notify();
  static const int kMStZoneRejectPVPCombatNotifyFieldNumber = 175;
  inline const ::Zone_RejectPVPCombat_Notify& m_stzone_rejectpvpcombat_notify() const;
  inline ::Zone_RejectPVPCombat_Notify* mutable_m_stzone_rejectpvpcombat_notify();
  inline ::Zone_RejectPVPCombat_Notify* release_m_stzone_rejectpvpcombat_notify();
  inline void set_allocated_m_stzone_rejectpvpcombat_notify(::Zone_RejectPVPCombat_Notify* m_stzone_rejectpvpcombat_notify);

  // optional .Zone_DecreaseUnitBuff_Notify m_stZone_DecreaseUnitBuff_Notify = 176;
  inline bool has_m_stzone_decreaseunitbuff_notify() const;
  inline void clear_m_stzone_decreaseunitbuff_notify();
  static const int kMStZoneDecreaseUnitBuffNotifyFieldNumber = 176;
  inline const ::Zone_DecreaseUnitBuff_Notify& m_stzone_decreaseunitbuff_notify() const;
  inline ::Zone_DecreaseUnitBuff_Notify* mutable_m_stzone_decreaseunitbuff_notify();
  inline ::Zone_DecreaseUnitBuff_Notify* release_m_stzone_decreaseunitbuff_notify();
  inline void set_allocated_m_stzone_decreaseunitbuff_notify(::Zone_DecreaseUnitBuff_Notify* m_stzone_decreaseunitbuff_notify);

  // optional .Zone_ActionUnitInfo_Notify m_stZone_ActionUnitInfo_Notify = 177;
  inline bool has_m_stzone_actionunitinfo_notify() const;
  inline void clear_m_stzone_actionunitinfo_notify();
  static const int kMStZoneActionUnitInfoNotifyFieldNumber = 177;
  inline const ::Zone_ActionUnitInfo_Notify& m_stzone_actionunitinfo_notify() const;
  inline ::Zone_ActionUnitInfo_Notify* mutable_m_stzone_actionunitinfo_notify();
  inline ::Zone_ActionUnitInfo_Notify* release_m_stzone_actionunitinfo_notify();
  inline void set_allocated_m_stzone_actionunitinfo_notify(::Zone_ActionUnitInfo_Notify* m_stzone_actionunitinfo_notify);

  // optional .Zone_SkillCDRound_Notify m_stZone_SkillCDRound_Notify = 188;
  inline bool has_m_stzone_skillcdround_notify() const;
  inline void clear_m_stzone_skillcdround_notify();
  static const int kMStZoneSkillCDRoundNotifyFieldNumber = 188;
  inline const ::Zone_SkillCDRound_Notify& m_stzone_skillcdround_notify() const;
  inline ::Zone_SkillCDRound_Notify* mutable_m_stzone_skillcdround_notify();
  inline ::Zone_SkillCDRound_Notify* release_m_stzone_skillcdround_notify();
  inline void set_allocated_m_stzone_skillcdround_notify(::Zone_SkillCDRound_Notify* m_stzone_skillcdround_notify);

  // @@protoc_insertion_point(class_scope:GameProtocol.CS.CSMsgBody)
 private:
  inline void set_has_m_staccountdb_addaccount_request();
  inline void clear_has_m_staccountdb_addaccount_request();
  inline void set_has_m_staccountdb_addaccount_response();
  inline void clear_has_m_staccountdb_addaccount_response();
  inline void set_has_m_staccountdb_delete_request();
  inline void clear_has_m_staccountdb_delete_request();
  inline void set_has_m_staccountdb_delete_response();
  inline void clear_has_m_staccountdb_delete_response();
  inline void set_has_m_staccountdb_fetch_request();
  inline void clear_has_m_staccountdb_fetch_request();
  inline void set_has_m_staccountdb_fetch_response();
  inline void clear_has_m_staccountdb_fetch_response();
  inline void set_has_m_staccountdb_update_request();
  inline void clear_has_m_staccountdb_update_request();
  inline void set_has_m_staccountdb_update_response();
  inline void clear_has_m_staccountdb_update_response();
  inline void set_has_m_stregauth_regaccount_request();
  inline void clear_has_m_stregauth_regaccount_request();
  inline void set_has_m_stregauth_regaccount_response();
  inline void clear_has_m_stregauth_regaccount_response();
  inline void set_has_m_stregauth_authaccount_request();
  inline void clear_has_m_stregauth_authaccount_request();
  inline void set_has_m_stregauth_authaccount_response();
  inline void clear_has_m_stregauth_authaccount_response();
  inline void set_has_m_stregauth_updateaccount_request();
  inline void clear_has_m_stregauth_updateaccount_request();
  inline void set_has_m_stregauth_updateaccount_response();
  inline void clear_has_m_stregauth_updateaccount_response();
  inline void set_has_m_staccountcreaterolerequest();
  inline void clear_has_m_staccountcreaterolerequest();
  inline void set_has_m_staccountcreateroleresponse();
  inline void clear_has_m_staccountcreateroleresponse();
  inline void set_has_m_staccount_listzone_request();
  inline void clear_has_m_staccount_listzone_request();
  inline void set_has_m_staccount_listzone_response();
  inline void clear_has_m_staccount_listzone_response();
  inline void set_has_m_staccountdeleterolerequest();
  inline void clear_has_m_staccountdeleterolerequest();
  inline void set_has_m_staccountdeleteroleresponse();
  inline void clear_has_m_staccountdeleteroleresponse();
  inline void set_has_m_staccountlistrolerequest();
  inline void clear_has_m_staccountlistrolerequest();
  inline void set_has_m_staccountlistroleresponse();
  inline void clear_has_m_staccountlistroleresponse();
  inline void set_has_m_stlogoutserver_response();
  inline void clear_has_m_stlogoutserver_response();
  inline void set_has_m_stworld_zonechanged_notify();
  inline void clear_has_m_stworld_zonechanged_notify();
  inline void set_has_m_stworld_createrole_request();
  inline void clear_has_m_stworld_createrole_request();
  inline void set_has_m_stworld_createrole_response();
  inline void clear_has_m_stworld_createrole_response();
  inline void set_has_m_stworld_fetchrole_request();
  inline void clear_has_m_stworld_fetchrole_request();
  inline void set_has_m_stworld_fetchrole_response();
  inline void clear_has_m_stworld_fetchrole_response();
  inline void set_has_m_stzone_logout_notify();
  inline void clear_has_m_stzone_logout_notify();
  inline void set_has_m_stworld_updaterole_request();
  inline void clear_has_m_stworld_updaterole_request();
  inline void set_has_m_stworld_updaterole_response();
  inline void clear_has_m_stworld_updaterole_response();
  inline void set_has_m_stzone_getfriendinfo_request();
  inline void clear_has_m_stzone_getfriendinfo_request();
  inline void set_has_m_stzone_getfriendinfo_response();
  inline void clear_has_m_stzone_getfriendinfo_response();
  inline void set_has_m_stzone_loginserver_request();
  inline void clear_has_m_stzone_loginserver_request();
  inline void set_has_m_stzone_loginserver_response();
  inline void clear_has_m_stzone_loginserver_response();
  inline void set_has_m_stworld_kickrole_request();
  inline void clear_has_m_stworld_kickrole_request();
  inline void set_has_m_stworld_kickrole_response();
  inline void clear_has_m_stworld_kickrole_response();
  inline void set_has_m_stzone_onlinerole_request();
  inline void clear_has_m_stzone_onlinerole_request();
  inline void set_has_m_stworld_onlinestat_request();
  inline void clear_has_m_stworld_onlinestat_request();
  inline void set_has_m_stworld_onlinestat_response();
  inline void clear_has_m_stworld_onlinestat_response();
  inline void set_has_m_stzone_gamemaster_request();
  inline void clear_has_m_stzone_gamemaster_request();
  inline void set_has_m_stzone_gamemaster_response();
  inline void clear_has_m_stzone_gamemaster_response();
  inline void set_has_m_staddnewname_request();
  inline void clear_has_m_staddnewname_request();
  inline void set_has_m_staddnewname_response();
  inline void clear_has_m_staddnewname_response();
  inline void set_has_m_stdeletename_request();
  inline void clear_has_m_stdeletename_request();
  inline void set_has_m_stdeletename_response();
  inline void clear_has_m_stdeletename_response();
  inline void set_has_m_stloginserver_notify();
  inline void clear_has_m_stloginserver_notify();
  inline void set_has_m_stzone_repopera_request();
  inline void clear_has_m_stzone_repopera_request();
  inline void set_has_m_stzone_repopera_response();
  inline void clear_has_m_stzone_repopera_response();
  inline void set_has_m_stzone_getrepinfo_request();
  inline void clear_has_m_stzone_getrepinfo_request();
  inline void set_has_m_stzone_getrepinfo_response();
  inline void clear_has_m_stzone_getrepinfo_response();
  inline void set_has_m_stzone_wearequip_request();
  inline void clear_has_m_stzone_wearequip_request();
  inline void set_has_m_stzone_wearequip_response();
  inline void clear_has_m_stzone_wearequip_response();
  inline void set_has_m_stzone_repchange_notify();
  inline void clear_has_m_stzone_repchange_notify();
  inline void set_has_m_stzone_resourcechange_notify();
  inline void clear_has_m_stzone_resourcechange_notify();
  inline void set_has_m_stzone_chat_request();
  inline void clear_has_m_stzone_chat_request();
  inline void set_has_m_stzone_chat_response();
  inline void clear_has_m_stzone_chat_response();
  inline void set_has_m_stworld_chat_notify();
  inline void clear_has_m_stworld_chat_notify();
  inline void set_has_m_stzone_sellitem_request();
  inline void clear_has_m_stzone_sellitem_request();
  inline void set_has_m_stzone_sellitem_response();
  inline void clear_has_m_stzone_sellitem_response();
  inline void set_has_m_stzone_docombat_request();
  inline void clear_has_m_stzone_docombat_request();
  inline void set_has_m_stzone_docombat_response();
  inline void clear_has_m_stzone_docombat_response();
  inline void set_has_m_stzone_battlefield_notify();
  inline void clear_has_m_stzone_battlefield_notify();
  inline void set_has_m_stzone_combatmove_request();
  inline void clear_has_m_stzone_combatmove_request();
  inline void set_has_m_stzone_combatmove_response();
  inline void clear_has_m_stzone_combatmove_response();
  inline void set_has_m_stzone_combataction_request();
  inline void clear_has_m_stzone_combataction_request();
  inline void set_has_m_stzone_combataction_response();
  inline void clear_has_m_stzone_combataction_response();
  inline void set_has_m_stzone_combatmove_notify();
  inline void clear_has_m_stzone_combatmove_notify();
  inline void set_has_m_stzone_combataction_notify();
  inline void clear_has_m_stzone_combataction_notify();
  inline void set_has_m_stzone_fincombat_notify();
  inline void clear_has_m_stzone_fincombat_notify();
  inline void set_has_m_stzone_unitdirective_notify();
  inline void clear_has_m_stzone_unitdirective_notify();
  inline void set_has_m_stzone_updatepartnerai_request();
  inline void clear_has_m_stzone_updatepartnerai_request();
  inline void set_has_m_stzone_updatepartnerai_response();
  inline void clear_has_m_stzone_updatepartnerai_response();
  inline void set_has_m_stzone_combataddbuff_notify();
  inline void clear_has_m_stzone_combataddbuff_notify();
  inline void set_has_m_stzone_dobuffeffect_notify();
  inline void clear_has_m_stzone_dobuffeffect_notify();
  inline void set_has_m_stzone_removebuff_notify();
  inline void clear_has_m_stzone_removebuff_notify();
  inline void set_has_m_stzone_addcombatunit_notify();
  inline void clear_has_m_stzone_addcombatunit_notify();
  inline void set_has_m_stzone_killcombatunit_notify();
  inline void clear_has_m_stzone_killcombatunit_notify();
  inline void set_has_m_stzone_addcombattrap_notify();
  inline void clear_has_m_stzone_addcombattrap_notify();
  inline void set_has_m_stzone_triggercombattrap_notify();
  inline void clear_has_m_stzone_triggercombattrap_notify();
  inline void set_has_m_stzone_deletecombattrap_notify();
  inline void clear_has_m_stzone_deletecombattrap_notify();
  inline void set_has_m_stzone_unitattrchange_notify();
  inline void clear_has_m_stzone_unitattrchange_notify();
  inline void set_has_m_stzone_startpvpcombat_request();
  inline void clear_has_m_stzone_startpvpcombat_request();
  inline void set_has_m_stzone_startpvpcombat_response();
  inline void clear_has_m_stzone_startpvpcombat_response();
  inline void set_has_m_stzone_startpvpcombat_notify();
  inline void clear_has_m_stzone_startpvpcombat_notify();
  inline void set_has_m_stzone_acceptpvpcombat_request();
  inline void clear_has_m_stzone_acceptpvpcombat_request();
  inline void set_has_m_stzone_acceptpvpcombat_response();
  inline void clear_has_m_stzone_acceptpvpcombat_response();
  inline void set_has_m_stzone_setcombatform_request();
  inline void clear_has_m_stzone_setcombatform_request();
  inline void set_has_m_stzone_setcombatform_response();
  inline void clear_has_m_stzone_setcombatform_response();
  inline void set_has_m_stzone_setcombatform_notify();
  inline void clear_has_m_stzone_setcombatform_notify();
  inline void set_has_m_stzone_rejectpvpcombat_notify();
  inline void clear_has_m_stzone_rejectpvpcombat_notify();
  inline void set_has_m_stzone_decreaseunitbuff_notify();
  inline void clear_has_m_stzone_decreaseunitbuff_notify();
  inline void set_has_m_stzone_actionunitinfo_notify();
  inline void clear_has_m_stzone_actionunitinfo_notify();
  inline void set_has_m_stzone_skillcdround_notify();
  inline void clear_has_m_stzone_skillcdround_notify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountDB_AddAccount_Request* m_staccountdb_addaccount_request_;
  ::AccountDB_AddAccount_Response* m_staccountdb_addaccount_response_;
  ::AccountDB_DeleteAccount_Request* m_staccountdb_delete_request_;
  ::AccountDB_DeleteAccount_Response* m_staccountdb_delete_response_;
  ::AccountDB_FetchAccount_Request* m_staccountdb_fetch_request_;
  ::AccountDB_FetchAccount_Response* m_staccountdb_fetch_response_;
  ::AccountDB_UpdateAccount_Request* m_staccountdb_update_request_;
  ::AccountDB_UpdateAccount_Response* m_staccountdb_update_response_;
  ::RegAuth_RegAccount_Request* m_stregauth_regaccount_request_;
  ::RegAuth_RegAccount_Response* m_stregauth_regaccount_response_;
  ::RegAuth_AuthAccount_Request* m_stregauth_authaccount_request_;
  ::RegAuth_AuthAccount_Response* m_stregauth_authaccount_response_;
  ::RegAuth_UpdateAccount_Request* m_stregauth_updateaccount_request_;
  ::RegAuth_UpdateAccount_Response* m_stregauth_updateaccount_response_;
  ::CreateRole_Account_Request* m_staccountcreaterolerequest_;
  ::CreateRole_Account_Response* m_staccountcreateroleresponse_;
  ::Account_ListZone_Request* m_staccount_listzone_request_;
  ::Account_ListZone_Response* m_staccount_listzone_response_;
  ::DeleteRole_Account_Request* m_staccountdeleterolerequest_;
  ::DeleteRole_Account_Response* m_staccountdeleteroleresponse_;
  ::Account_ListRole_Request* m_staccountlistrolerequest_;
  ::Account_ListRole_Response* m_staccountlistroleresponse_;
  ::LogoutServer_Response* m_stlogoutserver_response_;
  ::World_ZoneChanged_Notify* m_stworld_zonechanged_notify_;
  ::World_CreateRole_Request* m_stworld_createrole_request_;
  ::World_CreateRole_Response* m_stworld_createrole_response_;
  ::World_FetchRole_Request* m_stworld_fetchrole_request_;
  ::World_FetchRole_Response* m_stworld_fetchrole_response_;
  ::Zone_Logout_Notify* m_stzone_logout_notify_;
  ::World_UpdateRole_Request* m_stworld_updaterole_request_;
  ::World_UpdateRole_Response* m_stworld_updaterole_response_;
  ::Zone_GetFriendInfo_Request* m_stzone_getfriendinfo_request_;
  ::Zone_GetFriendInfo_Response* m_stzone_getfriendinfo_response_;
  ::Zone_LoginServer_Request* m_stzone_loginserver_request_;
  ::Zone_LoginServer_Response* m_stzone_loginserver_response_;
  ::World_KickRole_Request* m_stworld_kickrole_request_;
  ::World_KickRole_Response* m_stworld_kickrole_response_;
  ::Zone_OnlineRole_Request* m_stzone_onlinerole_request_;
  ::World_OnlineStat_Request* m_stworld_onlinestat_request_;
  ::World_OnlineStat_Response* m_stworld_onlinestat_response_;
  ::Zone_GameMaster_Request* m_stzone_gamemaster_request_;
  ::Zone_GameMaster_Response* m_stzone_gamemaster_response_;
  ::AddNewName_Request* m_staddnewname_request_;
  ::AddNewName_Response* m_staddnewname_response_;
  ::DeleteName_Request* m_stdeletename_request_;
  ::DeleteName_Response* m_stdeletename_response_;
  ::Zone_LoginServer_Notify* m_stloginserver_notify_;
  ::Zone_RepOpera_Request* m_stzone_repopera_request_;
  ::Zone_RepOpera_Response* m_stzone_repopera_response_;
  ::Zone_GetRepInfo_Request* m_stzone_getrepinfo_request_;
  ::Zone_GetRepInfo_Response* m_stzone_getrepinfo_response_;
  ::Zone_WearEquip_Request* m_stzone_wearequip_request_;
  ::Zone_WearEquip_Response* m_stzone_wearequip_response_;
  ::Zone_RepChange_Notify* m_stzone_repchange_notify_;
  ::Zone_ResourceChange_Notify* m_stzone_resourcechange_notify_;
  ::Zone_Chat_Request* m_stzone_chat_request_;
  ::Zone_Chat_Response* m_stzone_chat_response_;
  ::World_Chat_Notify* m_stworld_chat_notify_;
  ::Zone_SellItem_Request* m_stzone_sellitem_request_;
  ::Zone_SellItem_Response* m_stzone_sellitem_response_;
  ::Zone_DoCombat_Request* m_stzone_docombat_request_;
  ::Zone_DoCombat_Response* m_stzone_docombat_response_;
  ::Zone_Battlefield_Notify* m_stzone_battlefield_notify_;
  ::Zone_CombatMove_Request* m_stzone_combatmove_request_;
  ::Zone_CombatMove_Response* m_stzone_combatmove_response_;
  ::Zone_CombatAction_Request* m_stzone_combataction_request_;
  ::Zone_CombatAction_Response* m_stzone_combataction_response_;
  ::Zone_CombatMove_Notify* m_stzone_combatmove_notify_;
  ::Zone_CombatAction_Notify* m_stzone_combataction_notify_;
  ::Zone_FinCombat_Notify* m_stzone_fincombat_notify_;
  ::Zone_UnitDirective_Notify* m_stzone_unitdirective_notify_;
  ::Zone_UpdatePartnerAI_Request* m_stzone_updatepartnerai_request_;
  ::Zone_UpdatePartnerAI_Response* m_stzone_updatepartnerai_response_;
  ::Zone_CombatAddBuff_Notify* m_stzone_combataddbuff_notify_;
  ::Zone_DoBuffEffect_Notify* m_stzone_dobuffeffect_notify_;
  ::Zone_RemoveBuff_Notify* m_stzone_removebuff_notify_;
  ::Zone_AddCombatUnit_Notify* m_stzone_addcombatunit_notify_;
  ::Zone_KillCombatUnit_Notify* m_stzone_killcombatunit_notify_;
  ::Zone_AddCombatTrap_Notify* m_stzone_addcombattrap_notify_;
  ::Zone_TriggerCombatTrap_Notify* m_stzone_triggercombattrap_notify_;
  ::Zone_DeleteCombatTrap_Notify* m_stzone_deletecombattrap_notify_;
  ::Zone_UnitAttrChange_Notify* m_stzone_unitattrchange_notify_;
  ::Zone_StartPVPCombat_Request* m_stzone_startpvpcombat_request_;
  ::Zone_StartPVPCombat_Response* m_stzone_startpvpcombat_response_;
  ::Zone_StartPVPCombat_Notify* m_stzone_startpvpcombat_notify_;
  ::Zone_AcceptPVPCombat_Request* m_stzone_acceptpvpcombat_request_;
  ::Zone_AcceptPVPCombat_Response* m_stzone_acceptpvpcombat_response_;
  ::Zone_SetCombatForm_Request* m_stzone_setcombatform_request_;
  ::Zone_SetCombatForm_Response* m_stzone_setcombatform_response_;
  ::Zone_SetCombatForm_Notify* m_stzone_setcombatform_notify_;
  ::Zone_RejectPVPCombat_Notify* m_stzone_rejectpvpcombat_notify_;
  ::Zone_DecreaseUnitBuff_Notify* m_stzone_decreaseunitbuff_notify_;
  ::Zone_ActionUnitInfo_Notify* m_stzone_actionunitinfo_notify_;
  ::Zone_SkillCDRound_Notify* m_stzone_skillcdround_notify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(94 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eCS_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eCS_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eCS_2eproto();

  void InitAsDefaultInstance();
  static CSMsgBody* default_instance_;
};
// -------------------------------------------------------------------

class CSMsgHead : public ::google::protobuf::Message {
 public:
  CSMsgHead();
  virtual ~CSMsgHead();

  CSMsgHead(const CSMsgHead& from);

  inline CSMsgHead& operator=(const CSMsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsgHead& default_instance();

  void Swap(CSMsgHead* other);

  // implements Message ----------------------------------------------

  CSMsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsgHead& from);
  void MergeFrom(const CSMsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 m_uiSessionFd = 1;
  inline bool has_m_uisessionfd() const;
  inline void clear_m_uisessionfd();
  static const int kMUiSessionFdFieldNumber = 1;
  inline ::google::protobuf::uint32 m_uisessionfd() const;
  inline void set_m_uisessionfd(::google::protobuf::uint32 value);

  // optional .ProtocolMsgID m_uiMsgID = 2 [default = MSGID_PROTOCOL_INVALID_MSG];
  inline bool has_m_uimsgid() const;
  inline void clear_m_uimsgid();
  static const int kMUiMsgIDFieldNumber = 2;
  inline ::ProtocolMsgID m_uimsgid() const;
  inline void set_m_uimsgid(::ProtocolMsgID value);

  // optional uint32 m_uin = 3;
  inline bool has_m_uin() const;
  inline void clear_m_uin();
  static const int kMUinFieldNumber = 3;
  inline ::google::protobuf::uint32 m_uin() const;
  inline void set_m_uin(::google::protobuf::uint32 value);

  // optional string m_strSessionKey = 4;
  inline bool has_m_strsessionkey() const;
  inline void clear_m_strsessionkey();
  static const int kMStrSessionKeyFieldNumber = 4;
  inline const ::std::string& m_strsessionkey() const;
  inline void set_m_strsessionkey(const ::std::string& value);
  inline void set_m_strsessionkey(const char* value);
  inline void set_m_strsessionkey(const char* value, size_t size);
  inline ::std::string* mutable_m_strsessionkey();
  inline ::std::string* release_m_strsessionkey();
  inline void set_allocated_m_strsessionkey(::std::string* m_strsessionkey);

  // @@protoc_insertion_point(class_scope:GameProtocol.CS.CSMsgHead)
 private:
  inline void set_has_m_uisessionfd();
  inline void clear_has_m_uisessionfd();
  inline void set_has_m_uimsgid();
  inline void clear_has_m_uimsgid();
  inline void set_has_m_uin();
  inline void clear_has_m_uin();
  inline void set_has_m_strsessionkey();
  inline void clear_has_m_strsessionkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 m_uisessionfd_;
  int m_uimsgid_;
  ::std::string* m_strsessionkey_;
  ::google::protobuf::uint32 m_uin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eCS_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eCS_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eCS_2eproto();

  void InitAsDefaultInstance();
  static CSMsgHead* default_instance_;
};
// -------------------------------------------------------------------

class ProtocolCSMsg : public ::google::protobuf::Message {
 public:
  ProtocolCSMsg();
  virtual ~ProtocolCSMsg();

  ProtocolCSMsg(const ProtocolCSMsg& from);

  inline ProtocolCSMsg& operator=(const ProtocolCSMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolCSMsg& default_instance();

  void Swap(ProtocolCSMsg* other);

  // implements Message ----------------------------------------------

  ProtocolCSMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolCSMsg& from);
  void MergeFrom(const ProtocolCSMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GameProtocol.CS.CSMsgHead m_stMsgHead = 1;
  inline bool has_m_stmsghead() const;
  inline void clear_m_stmsghead();
  static const int kMStMsgHeadFieldNumber = 1;
  inline const ::GameProtocol::CS::CSMsgHead& m_stmsghead() const;
  inline ::GameProtocol::CS::CSMsgHead* mutable_m_stmsghead();
  inline ::GameProtocol::CS::CSMsgHead* release_m_stmsghead();
  inline void set_allocated_m_stmsghead(::GameProtocol::CS::CSMsgHead* m_stmsghead);

  // optional .GameProtocol.CS.CSMsgBody m_stMsgBody = 2;
  inline bool has_m_stmsgbody() const;
  inline void clear_m_stmsgbody();
  static const int kMStMsgBodyFieldNumber = 2;
  inline const ::GameProtocol::CS::CSMsgBody& m_stmsgbody() const;
  inline ::GameProtocol::CS::CSMsgBody* mutable_m_stmsgbody();
  inline ::GameProtocol::CS::CSMsgBody* release_m_stmsgbody();
  inline void set_allocated_m_stmsgbody(::GameProtocol::CS::CSMsgBody* m_stmsgbody);

  // @@protoc_insertion_point(class_scope:GameProtocol.CS.ProtocolCSMsg)
 private:
  inline void set_has_m_stmsghead();
  inline void clear_has_m_stmsghead();
  inline void set_has_m_stmsgbody();
  inline void clear_has_m_stmsgbody();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GameProtocol::CS::CSMsgHead* m_stmsghead_;
  ::GameProtocol::CS::CSMsgBody* m_stmsgbody_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_2eCS_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_2eCS_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_2eCS_2eproto();

  void InitAsDefaultInstance();
  static ProtocolCSMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// CSMsgBody

// optional .AccountDB_AddAccount_Request m_stAccountDB_AddAccount_Request = 1;
inline bool CSMsgBody::has_m_staccountdb_addaccount_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdb_addaccount_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsgBody::clear_has_m_staccountdb_addaccount_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsgBody::clear_m_staccountdb_addaccount_request() {
  if (m_staccountdb_addaccount_request_ != NULL) m_staccountdb_addaccount_request_->::AccountDB_AddAccount_Request::Clear();
  clear_has_m_staccountdb_addaccount_request();
}
inline const ::AccountDB_AddAccount_Request& CSMsgBody::m_staccountdb_addaccount_request() const {
  return m_staccountdb_addaccount_request_ != NULL ? *m_staccountdb_addaccount_request_ : *default_instance_->m_staccountdb_addaccount_request_;
}
inline ::AccountDB_AddAccount_Request* CSMsgBody::mutable_m_staccountdb_addaccount_request() {
  set_has_m_staccountdb_addaccount_request();
  if (m_staccountdb_addaccount_request_ == NULL) m_staccountdb_addaccount_request_ = new ::AccountDB_AddAccount_Request;
  return m_staccountdb_addaccount_request_;
}
inline ::AccountDB_AddAccount_Request* CSMsgBody::release_m_staccountdb_addaccount_request() {
  clear_has_m_staccountdb_addaccount_request();
  ::AccountDB_AddAccount_Request* temp = m_staccountdb_addaccount_request_;
  m_staccountdb_addaccount_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdb_addaccount_request(::AccountDB_AddAccount_Request* m_staccountdb_addaccount_request) {
  delete m_staccountdb_addaccount_request_;
  m_staccountdb_addaccount_request_ = m_staccountdb_addaccount_request;
  if (m_staccountdb_addaccount_request) {
    set_has_m_staccountdb_addaccount_request();
  } else {
    clear_has_m_staccountdb_addaccount_request();
  }
}

// optional .AccountDB_AddAccount_Response m_stAccountDB_AddAccount_Response = 2;
inline bool CSMsgBody::has_m_staccountdb_addaccount_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdb_addaccount_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMsgBody::clear_has_m_staccountdb_addaccount_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMsgBody::clear_m_staccountdb_addaccount_response() {
  if (m_staccountdb_addaccount_response_ != NULL) m_staccountdb_addaccount_response_->::AccountDB_AddAccount_Response::Clear();
  clear_has_m_staccountdb_addaccount_response();
}
inline const ::AccountDB_AddAccount_Response& CSMsgBody::m_staccountdb_addaccount_response() const {
  return m_staccountdb_addaccount_response_ != NULL ? *m_staccountdb_addaccount_response_ : *default_instance_->m_staccountdb_addaccount_response_;
}
inline ::AccountDB_AddAccount_Response* CSMsgBody::mutable_m_staccountdb_addaccount_response() {
  set_has_m_staccountdb_addaccount_response();
  if (m_staccountdb_addaccount_response_ == NULL) m_staccountdb_addaccount_response_ = new ::AccountDB_AddAccount_Response;
  return m_staccountdb_addaccount_response_;
}
inline ::AccountDB_AddAccount_Response* CSMsgBody::release_m_staccountdb_addaccount_response() {
  clear_has_m_staccountdb_addaccount_response();
  ::AccountDB_AddAccount_Response* temp = m_staccountdb_addaccount_response_;
  m_staccountdb_addaccount_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdb_addaccount_response(::AccountDB_AddAccount_Response* m_staccountdb_addaccount_response) {
  delete m_staccountdb_addaccount_response_;
  m_staccountdb_addaccount_response_ = m_staccountdb_addaccount_response;
  if (m_staccountdb_addaccount_response) {
    set_has_m_staccountdb_addaccount_response();
  } else {
    clear_has_m_staccountdb_addaccount_response();
  }
}

// optional .AccountDB_DeleteAccount_Request m_stAccountDB_Delete_Request = 3;
inline bool CSMsgBody::has_m_staccountdb_delete_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdb_delete_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMsgBody::clear_has_m_staccountdb_delete_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMsgBody::clear_m_staccountdb_delete_request() {
  if (m_staccountdb_delete_request_ != NULL) m_staccountdb_delete_request_->::AccountDB_DeleteAccount_Request::Clear();
  clear_has_m_staccountdb_delete_request();
}
inline const ::AccountDB_DeleteAccount_Request& CSMsgBody::m_staccountdb_delete_request() const {
  return m_staccountdb_delete_request_ != NULL ? *m_staccountdb_delete_request_ : *default_instance_->m_staccountdb_delete_request_;
}
inline ::AccountDB_DeleteAccount_Request* CSMsgBody::mutable_m_staccountdb_delete_request() {
  set_has_m_staccountdb_delete_request();
  if (m_staccountdb_delete_request_ == NULL) m_staccountdb_delete_request_ = new ::AccountDB_DeleteAccount_Request;
  return m_staccountdb_delete_request_;
}
inline ::AccountDB_DeleteAccount_Request* CSMsgBody::release_m_staccountdb_delete_request() {
  clear_has_m_staccountdb_delete_request();
  ::AccountDB_DeleteAccount_Request* temp = m_staccountdb_delete_request_;
  m_staccountdb_delete_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdb_delete_request(::AccountDB_DeleteAccount_Request* m_staccountdb_delete_request) {
  delete m_staccountdb_delete_request_;
  m_staccountdb_delete_request_ = m_staccountdb_delete_request;
  if (m_staccountdb_delete_request) {
    set_has_m_staccountdb_delete_request();
  } else {
    clear_has_m_staccountdb_delete_request();
  }
}

// optional .AccountDB_DeleteAccount_Response m_stAccountDB_Delete_Response = 4;
inline bool CSMsgBody::has_m_staccountdb_delete_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdb_delete_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMsgBody::clear_has_m_staccountdb_delete_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMsgBody::clear_m_staccountdb_delete_response() {
  if (m_staccountdb_delete_response_ != NULL) m_staccountdb_delete_response_->::AccountDB_DeleteAccount_Response::Clear();
  clear_has_m_staccountdb_delete_response();
}
inline const ::AccountDB_DeleteAccount_Response& CSMsgBody::m_staccountdb_delete_response() const {
  return m_staccountdb_delete_response_ != NULL ? *m_staccountdb_delete_response_ : *default_instance_->m_staccountdb_delete_response_;
}
inline ::AccountDB_DeleteAccount_Response* CSMsgBody::mutable_m_staccountdb_delete_response() {
  set_has_m_staccountdb_delete_response();
  if (m_staccountdb_delete_response_ == NULL) m_staccountdb_delete_response_ = new ::AccountDB_DeleteAccount_Response;
  return m_staccountdb_delete_response_;
}
inline ::AccountDB_DeleteAccount_Response* CSMsgBody::release_m_staccountdb_delete_response() {
  clear_has_m_staccountdb_delete_response();
  ::AccountDB_DeleteAccount_Response* temp = m_staccountdb_delete_response_;
  m_staccountdb_delete_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdb_delete_response(::AccountDB_DeleteAccount_Response* m_staccountdb_delete_response) {
  delete m_staccountdb_delete_response_;
  m_staccountdb_delete_response_ = m_staccountdb_delete_response;
  if (m_staccountdb_delete_response) {
    set_has_m_staccountdb_delete_response();
  } else {
    clear_has_m_staccountdb_delete_response();
  }
}

// optional .AccountDB_FetchAccount_Request m_stAccountDB_Fetch_Request = 5;
inline bool CSMsgBody::has_m_staccountdb_fetch_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdb_fetch_request() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMsgBody::clear_has_m_staccountdb_fetch_request() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMsgBody::clear_m_staccountdb_fetch_request() {
  if (m_staccountdb_fetch_request_ != NULL) m_staccountdb_fetch_request_->::AccountDB_FetchAccount_Request::Clear();
  clear_has_m_staccountdb_fetch_request();
}
inline const ::AccountDB_FetchAccount_Request& CSMsgBody::m_staccountdb_fetch_request() const {
  return m_staccountdb_fetch_request_ != NULL ? *m_staccountdb_fetch_request_ : *default_instance_->m_staccountdb_fetch_request_;
}
inline ::AccountDB_FetchAccount_Request* CSMsgBody::mutable_m_staccountdb_fetch_request() {
  set_has_m_staccountdb_fetch_request();
  if (m_staccountdb_fetch_request_ == NULL) m_staccountdb_fetch_request_ = new ::AccountDB_FetchAccount_Request;
  return m_staccountdb_fetch_request_;
}
inline ::AccountDB_FetchAccount_Request* CSMsgBody::release_m_staccountdb_fetch_request() {
  clear_has_m_staccountdb_fetch_request();
  ::AccountDB_FetchAccount_Request* temp = m_staccountdb_fetch_request_;
  m_staccountdb_fetch_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdb_fetch_request(::AccountDB_FetchAccount_Request* m_staccountdb_fetch_request) {
  delete m_staccountdb_fetch_request_;
  m_staccountdb_fetch_request_ = m_staccountdb_fetch_request;
  if (m_staccountdb_fetch_request) {
    set_has_m_staccountdb_fetch_request();
  } else {
    clear_has_m_staccountdb_fetch_request();
  }
}

// optional .AccountDB_FetchAccount_Response m_stAccountDB_Fetch_Response = 6;
inline bool CSMsgBody::has_m_staccountdb_fetch_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdb_fetch_response() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMsgBody::clear_has_m_staccountdb_fetch_response() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMsgBody::clear_m_staccountdb_fetch_response() {
  if (m_staccountdb_fetch_response_ != NULL) m_staccountdb_fetch_response_->::AccountDB_FetchAccount_Response::Clear();
  clear_has_m_staccountdb_fetch_response();
}
inline const ::AccountDB_FetchAccount_Response& CSMsgBody::m_staccountdb_fetch_response() const {
  return m_staccountdb_fetch_response_ != NULL ? *m_staccountdb_fetch_response_ : *default_instance_->m_staccountdb_fetch_response_;
}
inline ::AccountDB_FetchAccount_Response* CSMsgBody::mutable_m_staccountdb_fetch_response() {
  set_has_m_staccountdb_fetch_response();
  if (m_staccountdb_fetch_response_ == NULL) m_staccountdb_fetch_response_ = new ::AccountDB_FetchAccount_Response;
  return m_staccountdb_fetch_response_;
}
inline ::AccountDB_FetchAccount_Response* CSMsgBody::release_m_staccountdb_fetch_response() {
  clear_has_m_staccountdb_fetch_response();
  ::AccountDB_FetchAccount_Response* temp = m_staccountdb_fetch_response_;
  m_staccountdb_fetch_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdb_fetch_response(::AccountDB_FetchAccount_Response* m_staccountdb_fetch_response) {
  delete m_staccountdb_fetch_response_;
  m_staccountdb_fetch_response_ = m_staccountdb_fetch_response;
  if (m_staccountdb_fetch_response) {
    set_has_m_staccountdb_fetch_response();
  } else {
    clear_has_m_staccountdb_fetch_response();
  }
}

// optional .AccountDB_UpdateAccount_Request m_stAccountDB_Update_Request = 7;
inline bool CSMsgBody::has_m_staccountdb_update_request() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdb_update_request() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMsgBody::clear_has_m_staccountdb_update_request() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMsgBody::clear_m_staccountdb_update_request() {
  if (m_staccountdb_update_request_ != NULL) m_staccountdb_update_request_->::AccountDB_UpdateAccount_Request::Clear();
  clear_has_m_staccountdb_update_request();
}
inline const ::AccountDB_UpdateAccount_Request& CSMsgBody::m_staccountdb_update_request() const {
  return m_staccountdb_update_request_ != NULL ? *m_staccountdb_update_request_ : *default_instance_->m_staccountdb_update_request_;
}
inline ::AccountDB_UpdateAccount_Request* CSMsgBody::mutable_m_staccountdb_update_request() {
  set_has_m_staccountdb_update_request();
  if (m_staccountdb_update_request_ == NULL) m_staccountdb_update_request_ = new ::AccountDB_UpdateAccount_Request;
  return m_staccountdb_update_request_;
}
inline ::AccountDB_UpdateAccount_Request* CSMsgBody::release_m_staccountdb_update_request() {
  clear_has_m_staccountdb_update_request();
  ::AccountDB_UpdateAccount_Request* temp = m_staccountdb_update_request_;
  m_staccountdb_update_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdb_update_request(::AccountDB_UpdateAccount_Request* m_staccountdb_update_request) {
  delete m_staccountdb_update_request_;
  m_staccountdb_update_request_ = m_staccountdb_update_request;
  if (m_staccountdb_update_request) {
    set_has_m_staccountdb_update_request();
  } else {
    clear_has_m_staccountdb_update_request();
  }
}

// optional .AccountDB_UpdateAccount_Response m_stAccountDB_Update_Response = 8;
inline bool CSMsgBody::has_m_staccountdb_update_response() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdb_update_response() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSMsgBody::clear_has_m_staccountdb_update_response() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSMsgBody::clear_m_staccountdb_update_response() {
  if (m_staccountdb_update_response_ != NULL) m_staccountdb_update_response_->::AccountDB_UpdateAccount_Response::Clear();
  clear_has_m_staccountdb_update_response();
}
inline const ::AccountDB_UpdateAccount_Response& CSMsgBody::m_staccountdb_update_response() const {
  return m_staccountdb_update_response_ != NULL ? *m_staccountdb_update_response_ : *default_instance_->m_staccountdb_update_response_;
}
inline ::AccountDB_UpdateAccount_Response* CSMsgBody::mutable_m_staccountdb_update_response() {
  set_has_m_staccountdb_update_response();
  if (m_staccountdb_update_response_ == NULL) m_staccountdb_update_response_ = new ::AccountDB_UpdateAccount_Response;
  return m_staccountdb_update_response_;
}
inline ::AccountDB_UpdateAccount_Response* CSMsgBody::release_m_staccountdb_update_response() {
  clear_has_m_staccountdb_update_response();
  ::AccountDB_UpdateAccount_Response* temp = m_staccountdb_update_response_;
  m_staccountdb_update_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdb_update_response(::AccountDB_UpdateAccount_Response* m_staccountdb_update_response) {
  delete m_staccountdb_update_response_;
  m_staccountdb_update_response_ = m_staccountdb_update_response;
  if (m_staccountdb_update_response) {
    set_has_m_staccountdb_update_response();
  } else {
    clear_has_m_staccountdb_update_response();
  }
}

// optional .RegAuth_RegAccount_Request m_stRegAuth_RegAccount_Request = 9;
inline bool CSMsgBody::has_m_stregauth_regaccount_request() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_regaccount_request() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSMsgBody::clear_has_m_stregauth_regaccount_request() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSMsgBody::clear_m_stregauth_regaccount_request() {
  if (m_stregauth_regaccount_request_ != NULL) m_stregauth_regaccount_request_->::RegAuth_RegAccount_Request::Clear();
  clear_has_m_stregauth_regaccount_request();
}
inline const ::RegAuth_RegAccount_Request& CSMsgBody::m_stregauth_regaccount_request() const {
  return m_stregauth_regaccount_request_ != NULL ? *m_stregauth_regaccount_request_ : *default_instance_->m_stregauth_regaccount_request_;
}
inline ::RegAuth_RegAccount_Request* CSMsgBody::mutable_m_stregauth_regaccount_request() {
  set_has_m_stregauth_regaccount_request();
  if (m_stregauth_regaccount_request_ == NULL) m_stregauth_regaccount_request_ = new ::RegAuth_RegAccount_Request;
  return m_stregauth_regaccount_request_;
}
inline ::RegAuth_RegAccount_Request* CSMsgBody::release_m_stregauth_regaccount_request() {
  clear_has_m_stregauth_regaccount_request();
  ::RegAuth_RegAccount_Request* temp = m_stregauth_regaccount_request_;
  m_stregauth_regaccount_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_regaccount_request(::RegAuth_RegAccount_Request* m_stregauth_regaccount_request) {
  delete m_stregauth_regaccount_request_;
  m_stregauth_regaccount_request_ = m_stregauth_regaccount_request;
  if (m_stregauth_regaccount_request) {
    set_has_m_stregauth_regaccount_request();
  } else {
    clear_has_m_stregauth_regaccount_request();
  }
}

// optional .RegAuth_RegAccount_Response m_stRegAuth_RegAccount_Response = 10;
inline bool CSMsgBody::has_m_stregauth_regaccount_response() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_regaccount_response() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSMsgBody::clear_has_m_stregauth_regaccount_response() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSMsgBody::clear_m_stregauth_regaccount_response() {
  if (m_stregauth_regaccount_response_ != NULL) m_stregauth_regaccount_response_->::RegAuth_RegAccount_Response::Clear();
  clear_has_m_stregauth_regaccount_response();
}
inline const ::RegAuth_RegAccount_Response& CSMsgBody::m_stregauth_regaccount_response() const {
  return m_stregauth_regaccount_response_ != NULL ? *m_stregauth_regaccount_response_ : *default_instance_->m_stregauth_regaccount_response_;
}
inline ::RegAuth_RegAccount_Response* CSMsgBody::mutable_m_stregauth_regaccount_response() {
  set_has_m_stregauth_regaccount_response();
  if (m_stregauth_regaccount_response_ == NULL) m_stregauth_regaccount_response_ = new ::RegAuth_RegAccount_Response;
  return m_stregauth_regaccount_response_;
}
inline ::RegAuth_RegAccount_Response* CSMsgBody::release_m_stregauth_regaccount_response() {
  clear_has_m_stregauth_regaccount_response();
  ::RegAuth_RegAccount_Response* temp = m_stregauth_regaccount_response_;
  m_stregauth_regaccount_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_regaccount_response(::RegAuth_RegAccount_Response* m_stregauth_regaccount_response) {
  delete m_stregauth_regaccount_response_;
  m_stregauth_regaccount_response_ = m_stregauth_regaccount_response;
  if (m_stregauth_regaccount_response) {
    set_has_m_stregauth_regaccount_response();
  } else {
    clear_has_m_stregauth_regaccount_response();
  }
}

// optional .RegAuth_AuthAccount_Request m_stRegAuth_AuthAccount_Request = 11;
inline bool CSMsgBody::has_m_stregauth_authaccount_request() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_authaccount_request() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSMsgBody::clear_has_m_stregauth_authaccount_request() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSMsgBody::clear_m_stregauth_authaccount_request() {
  if (m_stregauth_authaccount_request_ != NULL) m_stregauth_authaccount_request_->::RegAuth_AuthAccount_Request::Clear();
  clear_has_m_stregauth_authaccount_request();
}
inline const ::RegAuth_AuthAccount_Request& CSMsgBody::m_stregauth_authaccount_request() const {
  return m_stregauth_authaccount_request_ != NULL ? *m_stregauth_authaccount_request_ : *default_instance_->m_stregauth_authaccount_request_;
}
inline ::RegAuth_AuthAccount_Request* CSMsgBody::mutable_m_stregauth_authaccount_request() {
  set_has_m_stregauth_authaccount_request();
  if (m_stregauth_authaccount_request_ == NULL) m_stregauth_authaccount_request_ = new ::RegAuth_AuthAccount_Request;
  return m_stregauth_authaccount_request_;
}
inline ::RegAuth_AuthAccount_Request* CSMsgBody::release_m_stregauth_authaccount_request() {
  clear_has_m_stregauth_authaccount_request();
  ::RegAuth_AuthAccount_Request* temp = m_stregauth_authaccount_request_;
  m_stregauth_authaccount_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_authaccount_request(::RegAuth_AuthAccount_Request* m_stregauth_authaccount_request) {
  delete m_stregauth_authaccount_request_;
  m_stregauth_authaccount_request_ = m_stregauth_authaccount_request;
  if (m_stregauth_authaccount_request) {
    set_has_m_stregauth_authaccount_request();
  } else {
    clear_has_m_stregauth_authaccount_request();
  }
}

// optional .RegAuth_AuthAccount_Response m_stRegAuth_AuthAccount_Response = 12;
inline bool CSMsgBody::has_m_stregauth_authaccount_response() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_authaccount_response() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSMsgBody::clear_has_m_stregauth_authaccount_response() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSMsgBody::clear_m_stregauth_authaccount_response() {
  if (m_stregauth_authaccount_response_ != NULL) m_stregauth_authaccount_response_->::RegAuth_AuthAccount_Response::Clear();
  clear_has_m_stregauth_authaccount_response();
}
inline const ::RegAuth_AuthAccount_Response& CSMsgBody::m_stregauth_authaccount_response() const {
  return m_stregauth_authaccount_response_ != NULL ? *m_stregauth_authaccount_response_ : *default_instance_->m_stregauth_authaccount_response_;
}
inline ::RegAuth_AuthAccount_Response* CSMsgBody::mutable_m_stregauth_authaccount_response() {
  set_has_m_stregauth_authaccount_response();
  if (m_stregauth_authaccount_response_ == NULL) m_stregauth_authaccount_response_ = new ::RegAuth_AuthAccount_Response;
  return m_stregauth_authaccount_response_;
}
inline ::RegAuth_AuthAccount_Response* CSMsgBody::release_m_stregauth_authaccount_response() {
  clear_has_m_stregauth_authaccount_response();
  ::RegAuth_AuthAccount_Response* temp = m_stregauth_authaccount_response_;
  m_stregauth_authaccount_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_authaccount_response(::RegAuth_AuthAccount_Response* m_stregauth_authaccount_response) {
  delete m_stregauth_authaccount_response_;
  m_stregauth_authaccount_response_ = m_stregauth_authaccount_response;
  if (m_stregauth_authaccount_response) {
    set_has_m_stregauth_authaccount_response();
  } else {
    clear_has_m_stregauth_authaccount_response();
  }
}

// optional .RegAuth_UpdateAccount_Request m_stRegAuth_UpdateAccount_Request = 13;
inline bool CSMsgBody::has_m_stregauth_updateaccount_request() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_updateaccount_request() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSMsgBody::clear_has_m_stregauth_updateaccount_request() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSMsgBody::clear_m_stregauth_updateaccount_request() {
  if (m_stregauth_updateaccount_request_ != NULL) m_stregauth_updateaccount_request_->::RegAuth_UpdateAccount_Request::Clear();
  clear_has_m_stregauth_updateaccount_request();
}
inline const ::RegAuth_UpdateAccount_Request& CSMsgBody::m_stregauth_updateaccount_request() const {
  return m_stregauth_updateaccount_request_ != NULL ? *m_stregauth_updateaccount_request_ : *default_instance_->m_stregauth_updateaccount_request_;
}
inline ::RegAuth_UpdateAccount_Request* CSMsgBody::mutable_m_stregauth_updateaccount_request() {
  set_has_m_stregauth_updateaccount_request();
  if (m_stregauth_updateaccount_request_ == NULL) m_stregauth_updateaccount_request_ = new ::RegAuth_UpdateAccount_Request;
  return m_stregauth_updateaccount_request_;
}
inline ::RegAuth_UpdateAccount_Request* CSMsgBody::release_m_stregauth_updateaccount_request() {
  clear_has_m_stregauth_updateaccount_request();
  ::RegAuth_UpdateAccount_Request* temp = m_stregauth_updateaccount_request_;
  m_stregauth_updateaccount_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_updateaccount_request(::RegAuth_UpdateAccount_Request* m_stregauth_updateaccount_request) {
  delete m_stregauth_updateaccount_request_;
  m_stregauth_updateaccount_request_ = m_stregauth_updateaccount_request;
  if (m_stregauth_updateaccount_request) {
    set_has_m_stregauth_updateaccount_request();
  } else {
    clear_has_m_stregauth_updateaccount_request();
  }
}

// optional .RegAuth_UpdateAccount_Response m_stRegAuth_UpdateAccount_Response = 14;
inline bool CSMsgBody::has_m_stregauth_updateaccount_response() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_updateaccount_response() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSMsgBody::clear_has_m_stregauth_updateaccount_response() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSMsgBody::clear_m_stregauth_updateaccount_response() {
  if (m_stregauth_updateaccount_response_ != NULL) m_stregauth_updateaccount_response_->::RegAuth_UpdateAccount_Response::Clear();
  clear_has_m_stregauth_updateaccount_response();
}
inline const ::RegAuth_UpdateAccount_Response& CSMsgBody::m_stregauth_updateaccount_response() const {
  return m_stregauth_updateaccount_response_ != NULL ? *m_stregauth_updateaccount_response_ : *default_instance_->m_stregauth_updateaccount_response_;
}
inline ::RegAuth_UpdateAccount_Response* CSMsgBody::mutable_m_stregauth_updateaccount_response() {
  set_has_m_stregauth_updateaccount_response();
  if (m_stregauth_updateaccount_response_ == NULL) m_stregauth_updateaccount_response_ = new ::RegAuth_UpdateAccount_Response;
  return m_stregauth_updateaccount_response_;
}
inline ::RegAuth_UpdateAccount_Response* CSMsgBody::release_m_stregauth_updateaccount_response() {
  clear_has_m_stregauth_updateaccount_response();
  ::RegAuth_UpdateAccount_Response* temp = m_stregauth_updateaccount_response_;
  m_stregauth_updateaccount_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_updateaccount_response(::RegAuth_UpdateAccount_Response* m_stregauth_updateaccount_response) {
  delete m_stregauth_updateaccount_response_;
  m_stregauth_updateaccount_response_ = m_stregauth_updateaccount_response;
  if (m_stregauth_updateaccount_response) {
    set_has_m_stregauth_updateaccount_response();
  } else {
    clear_has_m_stregauth_updateaccount_response();
  }
}

// optional .CreateRole_Account_Request m_stAccountCreateRoleRequest = 21;
inline bool CSMsgBody::has_m_staccountcreaterolerequest() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountcreaterolerequest() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSMsgBody::clear_has_m_staccountcreaterolerequest() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSMsgBody::clear_m_staccountcreaterolerequest() {
  if (m_staccountcreaterolerequest_ != NULL) m_staccountcreaterolerequest_->::CreateRole_Account_Request::Clear();
  clear_has_m_staccountcreaterolerequest();
}
inline const ::CreateRole_Account_Request& CSMsgBody::m_staccountcreaterolerequest() const {
  return m_staccountcreaterolerequest_ != NULL ? *m_staccountcreaterolerequest_ : *default_instance_->m_staccountcreaterolerequest_;
}
inline ::CreateRole_Account_Request* CSMsgBody::mutable_m_staccountcreaterolerequest() {
  set_has_m_staccountcreaterolerequest();
  if (m_staccountcreaterolerequest_ == NULL) m_staccountcreaterolerequest_ = new ::CreateRole_Account_Request;
  return m_staccountcreaterolerequest_;
}
inline ::CreateRole_Account_Request* CSMsgBody::release_m_staccountcreaterolerequest() {
  clear_has_m_staccountcreaterolerequest();
  ::CreateRole_Account_Request* temp = m_staccountcreaterolerequest_;
  m_staccountcreaterolerequest_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountcreaterolerequest(::CreateRole_Account_Request* m_staccountcreaterolerequest) {
  delete m_staccountcreaterolerequest_;
  m_staccountcreaterolerequest_ = m_staccountcreaterolerequest;
  if (m_staccountcreaterolerequest) {
    set_has_m_staccountcreaterolerequest();
  } else {
    clear_has_m_staccountcreaterolerequest();
  }
}

// optional .CreateRole_Account_Response m_stAccountCreateRoleResponse = 22;
inline bool CSMsgBody::has_m_staccountcreateroleresponse() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountcreateroleresponse() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSMsgBody::clear_has_m_staccountcreateroleresponse() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSMsgBody::clear_m_staccountcreateroleresponse() {
  if (m_staccountcreateroleresponse_ != NULL) m_staccountcreateroleresponse_->::CreateRole_Account_Response::Clear();
  clear_has_m_staccountcreateroleresponse();
}
inline const ::CreateRole_Account_Response& CSMsgBody::m_staccountcreateroleresponse() const {
  return m_staccountcreateroleresponse_ != NULL ? *m_staccountcreateroleresponse_ : *default_instance_->m_staccountcreateroleresponse_;
}
inline ::CreateRole_Account_Response* CSMsgBody::mutable_m_staccountcreateroleresponse() {
  set_has_m_staccountcreateroleresponse();
  if (m_staccountcreateroleresponse_ == NULL) m_staccountcreateroleresponse_ = new ::CreateRole_Account_Response;
  return m_staccountcreateroleresponse_;
}
inline ::CreateRole_Account_Response* CSMsgBody::release_m_staccountcreateroleresponse() {
  clear_has_m_staccountcreateroleresponse();
  ::CreateRole_Account_Response* temp = m_staccountcreateroleresponse_;
  m_staccountcreateroleresponse_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountcreateroleresponse(::CreateRole_Account_Response* m_staccountcreateroleresponse) {
  delete m_staccountcreateroleresponse_;
  m_staccountcreateroleresponse_ = m_staccountcreateroleresponse;
  if (m_staccountcreateroleresponse) {
    set_has_m_staccountcreateroleresponse();
  } else {
    clear_has_m_staccountcreateroleresponse();
  }
}

// optional .Account_ListZone_Request m_stAccount_ListZone_Request = 23;
inline bool CSMsgBody::has_m_staccount_listzone_request() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSMsgBody::set_has_m_staccount_listzone_request() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSMsgBody::clear_has_m_staccount_listzone_request() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSMsgBody::clear_m_staccount_listzone_request() {
  if (m_staccount_listzone_request_ != NULL) m_staccount_listzone_request_->::Account_ListZone_Request::Clear();
  clear_has_m_staccount_listzone_request();
}
inline const ::Account_ListZone_Request& CSMsgBody::m_staccount_listzone_request() const {
  return m_staccount_listzone_request_ != NULL ? *m_staccount_listzone_request_ : *default_instance_->m_staccount_listzone_request_;
}
inline ::Account_ListZone_Request* CSMsgBody::mutable_m_staccount_listzone_request() {
  set_has_m_staccount_listzone_request();
  if (m_staccount_listzone_request_ == NULL) m_staccount_listzone_request_ = new ::Account_ListZone_Request;
  return m_staccount_listzone_request_;
}
inline ::Account_ListZone_Request* CSMsgBody::release_m_staccount_listzone_request() {
  clear_has_m_staccount_listzone_request();
  ::Account_ListZone_Request* temp = m_staccount_listzone_request_;
  m_staccount_listzone_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccount_listzone_request(::Account_ListZone_Request* m_staccount_listzone_request) {
  delete m_staccount_listzone_request_;
  m_staccount_listzone_request_ = m_staccount_listzone_request;
  if (m_staccount_listzone_request) {
    set_has_m_staccount_listzone_request();
  } else {
    clear_has_m_staccount_listzone_request();
  }
}

// optional .Account_ListZone_Response m_stAccount_ListZone_Response = 24;
inline bool CSMsgBody::has_m_staccount_listzone_response() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSMsgBody::set_has_m_staccount_listzone_response() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSMsgBody::clear_has_m_staccount_listzone_response() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSMsgBody::clear_m_staccount_listzone_response() {
  if (m_staccount_listzone_response_ != NULL) m_staccount_listzone_response_->::Account_ListZone_Response::Clear();
  clear_has_m_staccount_listzone_response();
}
inline const ::Account_ListZone_Response& CSMsgBody::m_staccount_listzone_response() const {
  return m_staccount_listzone_response_ != NULL ? *m_staccount_listzone_response_ : *default_instance_->m_staccount_listzone_response_;
}
inline ::Account_ListZone_Response* CSMsgBody::mutable_m_staccount_listzone_response() {
  set_has_m_staccount_listzone_response();
  if (m_staccount_listzone_response_ == NULL) m_staccount_listzone_response_ = new ::Account_ListZone_Response;
  return m_staccount_listzone_response_;
}
inline ::Account_ListZone_Response* CSMsgBody::release_m_staccount_listzone_response() {
  clear_has_m_staccount_listzone_response();
  ::Account_ListZone_Response* temp = m_staccount_listzone_response_;
  m_staccount_listzone_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccount_listzone_response(::Account_ListZone_Response* m_staccount_listzone_response) {
  delete m_staccount_listzone_response_;
  m_staccount_listzone_response_ = m_staccount_listzone_response;
  if (m_staccount_listzone_response) {
    set_has_m_staccount_listzone_response();
  } else {
    clear_has_m_staccount_listzone_response();
  }
}

// optional .DeleteRole_Account_Request m_stAccountDeleteRoleRequest = 25;
inline bool CSMsgBody::has_m_staccountdeleterolerequest() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdeleterolerequest() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSMsgBody::clear_has_m_staccountdeleterolerequest() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSMsgBody::clear_m_staccountdeleterolerequest() {
  if (m_staccountdeleterolerequest_ != NULL) m_staccountdeleterolerequest_->::DeleteRole_Account_Request::Clear();
  clear_has_m_staccountdeleterolerequest();
}
inline const ::DeleteRole_Account_Request& CSMsgBody::m_staccountdeleterolerequest() const {
  return m_staccountdeleterolerequest_ != NULL ? *m_staccountdeleterolerequest_ : *default_instance_->m_staccountdeleterolerequest_;
}
inline ::DeleteRole_Account_Request* CSMsgBody::mutable_m_staccountdeleterolerequest() {
  set_has_m_staccountdeleterolerequest();
  if (m_staccountdeleterolerequest_ == NULL) m_staccountdeleterolerequest_ = new ::DeleteRole_Account_Request;
  return m_staccountdeleterolerequest_;
}
inline ::DeleteRole_Account_Request* CSMsgBody::release_m_staccountdeleterolerequest() {
  clear_has_m_staccountdeleterolerequest();
  ::DeleteRole_Account_Request* temp = m_staccountdeleterolerequest_;
  m_staccountdeleterolerequest_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdeleterolerequest(::DeleteRole_Account_Request* m_staccountdeleterolerequest) {
  delete m_staccountdeleterolerequest_;
  m_staccountdeleterolerequest_ = m_staccountdeleterolerequest;
  if (m_staccountdeleterolerequest) {
    set_has_m_staccountdeleterolerequest();
  } else {
    clear_has_m_staccountdeleterolerequest();
  }
}

// optional .DeleteRole_Account_Response m_stAccountDeleteRoleResponse = 26;
inline bool CSMsgBody::has_m_staccountdeleteroleresponse() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdeleteroleresponse() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSMsgBody::clear_has_m_staccountdeleteroleresponse() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSMsgBody::clear_m_staccountdeleteroleresponse() {
  if (m_staccountdeleteroleresponse_ != NULL) m_staccountdeleteroleresponse_->::DeleteRole_Account_Response::Clear();
  clear_has_m_staccountdeleteroleresponse();
}
inline const ::DeleteRole_Account_Response& CSMsgBody::m_staccountdeleteroleresponse() const {
  return m_staccountdeleteroleresponse_ != NULL ? *m_staccountdeleteroleresponse_ : *default_instance_->m_staccountdeleteroleresponse_;
}
inline ::DeleteRole_Account_Response* CSMsgBody::mutable_m_staccountdeleteroleresponse() {
  set_has_m_staccountdeleteroleresponse();
  if (m_staccountdeleteroleresponse_ == NULL) m_staccountdeleteroleresponse_ = new ::DeleteRole_Account_Response;
  return m_staccountdeleteroleresponse_;
}
inline ::DeleteRole_Account_Response* CSMsgBody::release_m_staccountdeleteroleresponse() {
  clear_has_m_staccountdeleteroleresponse();
  ::DeleteRole_Account_Response* temp = m_staccountdeleteroleresponse_;
  m_staccountdeleteroleresponse_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdeleteroleresponse(::DeleteRole_Account_Response* m_staccountdeleteroleresponse) {
  delete m_staccountdeleteroleresponse_;
  m_staccountdeleteroleresponse_ = m_staccountdeleteroleresponse;
  if (m_staccountdeleteroleresponse) {
    set_has_m_staccountdeleteroleresponse();
  } else {
    clear_has_m_staccountdeleteroleresponse();
  }
}

// optional .Account_ListRole_Request m_stAccountListRoleRequest = 27;
inline bool CSMsgBody::has_m_staccountlistrolerequest() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountlistrolerequest() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSMsgBody::clear_has_m_staccountlistrolerequest() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSMsgBody::clear_m_staccountlistrolerequest() {
  if (m_staccountlistrolerequest_ != NULL) m_staccountlistrolerequest_->::Account_ListRole_Request::Clear();
  clear_has_m_staccountlistrolerequest();
}
inline const ::Account_ListRole_Request& CSMsgBody::m_staccountlistrolerequest() const {
  return m_staccountlistrolerequest_ != NULL ? *m_staccountlistrolerequest_ : *default_instance_->m_staccountlistrolerequest_;
}
inline ::Account_ListRole_Request* CSMsgBody::mutable_m_staccountlistrolerequest() {
  set_has_m_staccountlistrolerequest();
  if (m_staccountlistrolerequest_ == NULL) m_staccountlistrolerequest_ = new ::Account_ListRole_Request;
  return m_staccountlistrolerequest_;
}
inline ::Account_ListRole_Request* CSMsgBody::release_m_staccountlistrolerequest() {
  clear_has_m_staccountlistrolerequest();
  ::Account_ListRole_Request* temp = m_staccountlistrolerequest_;
  m_staccountlistrolerequest_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountlistrolerequest(::Account_ListRole_Request* m_staccountlistrolerequest) {
  delete m_staccountlistrolerequest_;
  m_staccountlistrolerequest_ = m_staccountlistrolerequest;
  if (m_staccountlistrolerequest) {
    set_has_m_staccountlistrolerequest();
  } else {
    clear_has_m_staccountlistrolerequest();
  }
}

// optional .Account_ListRole_Response m_stAccountListRoleResponse = 28;
inline bool CSMsgBody::has_m_staccountlistroleresponse() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountlistroleresponse() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSMsgBody::clear_has_m_staccountlistroleresponse() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSMsgBody::clear_m_staccountlistroleresponse() {
  if (m_staccountlistroleresponse_ != NULL) m_staccountlistroleresponse_->::Account_ListRole_Response::Clear();
  clear_has_m_staccountlistroleresponse();
}
inline const ::Account_ListRole_Response& CSMsgBody::m_staccountlistroleresponse() const {
  return m_staccountlistroleresponse_ != NULL ? *m_staccountlistroleresponse_ : *default_instance_->m_staccountlistroleresponse_;
}
inline ::Account_ListRole_Response* CSMsgBody::mutable_m_staccountlistroleresponse() {
  set_has_m_staccountlistroleresponse();
  if (m_staccountlistroleresponse_ == NULL) m_staccountlistroleresponse_ = new ::Account_ListRole_Response;
  return m_staccountlistroleresponse_;
}
inline ::Account_ListRole_Response* CSMsgBody::release_m_staccountlistroleresponse() {
  clear_has_m_staccountlistroleresponse();
  ::Account_ListRole_Response* temp = m_staccountlistroleresponse_;
  m_staccountlistroleresponse_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountlistroleresponse(::Account_ListRole_Response* m_staccountlistroleresponse) {
  delete m_staccountlistroleresponse_;
  m_staccountlistroleresponse_ = m_staccountlistroleresponse;
  if (m_staccountlistroleresponse) {
    set_has_m_staccountlistroleresponse();
  } else {
    clear_has_m_staccountlistroleresponse();
  }
}

// optional .LogoutServer_Response m_stLogoutServer_Response = 30;
inline bool CSMsgBody::has_m_stlogoutserver_response() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSMsgBody::set_has_m_stlogoutserver_response() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSMsgBody::clear_has_m_stlogoutserver_response() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSMsgBody::clear_m_stlogoutserver_response() {
  if (m_stlogoutserver_response_ != NULL) m_stlogoutserver_response_->::LogoutServer_Response::Clear();
  clear_has_m_stlogoutserver_response();
}
inline const ::LogoutServer_Response& CSMsgBody::m_stlogoutserver_response() const {
  return m_stlogoutserver_response_ != NULL ? *m_stlogoutserver_response_ : *default_instance_->m_stlogoutserver_response_;
}
inline ::LogoutServer_Response* CSMsgBody::mutable_m_stlogoutserver_response() {
  set_has_m_stlogoutserver_response();
  if (m_stlogoutserver_response_ == NULL) m_stlogoutserver_response_ = new ::LogoutServer_Response;
  return m_stlogoutserver_response_;
}
inline ::LogoutServer_Response* CSMsgBody::release_m_stlogoutserver_response() {
  clear_has_m_stlogoutserver_response();
  ::LogoutServer_Response* temp = m_stlogoutserver_response_;
  m_stlogoutserver_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stlogoutserver_response(::LogoutServer_Response* m_stlogoutserver_response) {
  delete m_stlogoutserver_response_;
  m_stlogoutserver_response_ = m_stlogoutserver_response;
  if (m_stlogoutserver_response) {
    set_has_m_stlogoutserver_response();
  } else {
    clear_has_m_stlogoutserver_response();
  }
}

// optional .World_ZoneChanged_Notify m_stWorld_ZoneChanged_Notify = 31;
inline bool CSMsgBody::has_m_stworld_zonechanged_notify() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_zonechanged_notify() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSMsgBody::clear_has_m_stworld_zonechanged_notify() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSMsgBody::clear_m_stworld_zonechanged_notify() {
  if (m_stworld_zonechanged_notify_ != NULL) m_stworld_zonechanged_notify_->::World_ZoneChanged_Notify::Clear();
  clear_has_m_stworld_zonechanged_notify();
}
inline const ::World_ZoneChanged_Notify& CSMsgBody::m_stworld_zonechanged_notify() const {
  return m_stworld_zonechanged_notify_ != NULL ? *m_stworld_zonechanged_notify_ : *default_instance_->m_stworld_zonechanged_notify_;
}
inline ::World_ZoneChanged_Notify* CSMsgBody::mutable_m_stworld_zonechanged_notify() {
  set_has_m_stworld_zonechanged_notify();
  if (m_stworld_zonechanged_notify_ == NULL) m_stworld_zonechanged_notify_ = new ::World_ZoneChanged_Notify;
  return m_stworld_zonechanged_notify_;
}
inline ::World_ZoneChanged_Notify* CSMsgBody::release_m_stworld_zonechanged_notify() {
  clear_has_m_stworld_zonechanged_notify();
  ::World_ZoneChanged_Notify* temp = m_stworld_zonechanged_notify_;
  m_stworld_zonechanged_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_zonechanged_notify(::World_ZoneChanged_Notify* m_stworld_zonechanged_notify) {
  delete m_stworld_zonechanged_notify_;
  m_stworld_zonechanged_notify_ = m_stworld_zonechanged_notify;
  if (m_stworld_zonechanged_notify) {
    set_has_m_stworld_zonechanged_notify();
  } else {
    clear_has_m_stworld_zonechanged_notify();
  }
}

// optional .World_CreateRole_Request m_stWorld_CreateRole_Request = 32;
inline bool CSMsgBody::has_m_stworld_createrole_request() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_createrole_request() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSMsgBody::clear_has_m_stworld_createrole_request() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSMsgBody::clear_m_stworld_createrole_request() {
  if (m_stworld_createrole_request_ != NULL) m_stworld_createrole_request_->::World_CreateRole_Request::Clear();
  clear_has_m_stworld_createrole_request();
}
inline const ::World_CreateRole_Request& CSMsgBody::m_stworld_createrole_request() const {
  return m_stworld_createrole_request_ != NULL ? *m_stworld_createrole_request_ : *default_instance_->m_stworld_createrole_request_;
}
inline ::World_CreateRole_Request* CSMsgBody::mutable_m_stworld_createrole_request() {
  set_has_m_stworld_createrole_request();
  if (m_stworld_createrole_request_ == NULL) m_stworld_createrole_request_ = new ::World_CreateRole_Request;
  return m_stworld_createrole_request_;
}
inline ::World_CreateRole_Request* CSMsgBody::release_m_stworld_createrole_request() {
  clear_has_m_stworld_createrole_request();
  ::World_CreateRole_Request* temp = m_stworld_createrole_request_;
  m_stworld_createrole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_createrole_request(::World_CreateRole_Request* m_stworld_createrole_request) {
  delete m_stworld_createrole_request_;
  m_stworld_createrole_request_ = m_stworld_createrole_request;
  if (m_stworld_createrole_request) {
    set_has_m_stworld_createrole_request();
  } else {
    clear_has_m_stworld_createrole_request();
  }
}

// optional .World_CreateRole_Response m_stWorld_CreateRole_Response = 33;
inline bool CSMsgBody::has_m_stworld_createrole_response() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_createrole_response() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSMsgBody::clear_has_m_stworld_createrole_response() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSMsgBody::clear_m_stworld_createrole_response() {
  if (m_stworld_createrole_response_ != NULL) m_stworld_createrole_response_->::World_CreateRole_Response::Clear();
  clear_has_m_stworld_createrole_response();
}
inline const ::World_CreateRole_Response& CSMsgBody::m_stworld_createrole_response() const {
  return m_stworld_createrole_response_ != NULL ? *m_stworld_createrole_response_ : *default_instance_->m_stworld_createrole_response_;
}
inline ::World_CreateRole_Response* CSMsgBody::mutable_m_stworld_createrole_response() {
  set_has_m_stworld_createrole_response();
  if (m_stworld_createrole_response_ == NULL) m_stworld_createrole_response_ = new ::World_CreateRole_Response;
  return m_stworld_createrole_response_;
}
inline ::World_CreateRole_Response* CSMsgBody::release_m_stworld_createrole_response() {
  clear_has_m_stworld_createrole_response();
  ::World_CreateRole_Response* temp = m_stworld_createrole_response_;
  m_stworld_createrole_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_createrole_response(::World_CreateRole_Response* m_stworld_createrole_response) {
  delete m_stworld_createrole_response_;
  m_stworld_createrole_response_ = m_stworld_createrole_response;
  if (m_stworld_createrole_response) {
    set_has_m_stworld_createrole_response();
  } else {
    clear_has_m_stworld_createrole_response();
  }
}

// optional .World_FetchRole_Request m_stWorld_FetchRole_Request = 34;
inline bool CSMsgBody::has_m_stworld_fetchrole_request() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_fetchrole_request() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSMsgBody::clear_has_m_stworld_fetchrole_request() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSMsgBody::clear_m_stworld_fetchrole_request() {
  if (m_stworld_fetchrole_request_ != NULL) m_stworld_fetchrole_request_->::World_FetchRole_Request::Clear();
  clear_has_m_stworld_fetchrole_request();
}
inline const ::World_FetchRole_Request& CSMsgBody::m_stworld_fetchrole_request() const {
  return m_stworld_fetchrole_request_ != NULL ? *m_stworld_fetchrole_request_ : *default_instance_->m_stworld_fetchrole_request_;
}
inline ::World_FetchRole_Request* CSMsgBody::mutable_m_stworld_fetchrole_request() {
  set_has_m_stworld_fetchrole_request();
  if (m_stworld_fetchrole_request_ == NULL) m_stworld_fetchrole_request_ = new ::World_FetchRole_Request;
  return m_stworld_fetchrole_request_;
}
inline ::World_FetchRole_Request* CSMsgBody::release_m_stworld_fetchrole_request() {
  clear_has_m_stworld_fetchrole_request();
  ::World_FetchRole_Request* temp = m_stworld_fetchrole_request_;
  m_stworld_fetchrole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_fetchrole_request(::World_FetchRole_Request* m_stworld_fetchrole_request) {
  delete m_stworld_fetchrole_request_;
  m_stworld_fetchrole_request_ = m_stworld_fetchrole_request;
  if (m_stworld_fetchrole_request) {
    set_has_m_stworld_fetchrole_request();
  } else {
    clear_has_m_stworld_fetchrole_request();
  }
}

// optional .World_FetchRole_Response m_stWorld_FetchRole_Response = 35;
inline bool CSMsgBody::has_m_stworld_fetchrole_response() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_fetchrole_response() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CSMsgBody::clear_has_m_stworld_fetchrole_response() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CSMsgBody::clear_m_stworld_fetchrole_response() {
  if (m_stworld_fetchrole_response_ != NULL) m_stworld_fetchrole_response_->::World_FetchRole_Response::Clear();
  clear_has_m_stworld_fetchrole_response();
}
inline const ::World_FetchRole_Response& CSMsgBody::m_stworld_fetchrole_response() const {
  return m_stworld_fetchrole_response_ != NULL ? *m_stworld_fetchrole_response_ : *default_instance_->m_stworld_fetchrole_response_;
}
inline ::World_FetchRole_Response* CSMsgBody::mutable_m_stworld_fetchrole_response() {
  set_has_m_stworld_fetchrole_response();
  if (m_stworld_fetchrole_response_ == NULL) m_stworld_fetchrole_response_ = new ::World_FetchRole_Response;
  return m_stworld_fetchrole_response_;
}
inline ::World_FetchRole_Response* CSMsgBody::release_m_stworld_fetchrole_response() {
  clear_has_m_stworld_fetchrole_response();
  ::World_FetchRole_Response* temp = m_stworld_fetchrole_response_;
  m_stworld_fetchrole_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_fetchrole_response(::World_FetchRole_Response* m_stworld_fetchrole_response) {
  delete m_stworld_fetchrole_response_;
  m_stworld_fetchrole_response_ = m_stworld_fetchrole_response;
  if (m_stworld_fetchrole_response) {
    set_has_m_stworld_fetchrole_response();
  } else {
    clear_has_m_stworld_fetchrole_response();
  }
}

// optional .Zone_Logout_Notify m_stZone_Logout_Notify = 36;
inline bool CSMsgBody::has_m_stzone_logout_notify() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_logout_notify() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CSMsgBody::clear_has_m_stzone_logout_notify() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CSMsgBody::clear_m_stzone_logout_notify() {
  if (m_stzone_logout_notify_ != NULL) m_stzone_logout_notify_->::Zone_Logout_Notify::Clear();
  clear_has_m_stzone_logout_notify();
}
inline const ::Zone_Logout_Notify& CSMsgBody::m_stzone_logout_notify() const {
  return m_stzone_logout_notify_ != NULL ? *m_stzone_logout_notify_ : *default_instance_->m_stzone_logout_notify_;
}
inline ::Zone_Logout_Notify* CSMsgBody::mutable_m_stzone_logout_notify() {
  set_has_m_stzone_logout_notify();
  if (m_stzone_logout_notify_ == NULL) m_stzone_logout_notify_ = new ::Zone_Logout_Notify;
  return m_stzone_logout_notify_;
}
inline ::Zone_Logout_Notify* CSMsgBody::release_m_stzone_logout_notify() {
  clear_has_m_stzone_logout_notify();
  ::Zone_Logout_Notify* temp = m_stzone_logout_notify_;
  m_stzone_logout_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_logout_notify(::Zone_Logout_Notify* m_stzone_logout_notify) {
  delete m_stzone_logout_notify_;
  m_stzone_logout_notify_ = m_stzone_logout_notify;
  if (m_stzone_logout_notify) {
    set_has_m_stzone_logout_notify();
  } else {
    clear_has_m_stzone_logout_notify();
  }
}

// optional .World_UpdateRole_Request m_stWorld_UpdateRole_Request = 37;
inline bool CSMsgBody::has_m_stworld_updaterole_request() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_updaterole_request() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CSMsgBody::clear_has_m_stworld_updaterole_request() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CSMsgBody::clear_m_stworld_updaterole_request() {
  if (m_stworld_updaterole_request_ != NULL) m_stworld_updaterole_request_->::World_UpdateRole_Request::Clear();
  clear_has_m_stworld_updaterole_request();
}
inline const ::World_UpdateRole_Request& CSMsgBody::m_stworld_updaterole_request() const {
  return m_stworld_updaterole_request_ != NULL ? *m_stworld_updaterole_request_ : *default_instance_->m_stworld_updaterole_request_;
}
inline ::World_UpdateRole_Request* CSMsgBody::mutable_m_stworld_updaterole_request() {
  set_has_m_stworld_updaterole_request();
  if (m_stworld_updaterole_request_ == NULL) m_stworld_updaterole_request_ = new ::World_UpdateRole_Request;
  return m_stworld_updaterole_request_;
}
inline ::World_UpdateRole_Request* CSMsgBody::release_m_stworld_updaterole_request() {
  clear_has_m_stworld_updaterole_request();
  ::World_UpdateRole_Request* temp = m_stworld_updaterole_request_;
  m_stworld_updaterole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_updaterole_request(::World_UpdateRole_Request* m_stworld_updaterole_request) {
  delete m_stworld_updaterole_request_;
  m_stworld_updaterole_request_ = m_stworld_updaterole_request;
  if (m_stworld_updaterole_request) {
    set_has_m_stworld_updaterole_request();
  } else {
    clear_has_m_stworld_updaterole_request();
  }
}

// optional .World_UpdateRole_Response m_stWorld_UpdateRole_Response = 38;
inline bool CSMsgBody::has_m_stworld_updaterole_response() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_updaterole_response() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CSMsgBody::clear_has_m_stworld_updaterole_response() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CSMsgBody::clear_m_stworld_updaterole_response() {
  if (m_stworld_updaterole_response_ != NULL) m_stworld_updaterole_response_->::World_UpdateRole_Response::Clear();
  clear_has_m_stworld_updaterole_response();
}
inline const ::World_UpdateRole_Response& CSMsgBody::m_stworld_updaterole_response() const {
  return m_stworld_updaterole_response_ != NULL ? *m_stworld_updaterole_response_ : *default_instance_->m_stworld_updaterole_response_;
}
inline ::World_UpdateRole_Response* CSMsgBody::mutable_m_stworld_updaterole_response() {
  set_has_m_stworld_updaterole_response();
  if (m_stworld_updaterole_response_ == NULL) m_stworld_updaterole_response_ = new ::World_UpdateRole_Response;
  return m_stworld_updaterole_response_;
}
inline ::World_UpdateRole_Response* CSMsgBody::release_m_stworld_updaterole_response() {
  clear_has_m_stworld_updaterole_response();
  ::World_UpdateRole_Response* temp = m_stworld_updaterole_response_;
  m_stworld_updaterole_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_updaterole_response(::World_UpdateRole_Response* m_stworld_updaterole_response) {
  delete m_stworld_updaterole_response_;
  m_stworld_updaterole_response_ = m_stworld_updaterole_response;
  if (m_stworld_updaterole_response) {
    set_has_m_stworld_updaterole_response();
  } else {
    clear_has_m_stworld_updaterole_response();
  }
}

// optional .Zone_GetFriendInfo_Request m_stZone_GetFriendInfo_Request = 39;
inline bool CSMsgBody::has_m_stzone_getfriendinfo_request() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getfriendinfo_request() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSMsgBody::clear_has_m_stzone_getfriendinfo_request() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSMsgBody::clear_m_stzone_getfriendinfo_request() {
  if (m_stzone_getfriendinfo_request_ != NULL) m_stzone_getfriendinfo_request_->::Zone_GetFriendInfo_Request::Clear();
  clear_has_m_stzone_getfriendinfo_request();
}
inline const ::Zone_GetFriendInfo_Request& CSMsgBody::m_stzone_getfriendinfo_request() const {
  return m_stzone_getfriendinfo_request_ != NULL ? *m_stzone_getfriendinfo_request_ : *default_instance_->m_stzone_getfriendinfo_request_;
}
inline ::Zone_GetFriendInfo_Request* CSMsgBody::mutable_m_stzone_getfriendinfo_request() {
  set_has_m_stzone_getfriendinfo_request();
  if (m_stzone_getfriendinfo_request_ == NULL) m_stzone_getfriendinfo_request_ = new ::Zone_GetFriendInfo_Request;
  return m_stzone_getfriendinfo_request_;
}
inline ::Zone_GetFriendInfo_Request* CSMsgBody::release_m_stzone_getfriendinfo_request() {
  clear_has_m_stzone_getfriendinfo_request();
  ::Zone_GetFriendInfo_Request* temp = m_stzone_getfriendinfo_request_;
  m_stzone_getfriendinfo_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getfriendinfo_request(::Zone_GetFriendInfo_Request* m_stzone_getfriendinfo_request) {
  delete m_stzone_getfriendinfo_request_;
  m_stzone_getfriendinfo_request_ = m_stzone_getfriendinfo_request;
  if (m_stzone_getfriendinfo_request) {
    set_has_m_stzone_getfriendinfo_request();
  } else {
    clear_has_m_stzone_getfriendinfo_request();
  }
}

// optional .Zone_GetFriendInfo_Response m_stZone_GetFriendInfo_Response = 40;
inline bool CSMsgBody::has_m_stzone_getfriendinfo_response() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getfriendinfo_response() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSMsgBody::clear_has_m_stzone_getfriendinfo_response() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSMsgBody::clear_m_stzone_getfriendinfo_response() {
  if (m_stzone_getfriendinfo_response_ != NULL) m_stzone_getfriendinfo_response_->::Zone_GetFriendInfo_Response::Clear();
  clear_has_m_stzone_getfriendinfo_response();
}
inline const ::Zone_GetFriendInfo_Response& CSMsgBody::m_stzone_getfriendinfo_response() const {
  return m_stzone_getfriendinfo_response_ != NULL ? *m_stzone_getfriendinfo_response_ : *default_instance_->m_stzone_getfriendinfo_response_;
}
inline ::Zone_GetFriendInfo_Response* CSMsgBody::mutable_m_stzone_getfriendinfo_response() {
  set_has_m_stzone_getfriendinfo_response();
  if (m_stzone_getfriendinfo_response_ == NULL) m_stzone_getfriendinfo_response_ = new ::Zone_GetFriendInfo_Response;
  return m_stzone_getfriendinfo_response_;
}
inline ::Zone_GetFriendInfo_Response* CSMsgBody::release_m_stzone_getfriendinfo_response() {
  clear_has_m_stzone_getfriendinfo_response();
  ::Zone_GetFriendInfo_Response* temp = m_stzone_getfriendinfo_response_;
  m_stzone_getfriendinfo_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getfriendinfo_response(::Zone_GetFriendInfo_Response* m_stzone_getfriendinfo_response) {
  delete m_stzone_getfriendinfo_response_;
  m_stzone_getfriendinfo_response_ = m_stzone_getfriendinfo_response;
  if (m_stzone_getfriendinfo_response) {
    set_has_m_stzone_getfriendinfo_response();
  } else {
    clear_has_m_stzone_getfriendinfo_response();
  }
}

// optional .Zone_LoginServer_Request m_stZone_LoginServer_Request = 41;
inline bool CSMsgBody::has_m_stzone_loginserver_request() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_loginserver_request() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSMsgBody::clear_has_m_stzone_loginserver_request() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSMsgBody::clear_m_stzone_loginserver_request() {
  if (m_stzone_loginserver_request_ != NULL) m_stzone_loginserver_request_->::Zone_LoginServer_Request::Clear();
  clear_has_m_stzone_loginserver_request();
}
inline const ::Zone_LoginServer_Request& CSMsgBody::m_stzone_loginserver_request() const {
  return m_stzone_loginserver_request_ != NULL ? *m_stzone_loginserver_request_ : *default_instance_->m_stzone_loginserver_request_;
}
inline ::Zone_LoginServer_Request* CSMsgBody::mutable_m_stzone_loginserver_request() {
  set_has_m_stzone_loginserver_request();
  if (m_stzone_loginserver_request_ == NULL) m_stzone_loginserver_request_ = new ::Zone_LoginServer_Request;
  return m_stzone_loginserver_request_;
}
inline ::Zone_LoginServer_Request* CSMsgBody::release_m_stzone_loginserver_request() {
  clear_has_m_stzone_loginserver_request();
  ::Zone_LoginServer_Request* temp = m_stzone_loginserver_request_;
  m_stzone_loginserver_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_loginserver_request(::Zone_LoginServer_Request* m_stzone_loginserver_request) {
  delete m_stzone_loginserver_request_;
  m_stzone_loginserver_request_ = m_stzone_loginserver_request;
  if (m_stzone_loginserver_request) {
    set_has_m_stzone_loginserver_request();
  } else {
    clear_has_m_stzone_loginserver_request();
  }
}

// optional .Zone_LoginServer_Response m_stZone_LoginServer_Response = 42;
inline bool CSMsgBody::has_m_stzone_loginserver_response() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_loginserver_response() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSMsgBody::clear_has_m_stzone_loginserver_response() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSMsgBody::clear_m_stzone_loginserver_response() {
  if (m_stzone_loginserver_response_ != NULL) m_stzone_loginserver_response_->::Zone_LoginServer_Response::Clear();
  clear_has_m_stzone_loginserver_response();
}
inline const ::Zone_LoginServer_Response& CSMsgBody::m_stzone_loginserver_response() const {
  return m_stzone_loginserver_response_ != NULL ? *m_stzone_loginserver_response_ : *default_instance_->m_stzone_loginserver_response_;
}
inline ::Zone_LoginServer_Response* CSMsgBody::mutable_m_stzone_loginserver_response() {
  set_has_m_stzone_loginserver_response();
  if (m_stzone_loginserver_response_ == NULL) m_stzone_loginserver_response_ = new ::Zone_LoginServer_Response;
  return m_stzone_loginserver_response_;
}
inline ::Zone_LoginServer_Response* CSMsgBody::release_m_stzone_loginserver_response() {
  clear_has_m_stzone_loginserver_response();
  ::Zone_LoginServer_Response* temp = m_stzone_loginserver_response_;
  m_stzone_loginserver_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_loginserver_response(::Zone_LoginServer_Response* m_stzone_loginserver_response) {
  delete m_stzone_loginserver_response_;
  m_stzone_loginserver_response_ = m_stzone_loginserver_response;
  if (m_stzone_loginserver_response) {
    set_has_m_stzone_loginserver_response();
  } else {
    clear_has_m_stzone_loginserver_response();
  }
}

// optional .World_KickRole_Request m_stWorld_KickRole_Request = 43;
inline bool CSMsgBody::has_m_stworld_kickrole_request() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_kickrole_request() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSMsgBody::clear_has_m_stworld_kickrole_request() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSMsgBody::clear_m_stworld_kickrole_request() {
  if (m_stworld_kickrole_request_ != NULL) m_stworld_kickrole_request_->::World_KickRole_Request::Clear();
  clear_has_m_stworld_kickrole_request();
}
inline const ::World_KickRole_Request& CSMsgBody::m_stworld_kickrole_request() const {
  return m_stworld_kickrole_request_ != NULL ? *m_stworld_kickrole_request_ : *default_instance_->m_stworld_kickrole_request_;
}
inline ::World_KickRole_Request* CSMsgBody::mutable_m_stworld_kickrole_request() {
  set_has_m_stworld_kickrole_request();
  if (m_stworld_kickrole_request_ == NULL) m_stworld_kickrole_request_ = new ::World_KickRole_Request;
  return m_stworld_kickrole_request_;
}
inline ::World_KickRole_Request* CSMsgBody::release_m_stworld_kickrole_request() {
  clear_has_m_stworld_kickrole_request();
  ::World_KickRole_Request* temp = m_stworld_kickrole_request_;
  m_stworld_kickrole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_kickrole_request(::World_KickRole_Request* m_stworld_kickrole_request) {
  delete m_stworld_kickrole_request_;
  m_stworld_kickrole_request_ = m_stworld_kickrole_request;
  if (m_stworld_kickrole_request) {
    set_has_m_stworld_kickrole_request();
  } else {
    clear_has_m_stworld_kickrole_request();
  }
}

// optional .World_KickRole_Response m_stWorld_KickRole_Response = 44;
inline bool CSMsgBody::has_m_stworld_kickrole_response() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_kickrole_response() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSMsgBody::clear_has_m_stworld_kickrole_response() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSMsgBody::clear_m_stworld_kickrole_response() {
  if (m_stworld_kickrole_response_ != NULL) m_stworld_kickrole_response_->::World_KickRole_Response::Clear();
  clear_has_m_stworld_kickrole_response();
}
inline const ::World_KickRole_Response& CSMsgBody::m_stworld_kickrole_response() const {
  return m_stworld_kickrole_response_ != NULL ? *m_stworld_kickrole_response_ : *default_instance_->m_stworld_kickrole_response_;
}
inline ::World_KickRole_Response* CSMsgBody::mutable_m_stworld_kickrole_response() {
  set_has_m_stworld_kickrole_response();
  if (m_stworld_kickrole_response_ == NULL) m_stworld_kickrole_response_ = new ::World_KickRole_Response;
  return m_stworld_kickrole_response_;
}
inline ::World_KickRole_Response* CSMsgBody::release_m_stworld_kickrole_response() {
  clear_has_m_stworld_kickrole_response();
  ::World_KickRole_Response* temp = m_stworld_kickrole_response_;
  m_stworld_kickrole_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_kickrole_response(::World_KickRole_Response* m_stworld_kickrole_response) {
  delete m_stworld_kickrole_response_;
  m_stworld_kickrole_response_ = m_stworld_kickrole_response;
  if (m_stworld_kickrole_response) {
    set_has_m_stworld_kickrole_response();
  } else {
    clear_has_m_stworld_kickrole_response();
  }
}

// optional .Zone_OnlineRole_Request m_stZone_OnlineRole_Request = 45;
inline bool CSMsgBody::has_m_stzone_onlinerole_request() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_onlinerole_request() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSMsgBody::clear_has_m_stzone_onlinerole_request() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSMsgBody::clear_m_stzone_onlinerole_request() {
  if (m_stzone_onlinerole_request_ != NULL) m_stzone_onlinerole_request_->::Zone_OnlineRole_Request::Clear();
  clear_has_m_stzone_onlinerole_request();
}
inline const ::Zone_OnlineRole_Request& CSMsgBody::m_stzone_onlinerole_request() const {
  return m_stzone_onlinerole_request_ != NULL ? *m_stzone_onlinerole_request_ : *default_instance_->m_stzone_onlinerole_request_;
}
inline ::Zone_OnlineRole_Request* CSMsgBody::mutable_m_stzone_onlinerole_request() {
  set_has_m_stzone_onlinerole_request();
  if (m_stzone_onlinerole_request_ == NULL) m_stzone_onlinerole_request_ = new ::Zone_OnlineRole_Request;
  return m_stzone_onlinerole_request_;
}
inline ::Zone_OnlineRole_Request* CSMsgBody::release_m_stzone_onlinerole_request() {
  clear_has_m_stzone_onlinerole_request();
  ::Zone_OnlineRole_Request* temp = m_stzone_onlinerole_request_;
  m_stzone_onlinerole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_onlinerole_request(::Zone_OnlineRole_Request* m_stzone_onlinerole_request) {
  delete m_stzone_onlinerole_request_;
  m_stzone_onlinerole_request_ = m_stzone_onlinerole_request;
  if (m_stzone_onlinerole_request) {
    set_has_m_stzone_onlinerole_request();
  } else {
    clear_has_m_stzone_onlinerole_request();
  }
}

// optional .World_OnlineStat_Request m_stWorld_OnlineStat_Request = 46;
inline bool CSMsgBody::has_m_stworld_onlinestat_request() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_onlinestat_request() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CSMsgBody::clear_has_m_stworld_onlinestat_request() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CSMsgBody::clear_m_stworld_onlinestat_request() {
  if (m_stworld_onlinestat_request_ != NULL) m_stworld_onlinestat_request_->::World_OnlineStat_Request::Clear();
  clear_has_m_stworld_onlinestat_request();
}
inline const ::World_OnlineStat_Request& CSMsgBody::m_stworld_onlinestat_request() const {
  return m_stworld_onlinestat_request_ != NULL ? *m_stworld_onlinestat_request_ : *default_instance_->m_stworld_onlinestat_request_;
}
inline ::World_OnlineStat_Request* CSMsgBody::mutable_m_stworld_onlinestat_request() {
  set_has_m_stworld_onlinestat_request();
  if (m_stworld_onlinestat_request_ == NULL) m_stworld_onlinestat_request_ = new ::World_OnlineStat_Request;
  return m_stworld_onlinestat_request_;
}
inline ::World_OnlineStat_Request* CSMsgBody::release_m_stworld_onlinestat_request() {
  clear_has_m_stworld_onlinestat_request();
  ::World_OnlineStat_Request* temp = m_stworld_onlinestat_request_;
  m_stworld_onlinestat_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_onlinestat_request(::World_OnlineStat_Request* m_stworld_onlinestat_request) {
  delete m_stworld_onlinestat_request_;
  m_stworld_onlinestat_request_ = m_stworld_onlinestat_request;
  if (m_stworld_onlinestat_request) {
    set_has_m_stworld_onlinestat_request();
  } else {
    clear_has_m_stworld_onlinestat_request();
  }
}

// optional .World_OnlineStat_Response m_stWorld_OnlineStat_Response = 47;
inline bool CSMsgBody::has_m_stworld_onlinestat_response() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_onlinestat_response() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CSMsgBody::clear_has_m_stworld_onlinestat_response() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CSMsgBody::clear_m_stworld_onlinestat_response() {
  if (m_stworld_onlinestat_response_ != NULL) m_stworld_onlinestat_response_->::World_OnlineStat_Response::Clear();
  clear_has_m_stworld_onlinestat_response();
}
inline const ::World_OnlineStat_Response& CSMsgBody::m_stworld_onlinestat_response() const {
  return m_stworld_onlinestat_response_ != NULL ? *m_stworld_onlinestat_response_ : *default_instance_->m_stworld_onlinestat_response_;
}
inline ::World_OnlineStat_Response* CSMsgBody::mutable_m_stworld_onlinestat_response() {
  set_has_m_stworld_onlinestat_response();
  if (m_stworld_onlinestat_response_ == NULL) m_stworld_onlinestat_response_ = new ::World_OnlineStat_Response;
  return m_stworld_onlinestat_response_;
}
inline ::World_OnlineStat_Response* CSMsgBody::release_m_stworld_onlinestat_response() {
  clear_has_m_stworld_onlinestat_response();
  ::World_OnlineStat_Response* temp = m_stworld_onlinestat_response_;
  m_stworld_onlinestat_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_onlinestat_response(::World_OnlineStat_Response* m_stworld_onlinestat_response) {
  delete m_stworld_onlinestat_response_;
  m_stworld_onlinestat_response_ = m_stworld_onlinestat_response;
  if (m_stworld_onlinestat_response) {
    set_has_m_stworld_onlinestat_response();
  } else {
    clear_has_m_stworld_onlinestat_response();
  }
}

// optional .Zone_GameMaster_Request m_stZone_GameMaster_Request = 48;
inline bool CSMsgBody::has_m_stzone_gamemaster_request() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_gamemaster_request() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CSMsgBody::clear_has_m_stzone_gamemaster_request() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CSMsgBody::clear_m_stzone_gamemaster_request() {
  if (m_stzone_gamemaster_request_ != NULL) m_stzone_gamemaster_request_->::Zone_GameMaster_Request::Clear();
  clear_has_m_stzone_gamemaster_request();
}
inline const ::Zone_GameMaster_Request& CSMsgBody::m_stzone_gamemaster_request() const {
  return m_stzone_gamemaster_request_ != NULL ? *m_stzone_gamemaster_request_ : *default_instance_->m_stzone_gamemaster_request_;
}
inline ::Zone_GameMaster_Request* CSMsgBody::mutable_m_stzone_gamemaster_request() {
  set_has_m_stzone_gamemaster_request();
  if (m_stzone_gamemaster_request_ == NULL) m_stzone_gamemaster_request_ = new ::Zone_GameMaster_Request;
  return m_stzone_gamemaster_request_;
}
inline ::Zone_GameMaster_Request* CSMsgBody::release_m_stzone_gamemaster_request() {
  clear_has_m_stzone_gamemaster_request();
  ::Zone_GameMaster_Request* temp = m_stzone_gamemaster_request_;
  m_stzone_gamemaster_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_gamemaster_request(::Zone_GameMaster_Request* m_stzone_gamemaster_request) {
  delete m_stzone_gamemaster_request_;
  m_stzone_gamemaster_request_ = m_stzone_gamemaster_request;
  if (m_stzone_gamemaster_request) {
    set_has_m_stzone_gamemaster_request();
  } else {
    clear_has_m_stzone_gamemaster_request();
  }
}

// optional .Zone_GameMaster_Response m_stZone_GameMaster_Response = 49;
inline bool CSMsgBody::has_m_stzone_gamemaster_response() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_gamemaster_response() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CSMsgBody::clear_has_m_stzone_gamemaster_response() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CSMsgBody::clear_m_stzone_gamemaster_response() {
  if (m_stzone_gamemaster_response_ != NULL) m_stzone_gamemaster_response_->::Zone_GameMaster_Response::Clear();
  clear_has_m_stzone_gamemaster_response();
}
inline const ::Zone_GameMaster_Response& CSMsgBody::m_stzone_gamemaster_response() const {
  return m_stzone_gamemaster_response_ != NULL ? *m_stzone_gamemaster_response_ : *default_instance_->m_stzone_gamemaster_response_;
}
inline ::Zone_GameMaster_Response* CSMsgBody::mutable_m_stzone_gamemaster_response() {
  set_has_m_stzone_gamemaster_response();
  if (m_stzone_gamemaster_response_ == NULL) m_stzone_gamemaster_response_ = new ::Zone_GameMaster_Response;
  return m_stzone_gamemaster_response_;
}
inline ::Zone_GameMaster_Response* CSMsgBody::release_m_stzone_gamemaster_response() {
  clear_has_m_stzone_gamemaster_response();
  ::Zone_GameMaster_Response* temp = m_stzone_gamemaster_response_;
  m_stzone_gamemaster_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_gamemaster_response(::Zone_GameMaster_Response* m_stzone_gamemaster_response) {
  delete m_stzone_gamemaster_response_;
  m_stzone_gamemaster_response_ = m_stzone_gamemaster_response;
  if (m_stzone_gamemaster_response) {
    set_has_m_stzone_gamemaster_response();
  } else {
    clear_has_m_stzone_gamemaster_response();
  }
}

// optional .AddNewName_Request m_stAddNewName_Request = 50;
inline bool CSMsgBody::has_m_staddnewname_request() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CSMsgBody::set_has_m_staddnewname_request() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CSMsgBody::clear_has_m_staddnewname_request() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CSMsgBody::clear_m_staddnewname_request() {
  if (m_staddnewname_request_ != NULL) m_staddnewname_request_->::AddNewName_Request::Clear();
  clear_has_m_staddnewname_request();
}
inline const ::AddNewName_Request& CSMsgBody::m_staddnewname_request() const {
  return m_staddnewname_request_ != NULL ? *m_staddnewname_request_ : *default_instance_->m_staddnewname_request_;
}
inline ::AddNewName_Request* CSMsgBody::mutable_m_staddnewname_request() {
  set_has_m_staddnewname_request();
  if (m_staddnewname_request_ == NULL) m_staddnewname_request_ = new ::AddNewName_Request;
  return m_staddnewname_request_;
}
inline ::AddNewName_Request* CSMsgBody::release_m_staddnewname_request() {
  clear_has_m_staddnewname_request();
  ::AddNewName_Request* temp = m_staddnewname_request_;
  m_staddnewname_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staddnewname_request(::AddNewName_Request* m_staddnewname_request) {
  delete m_staddnewname_request_;
  m_staddnewname_request_ = m_staddnewname_request;
  if (m_staddnewname_request) {
    set_has_m_staddnewname_request();
  } else {
    clear_has_m_staddnewname_request();
  }
}

// optional .AddNewName_Response m_stAddNewName_Response = 51;
inline bool CSMsgBody::has_m_staddnewname_response() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CSMsgBody::set_has_m_staddnewname_response() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CSMsgBody::clear_has_m_staddnewname_response() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CSMsgBody::clear_m_staddnewname_response() {
  if (m_staddnewname_response_ != NULL) m_staddnewname_response_->::AddNewName_Response::Clear();
  clear_has_m_staddnewname_response();
}
inline const ::AddNewName_Response& CSMsgBody::m_staddnewname_response() const {
  return m_staddnewname_response_ != NULL ? *m_staddnewname_response_ : *default_instance_->m_staddnewname_response_;
}
inline ::AddNewName_Response* CSMsgBody::mutable_m_staddnewname_response() {
  set_has_m_staddnewname_response();
  if (m_staddnewname_response_ == NULL) m_staddnewname_response_ = new ::AddNewName_Response;
  return m_staddnewname_response_;
}
inline ::AddNewName_Response* CSMsgBody::release_m_staddnewname_response() {
  clear_has_m_staddnewname_response();
  ::AddNewName_Response* temp = m_staddnewname_response_;
  m_staddnewname_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staddnewname_response(::AddNewName_Response* m_staddnewname_response) {
  delete m_staddnewname_response_;
  m_staddnewname_response_ = m_staddnewname_response;
  if (m_staddnewname_response) {
    set_has_m_staddnewname_response();
  } else {
    clear_has_m_staddnewname_response();
  }
}

// optional .DeleteName_Request m_stDeleteName_Request = 52;
inline bool CSMsgBody::has_m_stdeletename_request() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CSMsgBody::set_has_m_stdeletename_request() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CSMsgBody::clear_has_m_stdeletename_request() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CSMsgBody::clear_m_stdeletename_request() {
  if (m_stdeletename_request_ != NULL) m_stdeletename_request_->::DeleteName_Request::Clear();
  clear_has_m_stdeletename_request();
}
inline const ::DeleteName_Request& CSMsgBody::m_stdeletename_request() const {
  return m_stdeletename_request_ != NULL ? *m_stdeletename_request_ : *default_instance_->m_stdeletename_request_;
}
inline ::DeleteName_Request* CSMsgBody::mutable_m_stdeletename_request() {
  set_has_m_stdeletename_request();
  if (m_stdeletename_request_ == NULL) m_stdeletename_request_ = new ::DeleteName_Request;
  return m_stdeletename_request_;
}
inline ::DeleteName_Request* CSMsgBody::release_m_stdeletename_request() {
  clear_has_m_stdeletename_request();
  ::DeleteName_Request* temp = m_stdeletename_request_;
  m_stdeletename_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stdeletename_request(::DeleteName_Request* m_stdeletename_request) {
  delete m_stdeletename_request_;
  m_stdeletename_request_ = m_stdeletename_request;
  if (m_stdeletename_request) {
    set_has_m_stdeletename_request();
  } else {
    clear_has_m_stdeletename_request();
  }
}

// optional .DeleteName_Response m_stDeleteName_Response = 53;
inline bool CSMsgBody::has_m_stdeletename_response() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CSMsgBody::set_has_m_stdeletename_response() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CSMsgBody::clear_has_m_stdeletename_response() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CSMsgBody::clear_m_stdeletename_response() {
  if (m_stdeletename_response_ != NULL) m_stdeletename_response_->::DeleteName_Response::Clear();
  clear_has_m_stdeletename_response();
}
inline const ::DeleteName_Response& CSMsgBody::m_stdeletename_response() const {
  return m_stdeletename_response_ != NULL ? *m_stdeletename_response_ : *default_instance_->m_stdeletename_response_;
}
inline ::DeleteName_Response* CSMsgBody::mutable_m_stdeletename_response() {
  set_has_m_stdeletename_response();
  if (m_stdeletename_response_ == NULL) m_stdeletename_response_ = new ::DeleteName_Response;
  return m_stdeletename_response_;
}
inline ::DeleteName_Response* CSMsgBody::release_m_stdeletename_response() {
  clear_has_m_stdeletename_response();
  ::DeleteName_Response* temp = m_stdeletename_response_;
  m_stdeletename_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stdeletename_response(::DeleteName_Response* m_stdeletename_response) {
  delete m_stdeletename_response_;
  m_stdeletename_response_ = m_stdeletename_response;
  if (m_stdeletename_response) {
    set_has_m_stdeletename_response();
  } else {
    clear_has_m_stdeletename_response();
  }
}

// optional .Zone_LoginServer_Notify m_stLoginServer_Notify = 57;
inline bool CSMsgBody::has_m_stloginserver_notify() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CSMsgBody::set_has_m_stloginserver_notify() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CSMsgBody::clear_has_m_stloginserver_notify() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CSMsgBody::clear_m_stloginserver_notify() {
  if (m_stloginserver_notify_ != NULL) m_stloginserver_notify_->::Zone_LoginServer_Notify::Clear();
  clear_has_m_stloginserver_notify();
}
inline const ::Zone_LoginServer_Notify& CSMsgBody::m_stloginserver_notify() const {
  return m_stloginserver_notify_ != NULL ? *m_stloginserver_notify_ : *default_instance_->m_stloginserver_notify_;
}
inline ::Zone_LoginServer_Notify* CSMsgBody::mutable_m_stloginserver_notify() {
  set_has_m_stloginserver_notify();
  if (m_stloginserver_notify_ == NULL) m_stloginserver_notify_ = new ::Zone_LoginServer_Notify;
  return m_stloginserver_notify_;
}
inline ::Zone_LoginServer_Notify* CSMsgBody::release_m_stloginserver_notify() {
  clear_has_m_stloginserver_notify();
  ::Zone_LoginServer_Notify* temp = m_stloginserver_notify_;
  m_stloginserver_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stloginserver_notify(::Zone_LoginServer_Notify* m_stloginserver_notify) {
  delete m_stloginserver_notify_;
  m_stloginserver_notify_ = m_stloginserver_notify;
  if (m_stloginserver_notify) {
    set_has_m_stloginserver_notify();
  } else {
    clear_has_m_stloginserver_notify();
  }
}

// optional .Zone_RepOpera_Request m_stZone_RepOpera_Request = 64;
inline bool CSMsgBody::has_m_stzone_repopera_request() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_repopera_request() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CSMsgBody::clear_has_m_stzone_repopera_request() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CSMsgBody::clear_m_stzone_repopera_request() {
  if (m_stzone_repopera_request_ != NULL) m_stzone_repopera_request_->::Zone_RepOpera_Request::Clear();
  clear_has_m_stzone_repopera_request();
}
inline const ::Zone_RepOpera_Request& CSMsgBody::m_stzone_repopera_request() const {
  return m_stzone_repopera_request_ != NULL ? *m_stzone_repopera_request_ : *default_instance_->m_stzone_repopera_request_;
}
inline ::Zone_RepOpera_Request* CSMsgBody::mutable_m_stzone_repopera_request() {
  set_has_m_stzone_repopera_request();
  if (m_stzone_repopera_request_ == NULL) m_stzone_repopera_request_ = new ::Zone_RepOpera_Request;
  return m_stzone_repopera_request_;
}
inline ::Zone_RepOpera_Request* CSMsgBody::release_m_stzone_repopera_request() {
  clear_has_m_stzone_repopera_request();
  ::Zone_RepOpera_Request* temp = m_stzone_repopera_request_;
  m_stzone_repopera_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_repopera_request(::Zone_RepOpera_Request* m_stzone_repopera_request) {
  delete m_stzone_repopera_request_;
  m_stzone_repopera_request_ = m_stzone_repopera_request;
  if (m_stzone_repopera_request) {
    set_has_m_stzone_repopera_request();
  } else {
    clear_has_m_stzone_repopera_request();
  }
}

// optional .Zone_RepOpera_Response m_stZone_RepOpera_Response = 65;
inline bool CSMsgBody::has_m_stzone_repopera_response() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_repopera_response() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CSMsgBody::clear_has_m_stzone_repopera_response() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CSMsgBody::clear_m_stzone_repopera_response() {
  if (m_stzone_repopera_response_ != NULL) m_stzone_repopera_response_->::Zone_RepOpera_Response::Clear();
  clear_has_m_stzone_repopera_response();
}
inline const ::Zone_RepOpera_Response& CSMsgBody::m_stzone_repopera_response() const {
  return m_stzone_repopera_response_ != NULL ? *m_stzone_repopera_response_ : *default_instance_->m_stzone_repopera_response_;
}
inline ::Zone_RepOpera_Response* CSMsgBody::mutable_m_stzone_repopera_response() {
  set_has_m_stzone_repopera_response();
  if (m_stzone_repopera_response_ == NULL) m_stzone_repopera_response_ = new ::Zone_RepOpera_Response;
  return m_stzone_repopera_response_;
}
inline ::Zone_RepOpera_Response* CSMsgBody::release_m_stzone_repopera_response() {
  clear_has_m_stzone_repopera_response();
  ::Zone_RepOpera_Response* temp = m_stzone_repopera_response_;
  m_stzone_repopera_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_repopera_response(::Zone_RepOpera_Response* m_stzone_repopera_response) {
  delete m_stzone_repopera_response_;
  m_stzone_repopera_response_ = m_stzone_repopera_response;
  if (m_stzone_repopera_response) {
    set_has_m_stzone_repopera_response();
  } else {
    clear_has_m_stzone_repopera_response();
  }
}

// optional .Zone_GetRepInfo_Request m_stZone_GetRepInfo_Request = 66;
inline bool CSMsgBody::has_m_stzone_getrepinfo_request() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getrepinfo_request() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CSMsgBody::clear_has_m_stzone_getrepinfo_request() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CSMsgBody::clear_m_stzone_getrepinfo_request() {
  if (m_stzone_getrepinfo_request_ != NULL) m_stzone_getrepinfo_request_->::Zone_GetRepInfo_Request::Clear();
  clear_has_m_stzone_getrepinfo_request();
}
inline const ::Zone_GetRepInfo_Request& CSMsgBody::m_stzone_getrepinfo_request() const {
  return m_stzone_getrepinfo_request_ != NULL ? *m_stzone_getrepinfo_request_ : *default_instance_->m_stzone_getrepinfo_request_;
}
inline ::Zone_GetRepInfo_Request* CSMsgBody::mutable_m_stzone_getrepinfo_request() {
  set_has_m_stzone_getrepinfo_request();
  if (m_stzone_getrepinfo_request_ == NULL) m_stzone_getrepinfo_request_ = new ::Zone_GetRepInfo_Request;
  return m_stzone_getrepinfo_request_;
}
inline ::Zone_GetRepInfo_Request* CSMsgBody::release_m_stzone_getrepinfo_request() {
  clear_has_m_stzone_getrepinfo_request();
  ::Zone_GetRepInfo_Request* temp = m_stzone_getrepinfo_request_;
  m_stzone_getrepinfo_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getrepinfo_request(::Zone_GetRepInfo_Request* m_stzone_getrepinfo_request) {
  delete m_stzone_getrepinfo_request_;
  m_stzone_getrepinfo_request_ = m_stzone_getrepinfo_request;
  if (m_stzone_getrepinfo_request) {
    set_has_m_stzone_getrepinfo_request();
  } else {
    clear_has_m_stzone_getrepinfo_request();
  }
}

// optional .Zone_GetRepInfo_Response m_stZone_GetRepInfo_Response = 67;
inline bool CSMsgBody::has_m_stzone_getrepinfo_response() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getrepinfo_response() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CSMsgBody::clear_has_m_stzone_getrepinfo_response() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CSMsgBody::clear_m_stzone_getrepinfo_response() {
  if (m_stzone_getrepinfo_response_ != NULL) m_stzone_getrepinfo_response_->::Zone_GetRepInfo_Response::Clear();
  clear_has_m_stzone_getrepinfo_response();
}
inline const ::Zone_GetRepInfo_Response& CSMsgBody::m_stzone_getrepinfo_response() const {
  return m_stzone_getrepinfo_response_ != NULL ? *m_stzone_getrepinfo_response_ : *default_instance_->m_stzone_getrepinfo_response_;
}
inline ::Zone_GetRepInfo_Response* CSMsgBody::mutable_m_stzone_getrepinfo_response() {
  set_has_m_stzone_getrepinfo_response();
  if (m_stzone_getrepinfo_response_ == NULL) m_stzone_getrepinfo_response_ = new ::Zone_GetRepInfo_Response;
  return m_stzone_getrepinfo_response_;
}
inline ::Zone_GetRepInfo_Response* CSMsgBody::release_m_stzone_getrepinfo_response() {
  clear_has_m_stzone_getrepinfo_response();
  ::Zone_GetRepInfo_Response* temp = m_stzone_getrepinfo_response_;
  m_stzone_getrepinfo_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getrepinfo_response(::Zone_GetRepInfo_Response* m_stzone_getrepinfo_response) {
  delete m_stzone_getrepinfo_response_;
  m_stzone_getrepinfo_response_ = m_stzone_getrepinfo_response;
  if (m_stzone_getrepinfo_response) {
    set_has_m_stzone_getrepinfo_response();
  } else {
    clear_has_m_stzone_getrepinfo_response();
  }
}

// optional .Zone_WearEquip_Request m_stZone_WearEquip_Request = 68;
inline bool CSMsgBody::has_m_stzone_wearequip_request() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_wearequip_request() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CSMsgBody::clear_has_m_stzone_wearequip_request() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CSMsgBody::clear_m_stzone_wearequip_request() {
  if (m_stzone_wearequip_request_ != NULL) m_stzone_wearequip_request_->::Zone_WearEquip_Request::Clear();
  clear_has_m_stzone_wearequip_request();
}
inline const ::Zone_WearEquip_Request& CSMsgBody::m_stzone_wearequip_request() const {
  return m_stzone_wearequip_request_ != NULL ? *m_stzone_wearequip_request_ : *default_instance_->m_stzone_wearequip_request_;
}
inline ::Zone_WearEquip_Request* CSMsgBody::mutable_m_stzone_wearequip_request() {
  set_has_m_stzone_wearequip_request();
  if (m_stzone_wearequip_request_ == NULL) m_stzone_wearequip_request_ = new ::Zone_WearEquip_Request;
  return m_stzone_wearequip_request_;
}
inline ::Zone_WearEquip_Request* CSMsgBody::release_m_stzone_wearequip_request() {
  clear_has_m_stzone_wearequip_request();
  ::Zone_WearEquip_Request* temp = m_stzone_wearequip_request_;
  m_stzone_wearequip_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_wearequip_request(::Zone_WearEquip_Request* m_stzone_wearequip_request) {
  delete m_stzone_wearequip_request_;
  m_stzone_wearequip_request_ = m_stzone_wearequip_request;
  if (m_stzone_wearequip_request) {
    set_has_m_stzone_wearequip_request();
  } else {
    clear_has_m_stzone_wearequip_request();
  }
}

// optional .Zone_WearEquip_Response m_stZone_WearEquip_Response = 69;
inline bool CSMsgBody::has_m_stzone_wearequip_response() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_wearequip_response() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CSMsgBody::clear_has_m_stzone_wearequip_response() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CSMsgBody::clear_m_stzone_wearequip_response() {
  if (m_stzone_wearequip_response_ != NULL) m_stzone_wearequip_response_->::Zone_WearEquip_Response::Clear();
  clear_has_m_stzone_wearequip_response();
}
inline const ::Zone_WearEquip_Response& CSMsgBody::m_stzone_wearequip_response() const {
  return m_stzone_wearequip_response_ != NULL ? *m_stzone_wearequip_response_ : *default_instance_->m_stzone_wearequip_response_;
}
inline ::Zone_WearEquip_Response* CSMsgBody::mutable_m_stzone_wearequip_response() {
  set_has_m_stzone_wearequip_response();
  if (m_stzone_wearequip_response_ == NULL) m_stzone_wearequip_response_ = new ::Zone_WearEquip_Response;
  return m_stzone_wearequip_response_;
}
inline ::Zone_WearEquip_Response* CSMsgBody::release_m_stzone_wearequip_response() {
  clear_has_m_stzone_wearequip_response();
  ::Zone_WearEquip_Response* temp = m_stzone_wearequip_response_;
  m_stzone_wearequip_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_wearequip_response(::Zone_WearEquip_Response* m_stzone_wearequip_response) {
  delete m_stzone_wearequip_response_;
  m_stzone_wearequip_response_ = m_stzone_wearequip_response;
  if (m_stzone_wearequip_response) {
    set_has_m_stzone_wearequip_response();
  } else {
    clear_has_m_stzone_wearequip_response();
  }
}

// optional .Zone_RepChange_Notify m_stZone_RepChange_Notify = 70;
inline bool CSMsgBody::has_m_stzone_repchange_notify() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_repchange_notify() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CSMsgBody::clear_has_m_stzone_repchange_notify() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CSMsgBody::clear_m_stzone_repchange_notify() {
  if (m_stzone_repchange_notify_ != NULL) m_stzone_repchange_notify_->::Zone_RepChange_Notify::Clear();
  clear_has_m_stzone_repchange_notify();
}
inline const ::Zone_RepChange_Notify& CSMsgBody::m_stzone_repchange_notify() const {
  return m_stzone_repchange_notify_ != NULL ? *m_stzone_repchange_notify_ : *default_instance_->m_stzone_repchange_notify_;
}
inline ::Zone_RepChange_Notify* CSMsgBody::mutable_m_stzone_repchange_notify() {
  set_has_m_stzone_repchange_notify();
  if (m_stzone_repchange_notify_ == NULL) m_stzone_repchange_notify_ = new ::Zone_RepChange_Notify;
  return m_stzone_repchange_notify_;
}
inline ::Zone_RepChange_Notify* CSMsgBody::release_m_stzone_repchange_notify() {
  clear_has_m_stzone_repchange_notify();
  ::Zone_RepChange_Notify* temp = m_stzone_repchange_notify_;
  m_stzone_repchange_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_repchange_notify(::Zone_RepChange_Notify* m_stzone_repchange_notify) {
  delete m_stzone_repchange_notify_;
  m_stzone_repchange_notify_ = m_stzone_repchange_notify;
  if (m_stzone_repchange_notify) {
    set_has_m_stzone_repchange_notify();
  } else {
    clear_has_m_stzone_repchange_notify();
  }
}

// optional .Zone_ResourceChange_Notify m_stZone_ResourceChange_Notify = 73;
inline bool CSMsgBody::has_m_stzone_resourcechange_notify() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_resourcechange_notify() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CSMsgBody::clear_has_m_stzone_resourcechange_notify() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CSMsgBody::clear_m_stzone_resourcechange_notify() {
  if (m_stzone_resourcechange_notify_ != NULL) m_stzone_resourcechange_notify_->::Zone_ResourceChange_Notify::Clear();
  clear_has_m_stzone_resourcechange_notify();
}
inline const ::Zone_ResourceChange_Notify& CSMsgBody::m_stzone_resourcechange_notify() const {
  return m_stzone_resourcechange_notify_ != NULL ? *m_stzone_resourcechange_notify_ : *default_instance_->m_stzone_resourcechange_notify_;
}
inline ::Zone_ResourceChange_Notify* CSMsgBody::mutable_m_stzone_resourcechange_notify() {
  set_has_m_stzone_resourcechange_notify();
  if (m_stzone_resourcechange_notify_ == NULL) m_stzone_resourcechange_notify_ = new ::Zone_ResourceChange_Notify;
  return m_stzone_resourcechange_notify_;
}
inline ::Zone_ResourceChange_Notify* CSMsgBody::release_m_stzone_resourcechange_notify() {
  clear_has_m_stzone_resourcechange_notify();
  ::Zone_ResourceChange_Notify* temp = m_stzone_resourcechange_notify_;
  m_stzone_resourcechange_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_resourcechange_notify(::Zone_ResourceChange_Notify* m_stzone_resourcechange_notify) {
  delete m_stzone_resourcechange_notify_;
  m_stzone_resourcechange_notify_ = m_stzone_resourcechange_notify;
  if (m_stzone_resourcechange_notify) {
    set_has_m_stzone_resourcechange_notify();
  } else {
    clear_has_m_stzone_resourcechange_notify();
  }
}

// optional .Zone_Chat_Request m_stZone_Chat_Request = 76;
inline bool CSMsgBody::has_m_stzone_chat_request() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_chat_request() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CSMsgBody::clear_has_m_stzone_chat_request() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CSMsgBody::clear_m_stzone_chat_request() {
  if (m_stzone_chat_request_ != NULL) m_stzone_chat_request_->::Zone_Chat_Request::Clear();
  clear_has_m_stzone_chat_request();
}
inline const ::Zone_Chat_Request& CSMsgBody::m_stzone_chat_request() const {
  return m_stzone_chat_request_ != NULL ? *m_stzone_chat_request_ : *default_instance_->m_stzone_chat_request_;
}
inline ::Zone_Chat_Request* CSMsgBody::mutable_m_stzone_chat_request() {
  set_has_m_stzone_chat_request();
  if (m_stzone_chat_request_ == NULL) m_stzone_chat_request_ = new ::Zone_Chat_Request;
  return m_stzone_chat_request_;
}
inline ::Zone_Chat_Request* CSMsgBody::release_m_stzone_chat_request() {
  clear_has_m_stzone_chat_request();
  ::Zone_Chat_Request* temp = m_stzone_chat_request_;
  m_stzone_chat_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_chat_request(::Zone_Chat_Request* m_stzone_chat_request) {
  delete m_stzone_chat_request_;
  m_stzone_chat_request_ = m_stzone_chat_request;
  if (m_stzone_chat_request) {
    set_has_m_stzone_chat_request();
  } else {
    clear_has_m_stzone_chat_request();
  }
}

// optional .Zone_Chat_Response m_stZone_Chat_Response = 77;
inline bool CSMsgBody::has_m_stzone_chat_response() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_chat_response() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CSMsgBody::clear_has_m_stzone_chat_response() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CSMsgBody::clear_m_stzone_chat_response() {
  if (m_stzone_chat_response_ != NULL) m_stzone_chat_response_->::Zone_Chat_Response::Clear();
  clear_has_m_stzone_chat_response();
}
inline const ::Zone_Chat_Response& CSMsgBody::m_stzone_chat_response() const {
  return m_stzone_chat_response_ != NULL ? *m_stzone_chat_response_ : *default_instance_->m_stzone_chat_response_;
}
inline ::Zone_Chat_Response* CSMsgBody::mutable_m_stzone_chat_response() {
  set_has_m_stzone_chat_response();
  if (m_stzone_chat_response_ == NULL) m_stzone_chat_response_ = new ::Zone_Chat_Response;
  return m_stzone_chat_response_;
}
inline ::Zone_Chat_Response* CSMsgBody::release_m_stzone_chat_response() {
  clear_has_m_stzone_chat_response();
  ::Zone_Chat_Response* temp = m_stzone_chat_response_;
  m_stzone_chat_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_chat_response(::Zone_Chat_Response* m_stzone_chat_response) {
  delete m_stzone_chat_response_;
  m_stzone_chat_response_ = m_stzone_chat_response;
  if (m_stzone_chat_response) {
    set_has_m_stzone_chat_response();
  } else {
    clear_has_m_stzone_chat_response();
  }
}

// optional .World_Chat_Notify m_stWorld_Chat_Notify = 78;
inline bool CSMsgBody::has_m_stworld_chat_notify() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_chat_notify() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CSMsgBody::clear_has_m_stworld_chat_notify() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CSMsgBody::clear_m_stworld_chat_notify() {
  if (m_stworld_chat_notify_ != NULL) m_stworld_chat_notify_->::World_Chat_Notify::Clear();
  clear_has_m_stworld_chat_notify();
}
inline const ::World_Chat_Notify& CSMsgBody::m_stworld_chat_notify() const {
  return m_stworld_chat_notify_ != NULL ? *m_stworld_chat_notify_ : *default_instance_->m_stworld_chat_notify_;
}
inline ::World_Chat_Notify* CSMsgBody::mutable_m_stworld_chat_notify() {
  set_has_m_stworld_chat_notify();
  if (m_stworld_chat_notify_ == NULL) m_stworld_chat_notify_ = new ::World_Chat_Notify;
  return m_stworld_chat_notify_;
}
inline ::World_Chat_Notify* CSMsgBody::release_m_stworld_chat_notify() {
  clear_has_m_stworld_chat_notify();
  ::World_Chat_Notify* temp = m_stworld_chat_notify_;
  m_stworld_chat_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_chat_notify(::World_Chat_Notify* m_stworld_chat_notify) {
  delete m_stworld_chat_notify_;
  m_stworld_chat_notify_ = m_stworld_chat_notify;
  if (m_stworld_chat_notify) {
    set_has_m_stworld_chat_notify();
  } else {
    clear_has_m_stworld_chat_notify();
  }
}

// optional .Zone_SellItem_Request m_stZone_SellItem_Request = 79;
inline bool CSMsgBody::has_m_stzone_sellitem_request() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_sellitem_request() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CSMsgBody::clear_has_m_stzone_sellitem_request() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CSMsgBody::clear_m_stzone_sellitem_request() {
  if (m_stzone_sellitem_request_ != NULL) m_stzone_sellitem_request_->::Zone_SellItem_Request::Clear();
  clear_has_m_stzone_sellitem_request();
}
inline const ::Zone_SellItem_Request& CSMsgBody::m_stzone_sellitem_request() const {
  return m_stzone_sellitem_request_ != NULL ? *m_stzone_sellitem_request_ : *default_instance_->m_stzone_sellitem_request_;
}
inline ::Zone_SellItem_Request* CSMsgBody::mutable_m_stzone_sellitem_request() {
  set_has_m_stzone_sellitem_request();
  if (m_stzone_sellitem_request_ == NULL) m_stzone_sellitem_request_ = new ::Zone_SellItem_Request;
  return m_stzone_sellitem_request_;
}
inline ::Zone_SellItem_Request* CSMsgBody::release_m_stzone_sellitem_request() {
  clear_has_m_stzone_sellitem_request();
  ::Zone_SellItem_Request* temp = m_stzone_sellitem_request_;
  m_stzone_sellitem_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_sellitem_request(::Zone_SellItem_Request* m_stzone_sellitem_request) {
  delete m_stzone_sellitem_request_;
  m_stzone_sellitem_request_ = m_stzone_sellitem_request;
  if (m_stzone_sellitem_request) {
    set_has_m_stzone_sellitem_request();
  } else {
    clear_has_m_stzone_sellitem_request();
  }
}

// optional .Zone_SellItem_Response m_stZone_SellItem_Response = 80;
inline bool CSMsgBody::has_m_stzone_sellitem_response() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_sellitem_response() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CSMsgBody::clear_has_m_stzone_sellitem_response() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CSMsgBody::clear_m_stzone_sellitem_response() {
  if (m_stzone_sellitem_response_ != NULL) m_stzone_sellitem_response_->::Zone_SellItem_Response::Clear();
  clear_has_m_stzone_sellitem_response();
}
inline const ::Zone_SellItem_Response& CSMsgBody::m_stzone_sellitem_response() const {
  return m_stzone_sellitem_response_ != NULL ? *m_stzone_sellitem_response_ : *default_instance_->m_stzone_sellitem_response_;
}
inline ::Zone_SellItem_Response* CSMsgBody::mutable_m_stzone_sellitem_response() {
  set_has_m_stzone_sellitem_response();
  if (m_stzone_sellitem_response_ == NULL) m_stzone_sellitem_response_ = new ::Zone_SellItem_Response;
  return m_stzone_sellitem_response_;
}
inline ::Zone_SellItem_Response* CSMsgBody::release_m_stzone_sellitem_response() {
  clear_has_m_stzone_sellitem_response();
  ::Zone_SellItem_Response* temp = m_stzone_sellitem_response_;
  m_stzone_sellitem_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_sellitem_response(::Zone_SellItem_Response* m_stzone_sellitem_response) {
  delete m_stzone_sellitem_response_;
  m_stzone_sellitem_response_ = m_stzone_sellitem_response;
  if (m_stzone_sellitem_response) {
    set_has_m_stzone_sellitem_response();
  } else {
    clear_has_m_stzone_sellitem_response();
  }
}

// optional .Zone_DoCombat_Request m_stZone_DoCombat_Request = 81;
inline bool CSMsgBody::has_m_stzone_docombat_request() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_docombat_request() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CSMsgBody::clear_has_m_stzone_docombat_request() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CSMsgBody::clear_m_stzone_docombat_request() {
  if (m_stzone_docombat_request_ != NULL) m_stzone_docombat_request_->::Zone_DoCombat_Request::Clear();
  clear_has_m_stzone_docombat_request();
}
inline const ::Zone_DoCombat_Request& CSMsgBody::m_stzone_docombat_request() const {
  return m_stzone_docombat_request_ != NULL ? *m_stzone_docombat_request_ : *default_instance_->m_stzone_docombat_request_;
}
inline ::Zone_DoCombat_Request* CSMsgBody::mutable_m_stzone_docombat_request() {
  set_has_m_stzone_docombat_request();
  if (m_stzone_docombat_request_ == NULL) m_stzone_docombat_request_ = new ::Zone_DoCombat_Request;
  return m_stzone_docombat_request_;
}
inline ::Zone_DoCombat_Request* CSMsgBody::release_m_stzone_docombat_request() {
  clear_has_m_stzone_docombat_request();
  ::Zone_DoCombat_Request* temp = m_stzone_docombat_request_;
  m_stzone_docombat_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_docombat_request(::Zone_DoCombat_Request* m_stzone_docombat_request) {
  delete m_stzone_docombat_request_;
  m_stzone_docombat_request_ = m_stzone_docombat_request;
  if (m_stzone_docombat_request) {
    set_has_m_stzone_docombat_request();
  } else {
    clear_has_m_stzone_docombat_request();
  }
}

// optional .Zone_DoCombat_Response m_stZone_DoCombat_Response = 82;
inline bool CSMsgBody::has_m_stzone_docombat_response() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_docombat_response() {
  _has_bits_[1] |= 0x20000000u;
}
inline void CSMsgBody::clear_has_m_stzone_docombat_response() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void CSMsgBody::clear_m_stzone_docombat_response() {
  if (m_stzone_docombat_response_ != NULL) m_stzone_docombat_response_->::Zone_DoCombat_Response::Clear();
  clear_has_m_stzone_docombat_response();
}
inline const ::Zone_DoCombat_Response& CSMsgBody::m_stzone_docombat_response() const {
  return m_stzone_docombat_response_ != NULL ? *m_stzone_docombat_response_ : *default_instance_->m_stzone_docombat_response_;
}
inline ::Zone_DoCombat_Response* CSMsgBody::mutable_m_stzone_docombat_response() {
  set_has_m_stzone_docombat_response();
  if (m_stzone_docombat_response_ == NULL) m_stzone_docombat_response_ = new ::Zone_DoCombat_Response;
  return m_stzone_docombat_response_;
}
inline ::Zone_DoCombat_Response* CSMsgBody::release_m_stzone_docombat_response() {
  clear_has_m_stzone_docombat_response();
  ::Zone_DoCombat_Response* temp = m_stzone_docombat_response_;
  m_stzone_docombat_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_docombat_response(::Zone_DoCombat_Response* m_stzone_docombat_response) {
  delete m_stzone_docombat_response_;
  m_stzone_docombat_response_ = m_stzone_docombat_response;
  if (m_stzone_docombat_response) {
    set_has_m_stzone_docombat_response();
  } else {
    clear_has_m_stzone_docombat_response();
  }
}

// optional .Zone_Battlefield_Notify m_stZone_Battlefield_Notify = 83;
inline bool CSMsgBody::has_m_stzone_battlefield_notify() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_battlefield_notify() {
  _has_bits_[1] |= 0x40000000u;
}
inline void CSMsgBody::clear_has_m_stzone_battlefield_notify() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void CSMsgBody::clear_m_stzone_battlefield_notify() {
  if (m_stzone_battlefield_notify_ != NULL) m_stzone_battlefield_notify_->::Zone_Battlefield_Notify::Clear();
  clear_has_m_stzone_battlefield_notify();
}
inline const ::Zone_Battlefield_Notify& CSMsgBody::m_stzone_battlefield_notify() const {
  return m_stzone_battlefield_notify_ != NULL ? *m_stzone_battlefield_notify_ : *default_instance_->m_stzone_battlefield_notify_;
}
inline ::Zone_Battlefield_Notify* CSMsgBody::mutable_m_stzone_battlefield_notify() {
  set_has_m_stzone_battlefield_notify();
  if (m_stzone_battlefield_notify_ == NULL) m_stzone_battlefield_notify_ = new ::Zone_Battlefield_Notify;
  return m_stzone_battlefield_notify_;
}
inline ::Zone_Battlefield_Notify* CSMsgBody::release_m_stzone_battlefield_notify() {
  clear_has_m_stzone_battlefield_notify();
  ::Zone_Battlefield_Notify* temp = m_stzone_battlefield_notify_;
  m_stzone_battlefield_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_battlefield_notify(::Zone_Battlefield_Notify* m_stzone_battlefield_notify) {
  delete m_stzone_battlefield_notify_;
  m_stzone_battlefield_notify_ = m_stzone_battlefield_notify;
  if (m_stzone_battlefield_notify) {
    set_has_m_stzone_battlefield_notify();
  } else {
    clear_has_m_stzone_battlefield_notify();
  }
}

// optional .Zone_CombatMove_Request m_stZone_CombatMove_Request = 84;
inline bool CSMsgBody::has_m_stzone_combatmove_request() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_combatmove_request() {
  _has_bits_[1] |= 0x80000000u;
}
inline void CSMsgBody::clear_has_m_stzone_combatmove_request() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void CSMsgBody::clear_m_stzone_combatmove_request() {
  if (m_stzone_combatmove_request_ != NULL) m_stzone_combatmove_request_->::Zone_CombatMove_Request::Clear();
  clear_has_m_stzone_combatmove_request();
}
inline const ::Zone_CombatMove_Request& CSMsgBody::m_stzone_combatmove_request() const {
  return m_stzone_combatmove_request_ != NULL ? *m_stzone_combatmove_request_ : *default_instance_->m_stzone_combatmove_request_;
}
inline ::Zone_CombatMove_Request* CSMsgBody::mutable_m_stzone_combatmove_request() {
  set_has_m_stzone_combatmove_request();
  if (m_stzone_combatmove_request_ == NULL) m_stzone_combatmove_request_ = new ::Zone_CombatMove_Request;
  return m_stzone_combatmove_request_;
}
inline ::Zone_CombatMove_Request* CSMsgBody::release_m_stzone_combatmove_request() {
  clear_has_m_stzone_combatmove_request();
  ::Zone_CombatMove_Request* temp = m_stzone_combatmove_request_;
  m_stzone_combatmove_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_combatmove_request(::Zone_CombatMove_Request* m_stzone_combatmove_request) {
  delete m_stzone_combatmove_request_;
  m_stzone_combatmove_request_ = m_stzone_combatmove_request;
  if (m_stzone_combatmove_request) {
    set_has_m_stzone_combatmove_request();
  } else {
    clear_has_m_stzone_combatmove_request();
  }
}

// optional .Zone_CombatMove_Response m_stZone_CombatMove_Response = 85;
inline bool CSMsgBody::has_m_stzone_combatmove_response() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_combatmove_response() {
  _has_bits_[2] |= 0x00000001u;
}
inline void CSMsgBody::clear_has_m_stzone_combatmove_response() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void CSMsgBody::clear_m_stzone_combatmove_response() {
  if (m_stzone_combatmove_response_ != NULL) m_stzone_combatmove_response_->::Zone_CombatMove_Response::Clear();
  clear_has_m_stzone_combatmove_response();
}
inline const ::Zone_CombatMove_Response& CSMsgBody::m_stzone_combatmove_response() const {
  return m_stzone_combatmove_response_ != NULL ? *m_stzone_combatmove_response_ : *default_instance_->m_stzone_combatmove_response_;
}
inline ::Zone_CombatMove_Response* CSMsgBody::mutable_m_stzone_combatmove_response() {
  set_has_m_stzone_combatmove_response();
  if (m_stzone_combatmove_response_ == NULL) m_stzone_combatmove_response_ = new ::Zone_CombatMove_Response;
  return m_stzone_combatmove_response_;
}
inline ::Zone_CombatMove_Response* CSMsgBody::release_m_stzone_combatmove_response() {
  clear_has_m_stzone_combatmove_response();
  ::Zone_CombatMove_Response* temp = m_stzone_combatmove_response_;
  m_stzone_combatmove_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_combatmove_response(::Zone_CombatMove_Response* m_stzone_combatmove_response) {
  delete m_stzone_combatmove_response_;
  m_stzone_combatmove_response_ = m_stzone_combatmove_response;
  if (m_stzone_combatmove_response) {
    set_has_m_stzone_combatmove_response();
  } else {
    clear_has_m_stzone_combatmove_response();
  }
}

// optional .Zone_CombatAction_Request m_stZone_CombatAction_Request = 86;
inline bool CSMsgBody::has_m_stzone_combataction_request() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_combataction_request() {
  _has_bits_[2] |= 0x00000002u;
}
inline void CSMsgBody::clear_has_m_stzone_combataction_request() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void CSMsgBody::clear_m_stzone_combataction_request() {
  if (m_stzone_combataction_request_ != NULL) m_stzone_combataction_request_->::Zone_CombatAction_Request::Clear();
  clear_has_m_stzone_combataction_request();
}
inline const ::Zone_CombatAction_Request& CSMsgBody::m_stzone_combataction_request() const {
  return m_stzone_combataction_request_ != NULL ? *m_stzone_combataction_request_ : *default_instance_->m_stzone_combataction_request_;
}
inline ::Zone_CombatAction_Request* CSMsgBody::mutable_m_stzone_combataction_request() {
  set_has_m_stzone_combataction_request();
  if (m_stzone_combataction_request_ == NULL) m_stzone_combataction_request_ = new ::Zone_CombatAction_Request;
  return m_stzone_combataction_request_;
}
inline ::Zone_CombatAction_Request* CSMsgBody::release_m_stzone_combataction_request() {
  clear_has_m_stzone_combataction_request();
  ::Zone_CombatAction_Request* temp = m_stzone_combataction_request_;
  m_stzone_combataction_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_combataction_request(::Zone_CombatAction_Request* m_stzone_combataction_request) {
  delete m_stzone_combataction_request_;
  m_stzone_combataction_request_ = m_stzone_combataction_request;
  if (m_stzone_combataction_request) {
    set_has_m_stzone_combataction_request();
  } else {
    clear_has_m_stzone_combataction_request();
  }
}

// optional .Zone_CombatAction_Response m_stZone_CombatAction_Response = 87;
inline bool CSMsgBody::has_m_stzone_combataction_response() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_combataction_response() {
  _has_bits_[2] |= 0x00000004u;
}
inline void CSMsgBody::clear_has_m_stzone_combataction_response() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void CSMsgBody::clear_m_stzone_combataction_response() {
  if (m_stzone_combataction_response_ != NULL) m_stzone_combataction_response_->::Zone_CombatAction_Response::Clear();
  clear_has_m_stzone_combataction_response();
}
inline const ::Zone_CombatAction_Response& CSMsgBody::m_stzone_combataction_response() const {
  return m_stzone_combataction_response_ != NULL ? *m_stzone_combataction_response_ : *default_instance_->m_stzone_combataction_response_;
}
inline ::Zone_CombatAction_Response* CSMsgBody::mutable_m_stzone_combataction_response() {
  set_has_m_stzone_combataction_response();
  if (m_stzone_combataction_response_ == NULL) m_stzone_combataction_response_ = new ::Zone_CombatAction_Response;
  return m_stzone_combataction_response_;
}
inline ::Zone_CombatAction_Response* CSMsgBody::release_m_stzone_combataction_response() {
  clear_has_m_stzone_combataction_response();
  ::Zone_CombatAction_Response* temp = m_stzone_combataction_response_;
  m_stzone_combataction_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_combataction_response(::Zone_CombatAction_Response* m_stzone_combataction_response) {
  delete m_stzone_combataction_response_;
  m_stzone_combataction_response_ = m_stzone_combataction_response;
  if (m_stzone_combataction_response) {
    set_has_m_stzone_combataction_response();
  } else {
    clear_has_m_stzone_combataction_response();
  }
}

// optional .Zone_CombatMove_Notify m_stZone_CombatMove_Notify = 92;
inline bool CSMsgBody::has_m_stzone_combatmove_notify() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_combatmove_notify() {
  _has_bits_[2] |= 0x00000008u;
}
inline void CSMsgBody::clear_has_m_stzone_combatmove_notify() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void CSMsgBody::clear_m_stzone_combatmove_notify() {
  if (m_stzone_combatmove_notify_ != NULL) m_stzone_combatmove_notify_->::Zone_CombatMove_Notify::Clear();
  clear_has_m_stzone_combatmove_notify();
}
inline const ::Zone_CombatMove_Notify& CSMsgBody::m_stzone_combatmove_notify() const {
  return m_stzone_combatmove_notify_ != NULL ? *m_stzone_combatmove_notify_ : *default_instance_->m_stzone_combatmove_notify_;
}
inline ::Zone_CombatMove_Notify* CSMsgBody::mutable_m_stzone_combatmove_notify() {
  set_has_m_stzone_combatmove_notify();
  if (m_stzone_combatmove_notify_ == NULL) m_stzone_combatmove_notify_ = new ::Zone_CombatMove_Notify;
  return m_stzone_combatmove_notify_;
}
inline ::Zone_CombatMove_Notify* CSMsgBody::release_m_stzone_combatmove_notify() {
  clear_has_m_stzone_combatmove_notify();
  ::Zone_CombatMove_Notify* temp = m_stzone_combatmove_notify_;
  m_stzone_combatmove_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_combatmove_notify(::Zone_CombatMove_Notify* m_stzone_combatmove_notify) {
  delete m_stzone_combatmove_notify_;
  m_stzone_combatmove_notify_ = m_stzone_combatmove_notify;
  if (m_stzone_combatmove_notify) {
    set_has_m_stzone_combatmove_notify();
  } else {
    clear_has_m_stzone_combatmove_notify();
  }
}

// optional .Zone_CombatAction_Notify m_stZone_CombatAction_Notify = 93;
inline bool CSMsgBody::has_m_stzone_combataction_notify() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_combataction_notify() {
  _has_bits_[2] |= 0x00000010u;
}
inline void CSMsgBody::clear_has_m_stzone_combataction_notify() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void CSMsgBody::clear_m_stzone_combataction_notify() {
  if (m_stzone_combataction_notify_ != NULL) m_stzone_combataction_notify_->::Zone_CombatAction_Notify::Clear();
  clear_has_m_stzone_combataction_notify();
}
inline const ::Zone_CombatAction_Notify& CSMsgBody::m_stzone_combataction_notify() const {
  return m_stzone_combataction_notify_ != NULL ? *m_stzone_combataction_notify_ : *default_instance_->m_stzone_combataction_notify_;
}
inline ::Zone_CombatAction_Notify* CSMsgBody::mutable_m_stzone_combataction_notify() {
  set_has_m_stzone_combataction_notify();
  if (m_stzone_combataction_notify_ == NULL) m_stzone_combataction_notify_ = new ::Zone_CombatAction_Notify;
  return m_stzone_combataction_notify_;
}
inline ::Zone_CombatAction_Notify* CSMsgBody::release_m_stzone_combataction_notify() {
  clear_has_m_stzone_combataction_notify();
  ::Zone_CombatAction_Notify* temp = m_stzone_combataction_notify_;
  m_stzone_combataction_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_combataction_notify(::Zone_CombatAction_Notify* m_stzone_combataction_notify) {
  delete m_stzone_combataction_notify_;
  m_stzone_combataction_notify_ = m_stzone_combataction_notify;
  if (m_stzone_combataction_notify) {
    set_has_m_stzone_combataction_notify();
  } else {
    clear_has_m_stzone_combataction_notify();
  }
}

// optional .Zone_FinCombat_Notify m_stZone_FinCombat_Notify = 94;
inline bool CSMsgBody::has_m_stzone_fincombat_notify() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_fincombat_notify() {
  _has_bits_[2] |= 0x00000020u;
}
inline void CSMsgBody::clear_has_m_stzone_fincombat_notify() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void CSMsgBody::clear_m_stzone_fincombat_notify() {
  if (m_stzone_fincombat_notify_ != NULL) m_stzone_fincombat_notify_->::Zone_FinCombat_Notify::Clear();
  clear_has_m_stzone_fincombat_notify();
}
inline const ::Zone_FinCombat_Notify& CSMsgBody::m_stzone_fincombat_notify() const {
  return m_stzone_fincombat_notify_ != NULL ? *m_stzone_fincombat_notify_ : *default_instance_->m_stzone_fincombat_notify_;
}
inline ::Zone_FinCombat_Notify* CSMsgBody::mutable_m_stzone_fincombat_notify() {
  set_has_m_stzone_fincombat_notify();
  if (m_stzone_fincombat_notify_ == NULL) m_stzone_fincombat_notify_ = new ::Zone_FinCombat_Notify;
  return m_stzone_fincombat_notify_;
}
inline ::Zone_FinCombat_Notify* CSMsgBody::release_m_stzone_fincombat_notify() {
  clear_has_m_stzone_fincombat_notify();
  ::Zone_FinCombat_Notify* temp = m_stzone_fincombat_notify_;
  m_stzone_fincombat_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_fincombat_notify(::Zone_FinCombat_Notify* m_stzone_fincombat_notify) {
  delete m_stzone_fincombat_notify_;
  m_stzone_fincombat_notify_ = m_stzone_fincombat_notify;
  if (m_stzone_fincombat_notify) {
    set_has_m_stzone_fincombat_notify();
  } else {
    clear_has_m_stzone_fincombat_notify();
  }
}

// optional .Zone_UnitDirective_Notify m_stZone_UnitDirective_Notify = 95;
inline bool CSMsgBody::has_m_stzone_unitdirective_notify() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_unitdirective_notify() {
  _has_bits_[2] |= 0x00000040u;
}
inline void CSMsgBody::clear_has_m_stzone_unitdirective_notify() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void CSMsgBody::clear_m_stzone_unitdirective_notify() {
  if (m_stzone_unitdirective_notify_ != NULL) m_stzone_unitdirective_notify_->::Zone_UnitDirective_Notify::Clear();
  clear_has_m_stzone_unitdirective_notify();
}
inline const ::Zone_UnitDirective_Notify& CSMsgBody::m_stzone_unitdirective_notify() const {
  return m_stzone_unitdirective_notify_ != NULL ? *m_stzone_unitdirective_notify_ : *default_instance_->m_stzone_unitdirective_notify_;
}
inline ::Zone_UnitDirective_Notify* CSMsgBody::mutable_m_stzone_unitdirective_notify() {
  set_has_m_stzone_unitdirective_notify();
  if (m_stzone_unitdirective_notify_ == NULL) m_stzone_unitdirective_notify_ = new ::Zone_UnitDirective_Notify;
  return m_stzone_unitdirective_notify_;
}
inline ::Zone_UnitDirective_Notify* CSMsgBody::release_m_stzone_unitdirective_notify() {
  clear_has_m_stzone_unitdirective_notify();
  ::Zone_UnitDirective_Notify* temp = m_stzone_unitdirective_notify_;
  m_stzone_unitdirective_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_unitdirective_notify(::Zone_UnitDirective_Notify* m_stzone_unitdirective_notify) {
  delete m_stzone_unitdirective_notify_;
  m_stzone_unitdirective_notify_ = m_stzone_unitdirective_notify;
  if (m_stzone_unitdirective_notify) {
    set_has_m_stzone_unitdirective_notify();
  } else {
    clear_has_m_stzone_unitdirective_notify();
  }
}

// optional .Zone_UpdatePartnerAI_Request m_stZone_UpdatePartnerAI_Request = 111;
inline bool CSMsgBody::has_m_stzone_updatepartnerai_request() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_updatepartnerai_request() {
  _has_bits_[2] |= 0x00000080u;
}
inline void CSMsgBody::clear_has_m_stzone_updatepartnerai_request() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void CSMsgBody::clear_m_stzone_updatepartnerai_request() {
  if (m_stzone_updatepartnerai_request_ != NULL) m_stzone_updatepartnerai_request_->::Zone_UpdatePartnerAI_Request::Clear();
  clear_has_m_stzone_updatepartnerai_request();
}
inline const ::Zone_UpdatePartnerAI_Request& CSMsgBody::m_stzone_updatepartnerai_request() const {
  return m_stzone_updatepartnerai_request_ != NULL ? *m_stzone_updatepartnerai_request_ : *default_instance_->m_stzone_updatepartnerai_request_;
}
inline ::Zone_UpdatePartnerAI_Request* CSMsgBody::mutable_m_stzone_updatepartnerai_request() {
  set_has_m_stzone_updatepartnerai_request();
  if (m_stzone_updatepartnerai_request_ == NULL) m_stzone_updatepartnerai_request_ = new ::Zone_UpdatePartnerAI_Request;
  return m_stzone_updatepartnerai_request_;
}
inline ::Zone_UpdatePartnerAI_Request* CSMsgBody::release_m_stzone_updatepartnerai_request() {
  clear_has_m_stzone_updatepartnerai_request();
  ::Zone_UpdatePartnerAI_Request* temp = m_stzone_updatepartnerai_request_;
  m_stzone_updatepartnerai_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_updatepartnerai_request(::Zone_UpdatePartnerAI_Request* m_stzone_updatepartnerai_request) {
  delete m_stzone_updatepartnerai_request_;
  m_stzone_updatepartnerai_request_ = m_stzone_updatepartnerai_request;
  if (m_stzone_updatepartnerai_request) {
    set_has_m_stzone_updatepartnerai_request();
  } else {
    clear_has_m_stzone_updatepartnerai_request();
  }
}

// optional .Zone_UpdatePartnerAI_Response m_stZone_UpdatePartnerAI_Response = 112;
inline bool CSMsgBody::has_m_stzone_updatepartnerai_response() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_updatepartnerai_response() {
  _has_bits_[2] |= 0x00000100u;
}
inline void CSMsgBody::clear_has_m_stzone_updatepartnerai_response() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void CSMsgBody::clear_m_stzone_updatepartnerai_response() {
  if (m_stzone_updatepartnerai_response_ != NULL) m_stzone_updatepartnerai_response_->::Zone_UpdatePartnerAI_Response::Clear();
  clear_has_m_stzone_updatepartnerai_response();
}
inline const ::Zone_UpdatePartnerAI_Response& CSMsgBody::m_stzone_updatepartnerai_response() const {
  return m_stzone_updatepartnerai_response_ != NULL ? *m_stzone_updatepartnerai_response_ : *default_instance_->m_stzone_updatepartnerai_response_;
}
inline ::Zone_UpdatePartnerAI_Response* CSMsgBody::mutable_m_stzone_updatepartnerai_response() {
  set_has_m_stzone_updatepartnerai_response();
  if (m_stzone_updatepartnerai_response_ == NULL) m_stzone_updatepartnerai_response_ = new ::Zone_UpdatePartnerAI_Response;
  return m_stzone_updatepartnerai_response_;
}
inline ::Zone_UpdatePartnerAI_Response* CSMsgBody::release_m_stzone_updatepartnerai_response() {
  clear_has_m_stzone_updatepartnerai_response();
  ::Zone_UpdatePartnerAI_Response* temp = m_stzone_updatepartnerai_response_;
  m_stzone_updatepartnerai_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_updatepartnerai_response(::Zone_UpdatePartnerAI_Response* m_stzone_updatepartnerai_response) {
  delete m_stzone_updatepartnerai_response_;
  m_stzone_updatepartnerai_response_ = m_stzone_updatepartnerai_response;
  if (m_stzone_updatepartnerai_response) {
    set_has_m_stzone_updatepartnerai_response();
  } else {
    clear_has_m_stzone_updatepartnerai_response();
  }
}

// optional .Zone_CombatAddBuff_Notify m_stZone_CombatAddBuff_Notify = 113;
inline bool CSMsgBody::has_m_stzone_combataddbuff_notify() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_combataddbuff_notify() {
  _has_bits_[2] |= 0x00000200u;
}
inline void CSMsgBody::clear_has_m_stzone_combataddbuff_notify() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void CSMsgBody::clear_m_stzone_combataddbuff_notify() {
  if (m_stzone_combataddbuff_notify_ != NULL) m_stzone_combataddbuff_notify_->::Zone_CombatAddBuff_Notify::Clear();
  clear_has_m_stzone_combataddbuff_notify();
}
inline const ::Zone_CombatAddBuff_Notify& CSMsgBody::m_stzone_combataddbuff_notify() const {
  return m_stzone_combataddbuff_notify_ != NULL ? *m_stzone_combataddbuff_notify_ : *default_instance_->m_stzone_combataddbuff_notify_;
}
inline ::Zone_CombatAddBuff_Notify* CSMsgBody::mutable_m_stzone_combataddbuff_notify() {
  set_has_m_stzone_combataddbuff_notify();
  if (m_stzone_combataddbuff_notify_ == NULL) m_stzone_combataddbuff_notify_ = new ::Zone_CombatAddBuff_Notify;
  return m_stzone_combataddbuff_notify_;
}
inline ::Zone_CombatAddBuff_Notify* CSMsgBody::release_m_stzone_combataddbuff_notify() {
  clear_has_m_stzone_combataddbuff_notify();
  ::Zone_CombatAddBuff_Notify* temp = m_stzone_combataddbuff_notify_;
  m_stzone_combataddbuff_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_combataddbuff_notify(::Zone_CombatAddBuff_Notify* m_stzone_combataddbuff_notify) {
  delete m_stzone_combataddbuff_notify_;
  m_stzone_combataddbuff_notify_ = m_stzone_combataddbuff_notify;
  if (m_stzone_combataddbuff_notify) {
    set_has_m_stzone_combataddbuff_notify();
  } else {
    clear_has_m_stzone_combataddbuff_notify();
  }
}

// optional .Zone_DoBuffEffect_Notify m_stZone_DoBuffEffect_Notify = 114;
inline bool CSMsgBody::has_m_stzone_dobuffeffect_notify() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_dobuffeffect_notify() {
  _has_bits_[2] |= 0x00000400u;
}
inline void CSMsgBody::clear_has_m_stzone_dobuffeffect_notify() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void CSMsgBody::clear_m_stzone_dobuffeffect_notify() {
  if (m_stzone_dobuffeffect_notify_ != NULL) m_stzone_dobuffeffect_notify_->::Zone_DoBuffEffect_Notify::Clear();
  clear_has_m_stzone_dobuffeffect_notify();
}
inline const ::Zone_DoBuffEffect_Notify& CSMsgBody::m_stzone_dobuffeffect_notify() const {
  return m_stzone_dobuffeffect_notify_ != NULL ? *m_stzone_dobuffeffect_notify_ : *default_instance_->m_stzone_dobuffeffect_notify_;
}
inline ::Zone_DoBuffEffect_Notify* CSMsgBody::mutable_m_stzone_dobuffeffect_notify() {
  set_has_m_stzone_dobuffeffect_notify();
  if (m_stzone_dobuffeffect_notify_ == NULL) m_stzone_dobuffeffect_notify_ = new ::Zone_DoBuffEffect_Notify;
  return m_stzone_dobuffeffect_notify_;
}
inline ::Zone_DoBuffEffect_Notify* CSMsgBody::release_m_stzone_dobuffeffect_notify() {
  clear_has_m_stzone_dobuffeffect_notify();
  ::Zone_DoBuffEffect_Notify* temp = m_stzone_dobuffeffect_notify_;
  m_stzone_dobuffeffect_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_dobuffeffect_notify(::Zone_DoBuffEffect_Notify* m_stzone_dobuffeffect_notify) {
  delete m_stzone_dobuffeffect_notify_;
  m_stzone_dobuffeffect_notify_ = m_stzone_dobuffeffect_notify;
  if (m_stzone_dobuffeffect_notify) {
    set_has_m_stzone_dobuffeffect_notify();
  } else {
    clear_has_m_stzone_dobuffeffect_notify();
  }
}

// optional .Zone_RemoveBuff_Notify m_stZone_RemoveBuff_Notify = 115;
inline bool CSMsgBody::has_m_stzone_removebuff_notify() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_removebuff_notify() {
  _has_bits_[2] |= 0x00000800u;
}
inline void CSMsgBody::clear_has_m_stzone_removebuff_notify() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void CSMsgBody::clear_m_stzone_removebuff_notify() {
  if (m_stzone_removebuff_notify_ != NULL) m_stzone_removebuff_notify_->::Zone_RemoveBuff_Notify::Clear();
  clear_has_m_stzone_removebuff_notify();
}
inline const ::Zone_RemoveBuff_Notify& CSMsgBody::m_stzone_removebuff_notify() const {
  return m_stzone_removebuff_notify_ != NULL ? *m_stzone_removebuff_notify_ : *default_instance_->m_stzone_removebuff_notify_;
}
inline ::Zone_RemoveBuff_Notify* CSMsgBody::mutable_m_stzone_removebuff_notify() {
  set_has_m_stzone_removebuff_notify();
  if (m_stzone_removebuff_notify_ == NULL) m_stzone_removebuff_notify_ = new ::Zone_RemoveBuff_Notify;
  return m_stzone_removebuff_notify_;
}
inline ::Zone_RemoveBuff_Notify* CSMsgBody::release_m_stzone_removebuff_notify() {
  clear_has_m_stzone_removebuff_notify();
  ::Zone_RemoveBuff_Notify* temp = m_stzone_removebuff_notify_;
  m_stzone_removebuff_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_removebuff_notify(::Zone_RemoveBuff_Notify* m_stzone_removebuff_notify) {
  delete m_stzone_removebuff_notify_;
  m_stzone_removebuff_notify_ = m_stzone_removebuff_notify;
  if (m_stzone_removebuff_notify) {
    set_has_m_stzone_removebuff_notify();
  } else {
    clear_has_m_stzone_removebuff_notify();
  }
}

// optional .Zone_AddCombatUnit_Notify m_stZone_AddCombatUnit_Notify = 148;
inline bool CSMsgBody::has_m_stzone_addcombatunit_notify() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_addcombatunit_notify() {
  _has_bits_[2] |= 0x00001000u;
}
inline void CSMsgBody::clear_has_m_stzone_addcombatunit_notify() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void CSMsgBody::clear_m_stzone_addcombatunit_notify() {
  if (m_stzone_addcombatunit_notify_ != NULL) m_stzone_addcombatunit_notify_->::Zone_AddCombatUnit_Notify::Clear();
  clear_has_m_stzone_addcombatunit_notify();
}
inline const ::Zone_AddCombatUnit_Notify& CSMsgBody::m_stzone_addcombatunit_notify() const {
  return m_stzone_addcombatunit_notify_ != NULL ? *m_stzone_addcombatunit_notify_ : *default_instance_->m_stzone_addcombatunit_notify_;
}
inline ::Zone_AddCombatUnit_Notify* CSMsgBody::mutable_m_stzone_addcombatunit_notify() {
  set_has_m_stzone_addcombatunit_notify();
  if (m_stzone_addcombatunit_notify_ == NULL) m_stzone_addcombatunit_notify_ = new ::Zone_AddCombatUnit_Notify;
  return m_stzone_addcombatunit_notify_;
}
inline ::Zone_AddCombatUnit_Notify* CSMsgBody::release_m_stzone_addcombatunit_notify() {
  clear_has_m_stzone_addcombatunit_notify();
  ::Zone_AddCombatUnit_Notify* temp = m_stzone_addcombatunit_notify_;
  m_stzone_addcombatunit_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_addcombatunit_notify(::Zone_AddCombatUnit_Notify* m_stzone_addcombatunit_notify) {
  delete m_stzone_addcombatunit_notify_;
  m_stzone_addcombatunit_notify_ = m_stzone_addcombatunit_notify;
  if (m_stzone_addcombatunit_notify) {
    set_has_m_stzone_addcombatunit_notify();
  } else {
    clear_has_m_stzone_addcombatunit_notify();
  }
}

// optional .Zone_KillCombatUnit_Notify m_stZone_KillCombatUnit_Notify = 149;
inline bool CSMsgBody::has_m_stzone_killcombatunit_notify() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_killcombatunit_notify() {
  _has_bits_[2] |= 0x00002000u;
}
inline void CSMsgBody::clear_has_m_stzone_killcombatunit_notify() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void CSMsgBody::clear_m_stzone_killcombatunit_notify() {
  if (m_stzone_killcombatunit_notify_ != NULL) m_stzone_killcombatunit_notify_->::Zone_KillCombatUnit_Notify::Clear();
  clear_has_m_stzone_killcombatunit_notify();
}
inline const ::Zone_KillCombatUnit_Notify& CSMsgBody::m_stzone_killcombatunit_notify() const {
  return m_stzone_killcombatunit_notify_ != NULL ? *m_stzone_killcombatunit_notify_ : *default_instance_->m_stzone_killcombatunit_notify_;
}
inline ::Zone_KillCombatUnit_Notify* CSMsgBody::mutable_m_stzone_killcombatunit_notify() {
  set_has_m_stzone_killcombatunit_notify();
  if (m_stzone_killcombatunit_notify_ == NULL) m_stzone_killcombatunit_notify_ = new ::Zone_KillCombatUnit_Notify;
  return m_stzone_killcombatunit_notify_;
}
inline ::Zone_KillCombatUnit_Notify* CSMsgBody::release_m_stzone_killcombatunit_notify() {
  clear_has_m_stzone_killcombatunit_notify();
  ::Zone_KillCombatUnit_Notify* temp = m_stzone_killcombatunit_notify_;
  m_stzone_killcombatunit_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_killcombatunit_notify(::Zone_KillCombatUnit_Notify* m_stzone_killcombatunit_notify) {
  delete m_stzone_killcombatunit_notify_;
  m_stzone_killcombatunit_notify_ = m_stzone_killcombatunit_notify;
  if (m_stzone_killcombatunit_notify) {
    set_has_m_stzone_killcombatunit_notify();
  } else {
    clear_has_m_stzone_killcombatunit_notify();
  }
}

// optional .Zone_AddCombatTrap_Notify m_stZone_AddCombatTrap_Notify = 154;
inline bool CSMsgBody::has_m_stzone_addcombattrap_notify() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_addcombattrap_notify() {
  _has_bits_[2] |= 0x00004000u;
}
inline void CSMsgBody::clear_has_m_stzone_addcombattrap_notify() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void CSMsgBody::clear_m_stzone_addcombattrap_notify() {
  if (m_stzone_addcombattrap_notify_ != NULL) m_stzone_addcombattrap_notify_->::Zone_AddCombatTrap_Notify::Clear();
  clear_has_m_stzone_addcombattrap_notify();
}
inline const ::Zone_AddCombatTrap_Notify& CSMsgBody::m_stzone_addcombattrap_notify() const {
  return m_stzone_addcombattrap_notify_ != NULL ? *m_stzone_addcombattrap_notify_ : *default_instance_->m_stzone_addcombattrap_notify_;
}
inline ::Zone_AddCombatTrap_Notify* CSMsgBody::mutable_m_stzone_addcombattrap_notify() {
  set_has_m_stzone_addcombattrap_notify();
  if (m_stzone_addcombattrap_notify_ == NULL) m_stzone_addcombattrap_notify_ = new ::Zone_AddCombatTrap_Notify;
  return m_stzone_addcombattrap_notify_;
}
inline ::Zone_AddCombatTrap_Notify* CSMsgBody::release_m_stzone_addcombattrap_notify() {
  clear_has_m_stzone_addcombattrap_notify();
  ::Zone_AddCombatTrap_Notify* temp = m_stzone_addcombattrap_notify_;
  m_stzone_addcombattrap_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_addcombattrap_notify(::Zone_AddCombatTrap_Notify* m_stzone_addcombattrap_notify) {
  delete m_stzone_addcombattrap_notify_;
  m_stzone_addcombattrap_notify_ = m_stzone_addcombattrap_notify;
  if (m_stzone_addcombattrap_notify) {
    set_has_m_stzone_addcombattrap_notify();
  } else {
    clear_has_m_stzone_addcombattrap_notify();
  }
}

// optional .Zone_TriggerCombatTrap_Notify m_stZone_TriggerCombatTrap_Notify = 155;
inline bool CSMsgBody::has_m_stzone_triggercombattrap_notify() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_triggercombattrap_notify() {
  _has_bits_[2] |= 0x00008000u;
}
inline void CSMsgBody::clear_has_m_stzone_triggercombattrap_notify() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void CSMsgBody::clear_m_stzone_triggercombattrap_notify() {
  if (m_stzone_triggercombattrap_notify_ != NULL) m_stzone_triggercombattrap_notify_->::Zone_TriggerCombatTrap_Notify::Clear();
  clear_has_m_stzone_triggercombattrap_notify();
}
inline const ::Zone_TriggerCombatTrap_Notify& CSMsgBody::m_stzone_triggercombattrap_notify() const {
  return m_stzone_triggercombattrap_notify_ != NULL ? *m_stzone_triggercombattrap_notify_ : *default_instance_->m_stzone_triggercombattrap_notify_;
}
inline ::Zone_TriggerCombatTrap_Notify* CSMsgBody::mutable_m_stzone_triggercombattrap_notify() {
  set_has_m_stzone_triggercombattrap_notify();
  if (m_stzone_triggercombattrap_notify_ == NULL) m_stzone_triggercombattrap_notify_ = new ::Zone_TriggerCombatTrap_Notify;
  return m_stzone_triggercombattrap_notify_;
}
inline ::Zone_TriggerCombatTrap_Notify* CSMsgBody::release_m_stzone_triggercombattrap_notify() {
  clear_has_m_stzone_triggercombattrap_notify();
  ::Zone_TriggerCombatTrap_Notify* temp = m_stzone_triggercombattrap_notify_;
  m_stzone_triggercombattrap_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_triggercombattrap_notify(::Zone_TriggerCombatTrap_Notify* m_stzone_triggercombattrap_notify) {
  delete m_stzone_triggercombattrap_notify_;
  m_stzone_triggercombattrap_notify_ = m_stzone_triggercombattrap_notify;
  if (m_stzone_triggercombattrap_notify) {
    set_has_m_stzone_triggercombattrap_notify();
  } else {
    clear_has_m_stzone_triggercombattrap_notify();
  }
}

// optional .Zone_DeleteCombatTrap_Notify m_stZone_DeleteCombatTrap_Notify = 156;
inline bool CSMsgBody::has_m_stzone_deletecombattrap_notify() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_deletecombattrap_notify() {
  _has_bits_[2] |= 0x00010000u;
}
inline void CSMsgBody::clear_has_m_stzone_deletecombattrap_notify() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void CSMsgBody::clear_m_stzone_deletecombattrap_notify() {
  if (m_stzone_deletecombattrap_notify_ != NULL) m_stzone_deletecombattrap_notify_->::Zone_DeleteCombatTrap_Notify::Clear();
  clear_has_m_stzone_deletecombattrap_notify();
}
inline const ::Zone_DeleteCombatTrap_Notify& CSMsgBody::m_stzone_deletecombattrap_notify() const {
  return m_stzone_deletecombattrap_notify_ != NULL ? *m_stzone_deletecombattrap_notify_ : *default_instance_->m_stzone_deletecombattrap_notify_;
}
inline ::Zone_DeleteCombatTrap_Notify* CSMsgBody::mutable_m_stzone_deletecombattrap_notify() {
  set_has_m_stzone_deletecombattrap_notify();
  if (m_stzone_deletecombattrap_notify_ == NULL) m_stzone_deletecombattrap_notify_ = new ::Zone_DeleteCombatTrap_Notify;
  return m_stzone_deletecombattrap_notify_;
}
inline ::Zone_DeleteCombatTrap_Notify* CSMsgBody::release_m_stzone_deletecombattrap_notify() {
  clear_has_m_stzone_deletecombattrap_notify();
  ::Zone_DeleteCombatTrap_Notify* temp = m_stzone_deletecombattrap_notify_;
  m_stzone_deletecombattrap_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_deletecombattrap_notify(::Zone_DeleteCombatTrap_Notify* m_stzone_deletecombattrap_notify) {
  delete m_stzone_deletecombattrap_notify_;
  m_stzone_deletecombattrap_notify_ = m_stzone_deletecombattrap_notify;
  if (m_stzone_deletecombattrap_notify) {
    set_has_m_stzone_deletecombattrap_notify();
  } else {
    clear_has_m_stzone_deletecombattrap_notify();
  }
}

// optional .Zone_UnitAttrChange_Notify m_stZone_UnitAttrChange_Notify = 157;
inline bool CSMsgBody::has_m_stzone_unitattrchange_notify() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_unitattrchange_notify() {
  _has_bits_[2] |= 0x00020000u;
}
inline void CSMsgBody::clear_has_m_stzone_unitattrchange_notify() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void CSMsgBody::clear_m_stzone_unitattrchange_notify() {
  if (m_stzone_unitattrchange_notify_ != NULL) m_stzone_unitattrchange_notify_->::Zone_UnitAttrChange_Notify::Clear();
  clear_has_m_stzone_unitattrchange_notify();
}
inline const ::Zone_UnitAttrChange_Notify& CSMsgBody::m_stzone_unitattrchange_notify() const {
  return m_stzone_unitattrchange_notify_ != NULL ? *m_stzone_unitattrchange_notify_ : *default_instance_->m_stzone_unitattrchange_notify_;
}
inline ::Zone_UnitAttrChange_Notify* CSMsgBody::mutable_m_stzone_unitattrchange_notify() {
  set_has_m_stzone_unitattrchange_notify();
  if (m_stzone_unitattrchange_notify_ == NULL) m_stzone_unitattrchange_notify_ = new ::Zone_UnitAttrChange_Notify;
  return m_stzone_unitattrchange_notify_;
}
inline ::Zone_UnitAttrChange_Notify* CSMsgBody::release_m_stzone_unitattrchange_notify() {
  clear_has_m_stzone_unitattrchange_notify();
  ::Zone_UnitAttrChange_Notify* temp = m_stzone_unitattrchange_notify_;
  m_stzone_unitattrchange_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_unitattrchange_notify(::Zone_UnitAttrChange_Notify* m_stzone_unitattrchange_notify) {
  delete m_stzone_unitattrchange_notify_;
  m_stzone_unitattrchange_notify_ = m_stzone_unitattrchange_notify;
  if (m_stzone_unitattrchange_notify) {
    set_has_m_stzone_unitattrchange_notify();
  } else {
    clear_has_m_stzone_unitattrchange_notify();
  }
}

// optional .Zone_StartPVPCombat_Request m_stZone_StartPVPCombat_Request = 158;
inline bool CSMsgBody::has_m_stzone_startpvpcombat_request() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_startpvpcombat_request() {
  _has_bits_[2] |= 0x00040000u;
}
inline void CSMsgBody::clear_has_m_stzone_startpvpcombat_request() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void CSMsgBody::clear_m_stzone_startpvpcombat_request() {
  if (m_stzone_startpvpcombat_request_ != NULL) m_stzone_startpvpcombat_request_->::Zone_StartPVPCombat_Request::Clear();
  clear_has_m_stzone_startpvpcombat_request();
}
inline const ::Zone_StartPVPCombat_Request& CSMsgBody::m_stzone_startpvpcombat_request() const {
  return m_stzone_startpvpcombat_request_ != NULL ? *m_stzone_startpvpcombat_request_ : *default_instance_->m_stzone_startpvpcombat_request_;
}
inline ::Zone_StartPVPCombat_Request* CSMsgBody::mutable_m_stzone_startpvpcombat_request() {
  set_has_m_stzone_startpvpcombat_request();
  if (m_stzone_startpvpcombat_request_ == NULL) m_stzone_startpvpcombat_request_ = new ::Zone_StartPVPCombat_Request;
  return m_stzone_startpvpcombat_request_;
}
inline ::Zone_StartPVPCombat_Request* CSMsgBody::release_m_stzone_startpvpcombat_request() {
  clear_has_m_stzone_startpvpcombat_request();
  ::Zone_StartPVPCombat_Request* temp = m_stzone_startpvpcombat_request_;
  m_stzone_startpvpcombat_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_startpvpcombat_request(::Zone_StartPVPCombat_Request* m_stzone_startpvpcombat_request) {
  delete m_stzone_startpvpcombat_request_;
  m_stzone_startpvpcombat_request_ = m_stzone_startpvpcombat_request;
  if (m_stzone_startpvpcombat_request) {
    set_has_m_stzone_startpvpcombat_request();
  } else {
    clear_has_m_stzone_startpvpcombat_request();
  }
}

// optional .Zone_StartPVPCombat_Response m_stZone_StartPVPCombat_Response = 159;
inline bool CSMsgBody::has_m_stzone_startpvpcombat_response() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_startpvpcombat_response() {
  _has_bits_[2] |= 0x00080000u;
}
inline void CSMsgBody::clear_has_m_stzone_startpvpcombat_response() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void CSMsgBody::clear_m_stzone_startpvpcombat_response() {
  if (m_stzone_startpvpcombat_response_ != NULL) m_stzone_startpvpcombat_response_->::Zone_StartPVPCombat_Response::Clear();
  clear_has_m_stzone_startpvpcombat_response();
}
inline const ::Zone_StartPVPCombat_Response& CSMsgBody::m_stzone_startpvpcombat_response() const {
  return m_stzone_startpvpcombat_response_ != NULL ? *m_stzone_startpvpcombat_response_ : *default_instance_->m_stzone_startpvpcombat_response_;
}
inline ::Zone_StartPVPCombat_Response* CSMsgBody::mutable_m_stzone_startpvpcombat_response() {
  set_has_m_stzone_startpvpcombat_response();
  if (m_stzone_startpvpcombat_response_ == NULL) m_stzone_startpvpcombat_response_ = new ::Zone_StartPVPCombat_Response;
  return m_stzone_startpvpcombat_response_;
}
inline ::Zone_StartPVPCombat_Response* CSMsgBody::release_m_stzone_startpvpcombat_response() {
  clear_has_m_stzone_startpvpcombat_response();
  ::Zone_StartPVPCombat_Response* temp = m_stzone_startpvpcombat_response_;
  m_stzone_startpvpcombat_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_startpvpcombat_response(::Zone_StartPVPCombat_Response* m_stzone_startpvpcombat_response) {
  delete m_stzone_startpvpcombat_response_;
  m_stzone_startpvpcombat_response_ = m_stzone_startpvpcombat_response;
  if (m_stzone_startpvpcombat_response) {
    set_has_m_stzone_startpvpcombat_response();
  } else {
    clear_has_m_stzone_startpvpcombat_response();
  }
}

// optional .Zone_StartPVPCombat_Notify m_stZone_StartPVPCombat_Notify = 160;
inline bool CSMsgBody::has_m_stzone_startpvpcombat_notify() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_startpvpcombat_notify() {
  _has_bits_[2] |= 0x00100000u;
}
inline void CSMsgBody::clear_has_m_stzone_startpvpcombat_notify() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void CSMsgBody::clear_m_stzone_startpvpcombat_notify() {
  if (m_stzone_startpvpcombat_notify_ != NULL) m_stzone_startpvpcombat_notify_->::Zone_StartPVPCombat_Notify::Clear();
  clear_has_m_stzone_startpvpcombat_notify();
}
inline const ::Zone_StartPVPCombat_Notify& CSMsgBody::m_stzone_startpvpcombat_notify() const {
  return m_stzone_startpvpcombat_notify_ != NULL ? *m_stzone_startpvpcombat_notify_ : *default_instance_->m_stzone_startpvpcombat_notify_;
}
inline ::Zone_StartPVPCombat_Notify* CSMsgBody::mutable_m_stzone_startpvpcombat_notify() {
  set_has_m_stzone_startpvpcombat_notify();
  if (m_stzone_startpvpcombat_notify_ == NULL) m_stzone_startpvpcombat_notify_ = new ::Zone_StartPVPCombat_Notify;
  return m_stzone_startpvpcombat_notify_;
}
inline ::Zone_StartPVPCombat_Notify* CSMsgBody::release_m_stzone_startpvpcombat_notify() {
  clear_has_m_stzone_startpvpcombat_notify();
  ::Zone_StartPVPCombat_Notify* temp = m_stzone_startpvpcombat_notify_;
  m_stzone_startpvpcombat_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_startpvpcombat_notify(::Zone_StartPVPCombat_Notify* m_stzone_startpvpcombat_notify) {
  delete m_stzone_startpvpcombat_notify_;
  m_stzone_startpvpcombat_notify_ = m_stzone_startpvpcombat_notify;
  if (m_stzone_startpvpcombat_notify) {
    set_has_m_stzone_startpvpcombat_notify();
  } else {
    clear_has_m_stzone_startpvpcombat_notify();
  }
}

// optional .Zone_AcceptPVPCombat_Request m_stZone_AcceptPVPCombat_Request = 161;
inline bool CSMsgBody::has_m_stzone_acceptpvpcombat_request() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_acceptpvpcombat_request() {
  _has_bits_[2] |= 0x00200000u;
}
inline void CSMsgBody::clear_has_m_stzone_acceptpvpcombat_request() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void CSMsgBody::clear_m_stzone_acceptpvpcombat_request() {
  if (m_stzone_acceptpvpcombat_request_ != NULL) m_stzone_acceptpvpcombat_request_->::Zone_AcceptPVPCombat_Request::Clear();
  clear_has_m_stzone_acceptpvpcombat_request();
}
inline const ::Zone_AcceptPVPCombat_Request& CSMsgBody::m_stzone_acceptpvpcombat_request() const {
  return m_stzone_acceptpvpcombat_request_ != NULL ? *m_stzone_acceptpvpcombat_request_ : *default_instance_->m_stzone_acceptpvpcombat_request_;
}
inline ::Zone_AcceptPVPCombat_Request* CSMsgBody::mutable_m_stzone_acceptpvpcombat_request() {
  set_has_m_stzone_acceptpvpcombat_request();
  if (m_stzone_acceptpvpcombat_request_ == NULL) m_stzone_acceptpvpcombat_request_ = new ::Zone_AcceptPVPCombat_Request;
  return m_stzone_acceptpvpcombat_request_;
}
inline ::Zone_AcceptPVPCombat_Request* CSMsgBody::release_m_stzone_acceptpvpcombat_request() {
  clear_has_m_stzone_acceptpvpcombat_request();
  ::Zone_AcceptPVPCombat_Request* temp = m_stzone_acceptpvpcombat_request_;
  m_stzone_acceptpvpcombat_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_acceptpvpcombat_request(::Zone_AcceptPVPCombat_Request* m_stzone_acceptpvpcombat_request) {
  delete m_stzone_acceptpvpcombat_request_;
  m_stzone_acceptpvpcombat_request_ = m_stzone_acceptpvpcombat_request;
  if (m_stzone_acceptpvpcombat_request) {
    set_has_m_stzone_acceptpvpcombat_request();
  } else {
    clear_has_m_stzone_acceptpvpcombat_request();
  }
}

// optional .Zone_AcceptPVPCombat_Response m_stZone_AcceptPVPCombat_Response = 162;
inline bool CSMsgBody::has_m_stzone_acceptpvpcombat_response() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_acceptpvpcombat_response() {
  _has_bits_[2] |= 0x00400000u;
}
inline void CSMsgBody::clear_has_m_stzone_acceptpvpcombat_response() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void CSMsgBody::clear_m_stzone_acceptpvpcombat_response() {
  if (m_stzone_acceptpvpcombat_response_ != NULL) m_stzone_acceptpvpcombat_response_->::Zone_AcceptPVPCombat_Response::Clear();
  clear_has_m_stzone_acceptpvpcombat_response();
}
inline const ::Zone_AcceptPVPCombat_Response& CSMsgBody::m_stzone_acceptpvpcombat_response() const {
  return m_stzone_acceptpvpcombat_response_ != NULL ? *m_stzone_acceptpvpcombat_response_ : *default_instance_->m_stzone_acceptpvpcombat_response_;
}
inline ::Zone_AcceptPVPCombat_Response* CSMsgBody::mutable_m_stzone_acceptpvpcombat_response() {
  set_has_m_stzone_acceptpvpcombat_response();
  if (m_stzone_acceptpvpcombat_response_ == NULL) m_stzone_acceptpvpcombat_response_ = new ::Zone_AcceptPVPCombat_Response;
  return m_stzone_acceptpvpcombat_response_;
}
inline ::Zone_AcceptPVPCombat_Response* CSMsgBody::release_m_stzone_acceptpvpcombat_response() {
  clear_has_m_stzone_acceptpvpcombat_response();
  ::Zone_AcceptPVPCombat_Response* temp = m_stzone_acceptpvpcombat_response_;
  m_stzone_acceptpvpcombat_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_acceptpvpcombat_response(::Zone_AcceptPVPCombat_Response* m_stzone_acceptpvpcombat_response) {
  delete m_stzone_acceptpvpcombat_response_;
  m_stzone_acceptpvpcombat_response_ = m_stzone_acceptpvpcombat_response;
  if (m_stzone_acceptpvpcombat_response) {
    set_has_m_stzone_acceptpvpcombat_response();
  } else {
    clear_has_m_stzone_acceptpvpcombat_response();
  }
}

// optional .Zone_SetCombatForm_Request m_stZone_SetCombatForm_Request = 168;
inline bool CSMsgBody::has_m_stzone_setcombatform_request() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_setcombatform_request() {
  _has_bits_[2] |= 0x00800000u;
}
inline void CSMsgBody::clear_has_m_stzone_setcombatform_request() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void CSMsgBody::clear_m_stzone_setcombatform_request() {
  if (m_stzone_setcombatform_request_ != NULL) m_stzone_setcombatform_request_->::Zone_SetCombatForm_Request::Clear();
  clear_has_m_stzone_setcombatform_request();
}
inline const ::Zone_SetCombatForm_Request& CSMsgBody::m_stzone_setcombatform_request() const {
  return m_stzone_setcombatform_request_ != NULL ? *m_stzone_setcombatform_request_ : *default_instance_->m_stzone_setcombatform_request_;
}
inline ::Zone_SetCombatForm_Request* CSMsgBody::mutable_m_stzone_setcombatform_request() {
  set_has_m_stzone_setcombatform_request();
  if (m_stzone_setcombatform_request_ == NULL) m_stzone_setcombatform_request_ = new ::Zone_SetCombatForm_Request;
  return m_stzone_setcombatform_request_;
}
inline ::Zone_SetCombatForm_Request* CSMsgBody::release_m_stzone_setcombatform_request() {
  clear_has_m_stzone_setcombatform_request();
  ::Zone_SetCombatForm_Request* temp = m_stzone_setcombatform_request_;
  m_stzone_setcombatform_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_setcombatform_request(::Zone_SetCombatForm_Request* m_stzone_setcombatform_request) {
  delete m_stzone_setcombatform_request_;
  m_stzone_setcombatform_request_ = m_stzone_setcombatform_request;
  if (m_stzone_setcombatform_request) {
    set_has_m_stzone_setcombatform_request();
  } else {
    clear_has_m_stzone_setcombatform_request();
  }
}

// optional .Zone_SetCombatForm_Response m_stZone_SetCombatForm_Response = 169;
inline bool CSMsgBody::has_m_stzone_setcombatform_response() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_setcombatform_response() {
  _has_bits_[2] |= 0x01000000u;
}
inline void CSMsgBody::clear_has_m_stzone_setcombatform_response() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void CSMsgBody::clear_m_stzone_setcombatform_response() {
  if (m_stzone_setcombatform_response_ != NULL) m_stzone_setcombatform_response_->::Zone_SetCombatForm_Response::Clear();
  clear_has_m_stzone_setcombatform_response();
}
inline const ::Zone_SetCombatForm_Response& CSMsgBody::m_stzone_setcombatform_response() const {
  return m_stzone_setcombatform_response_ != NULL ? *m_stzone_setcombatform_response_ : *default_instance_->m_stzone_setcombatform_response_;
}
inline ::Zone_SetCombatForm_Response* CSMsgBody::mutable_m_stzone_setcombatform_response() {
  set_has_m_stzone_setcombatform_response();
  if (m_stzone_setcombatform_response_ == NULL) m_stzone_setcombatform_response_ = new ::Zone_SetCombatForm_Response;
  return m_stzone_setcombatform_response_;
}
inline ::Zone_SetCombatForm_Response* CSMsgBody::release_m_stzone_setcombatform_response() {
  clear_has_m_stzone_setcombatform_response();
  ::Zone_SetCombatForm_Response* temp = m_stzone_setcombatform_response_;
  m_stzone_setcombatform_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_setcombatform_response(::Zone_SetCombatForm_Response* m_stzone_setcombatform_response) {
  delete m_stzone_setcombatform_response_;
  m_stzone_setcombatform_response_ = m_stzone_setcombatform_response;
  if (m_stzone_setcombatform_response) {
    set_has_m_stzone_setcombatform_response();
  } else {
    clear_has_m_stzone_setcombatform_response();
  }
}

// optional .Zone_SetCombatForm_Notify m_stZone_SetCombatForm_Notify = 170;
inline bool CSMsgBody::has_m_stzone_setcombatform_notify() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_setcombatform_notify() {
  _has_bits_[2] |= 0x02000000u;
}
inline void CSMsgBody::clear_has_m_stzone_setcombatform_notify() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void CSMsgBody::clear_m_stzone_setcombatform_notify() {
  if (m_stzone_setcombatform_notify_ != NULL) m_stzone_setcombatform_notify_->::Zone_SetCombatForm_Notify::Clear();
  clear_has_m_stzone_setcombatform_notify();
}
inline const ::Zone_SetCombatForm_Notify& CSMsgBody::m_stzone_setcombatform_notify() const {
  return m_stzone_setcombatform_notify_ != NULL ? *m_stzone_setcombatform_notify_ : *default_instance_->m_stzone_setcombatform_notify_;
}
inline ::Zone_SetCombatForm_Notify* CSMsgBody::mutable_m_stzone_setcombatform_notify() {
  set_has_m_stzone_setcombatform_notify();
  if (m_stzone_setcombatform_notify_ == NULL) m_stzone_setcombatform_notify_ = new ::Zone_SetCombatForm_Notify;
  return m_stzone_setcombatform_notify_;
}
inline ::Zone_SetCombatForm_Notify* CSMsgBody::release_m_stzone_setcombatform_notify() {
  clear_has_m_stzone_setcombatform_notify();
  ::Zone_SetCombatForm_Notify* temp = m_stzone_setcombatform_notify_;
  m_stzone_setcombatform_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_setcombatform_notify(::Zone_SetCombatForm_Notify* m_stzone_setcombatform_notify) {
  delete m_stzone_setcombatform_notify_;
  m_stzone_setcombatform_notify_ = m_stzone_setcombatform_notify;
  if (m_stzone_setcombatform_notify) {
    set_has_m_stzone_setcombatform_notify();
  } else {
    clear_has_m_stzone_setcombatform_notify();
  }
}

// optional .Zone_RejectPVPCombat_Notify m_stZone_RejectPVPCombat_Notify = 175;
inline bool CSMsgBody::has_m_stzone_rejectpvpcombat_notify() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_rejectpvpcombat_notify() {
  _has_bits_[2] |= 0x04000000u;
}
inline void CSMsgBody::clear_has_m_stzone_rejectpvpcombat_notify() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void CSMsgBody::clear_m_stzone_rejectpvpcombat_notify() {
  if (m_stzone_rejectpvpcombat_notify_ != NULL) m_stzone_rejectpvpcombat_notify_->::Zone_RejectPVPCombat_Notify::Clear();
  clear_has_m_stzone_rejectpvpcombat_notify();
}
inline const ::Zone_RejectPVPCombat_Notify& CSMsgBody::m_stzone_rejectpvpcombat_notify() const {
  return m_stzone_rejectpvpcombat_notify_ != NULL ? *m_stzone_rejectpvpcombat_notify_ : *default_instance_->m_stzone_rejectpvpcombat_notify_;
}
inline ::Zone_RejectPVPCombat_Notify* CSMsgBody::mutable_m_stzone_rejectpvpcombat_notify() {
  set_has_m_stzone_rejectpvpcombat_notify();
  if (m_stzone_rejectpvpcombat_notify_ == NULL) m_stzone_rejectpvpcombat_notify_ = new ::Zone_RejectPVPCombat_Notify;
  return m_stzone_rejectpvpcombat_notify_;
}
inline ::Zone_RejectPVPCombat_Notify* CSMsgBody::release_m_stzone_rejectpvpcombat_notify() {
  clear_has_m_stzone_rejectpvpcombat_notify();
  ::Zone_RejectPVPCombat_Notify* temp = m_stzone_rejectpvpcombat_notify_;
  m_stzone_rejectpvpcombat_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_rejectpvpcombat_notify(::Zone_RejectPVPCombat_Notify* m_stzone_rejectpvpcombat_notify) {
  delete m_stzone_rejectpvpcombat_notify_;
  m_stzone_rejectpvpcombat_notify_ = m_stzone_rejectpvpcombat_notify;
  if (m_stzone_rejectpvpcombat_notify) {
    set_has_m_stzone_rejectpvpcombat_notify();
  } else {
    clear_has_m_stzone_rejectpvpcombat_notify();
  }
}

// optional .Zone_DecreaseUnitBuff_Notify m_stZone_DecreaseUnitBuff_Notify = 176;
inline bool CSMsgBody::has_m_stzone_decreaseunitbuff_notify() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_decreaseunitbuff_notify() {
  _has_bits_[2] |= 0x08000000u;
}
inline void CSMsgBody::clear_has_m_stzone_decreaseunitbuff_notify() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void CSMsgBody::clear_m_stzone_decreaseunitbuff_notify() {
  if (m_stzone_decreaseunitbuff_notify_ != NULL) m_stzone_decreaseunitbuff_notify_->::Zone_DecreaseUnitBuff_Notify::Clear();
  clear_has_m_stzone_decreaseunitbuff_notify();
}
inline const ::Zone_DecreaseUnitBuff_Notify& CSMsgBody::m_stzone_decreaseunitbuff_notify() const {
  return m_stzone_decreaseunitbuff_notify_ != NULL ? *m_stzone_decreaseunitbuff_notify_ : *default_instance_->m_stzone_decreaseunitbuff_notify_;
}
inline ::Zone_DecreaseUnitBuff_Notify* CSMsgBody::mutable_m_stzone_decreaseunitbuff_notify() {
  set_has_m_stzone_decreaseunitbuff_notify();
  if (m_stzone_decreaseunitbuff_notify_ == NULL) m_stzone_decreaseunitbuff_notify_ = new ::Zone_DecreaseUnitBuff_Notify;
  return m_stzone_decreaseunitbuff_notify_;
}
inline ::Zone_DecreaseUnitBuff_Notify* CSMsgBody::release_m_stzone_decreaseunitbuff_notify() {
  clear_has_m_stzone_decreaseunitbuff_notify();
  ::Zone_DecreaseUnitBuff_Notify* temp = m_stzone_decreaseunitbuff_notify_;
  m_stzone_decreaseunitbuff_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_decreaseunitbuff_notify(::Zone_DecreaseUnitBuff_Notify* m_stzone_decreaseunitbuff_notify) {
  delete m_stzone_decreaseunitbuff_notify_;
  m_stzone_decreaseunitbuff_notify_ = m_stzone_decreaseunitbuff_notify;
  if (m_stzone_decreaseunitbuff_notify) {
    set_has_m_stzone_decreaseunitbuff_notify();
  } else {
    clear_has_m_stzone_decreaseunitbuff_notify();
  }
}

// optional .Zone_ActionUnitInfo_Notify m_stZone_ActionUnitInfo_Notify = 177;
inline bool CSMsgBody::has_m_stzone_actionunitinfo_notify() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_actionunitinfo_notify() {
  _has_bits_[2] |= 0x10000000u;
}
inline void CSMsgBody::clear_has_m_stzone_actionunitinfo_notify() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void CSMsgBody::clear_m_stzone_actionunitinfo_notify() {
  if (m_stzone_actionunitinfo_notify_ != NULL) m_stzone_actionunitinfo_notify_->::Zone_ActionUnitInfo_Notify::Clear();
  clear_has_m_stzone_actionunitinfo_notify();
}
inline const ::Zone_ActionUnitInfo_Notify& CSMsgBody::m_stzone_actionunitinfo_notify() const {
  return m_stzone_actionunitinfo_notify_ != NULL ? *m_stzone_actionunitinfo_notify_ : *default_instance_->m_stzone_actionunitinfo_notify_;
}
inline ::Zone_ActionUnitInfo_Notify* CSMsgBody::mutable_m_stzone_actionunitinfo_notify() {
  set_has_m_stzone_actionunitinfo_notify();
  if (m_stzone_actionunitinfo_notify_ == NULL) m_stzone_actionunitinfo_notify_ = new ::Zone_ActionUnitInfo_Notify;
  return m_stzone_actionunitinfo_notify_;
}
inline ::Zone_ActionUnitInfo_Notify* CSMsgBody::release_m_stzone_actionunitinfo_notify() {
  clear_has_m_stzone_actionunitinfo_notify();
  ::Zone_ActionUnitInfo_Notify* temp = m_stzone_actionunitinfo_notify_;
  m_stzone_actionunitinfo_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_actionunitinfo_notify(::Zone_ActionUnitInfo_Notify* m_stzone_actionunitinfo_notify) {
  delete m_stzone_actionunitinfo_notify_;
  m_stzone_actionunitinfo_notify_ = m_stzone_actionunitinfo_notify;
  if (m_stzone_actionunitinfo_notify) {
    set_has_m_stzone_actionunitinfo_notify();
  } else {
    clear_has_m_stzone_actionunitinfo_notify();
  }
}

// optional .Zone_SkillCDRound_Notify m_stZone_SkillCDRound_Notify = 188;
inline bool CSMsgBody::has_m_stzone_skillcdround_notify() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_skillcdround_notify() {
  _has_bits_[2] |= 0x20000000u;
}
inline void CSMsgBody::clear_has_m_stzone_skillcdround_notify() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void CSMsgBody::clear_m_stzone_skillcdround_notify() {
  if (m_stzone_skillcdround_notify_ != NULL) m_stzone_skillcdround_notify_->::Zone_SkillCDRound_Notify::Clear();
  clear_has_m_stzone_skillcdround_notify();
}
inline const ::Zone_SkillCDRound_Notify& CSMsgBody::m_stzone_skillcdround_notify() const {
  return m_stzone_skillcdround_notify_ != NULL ? *m_stzone_skillcdround_notify_ : *default_instance_->m_stzone_skillcdround_notify_;
}
inline ::Zone_SkillCDRound_Notify* CSMsgBody::mutable_m_stzone_skillcdround_notify() {
  set_has_m_stzone_skillcdround_notify();
  if (m_stzone_skillcdround_notify_ == NULL) m_stzone_skillcdround_notify_ = new ::Zone_SkillCDRound_Notify;
  return m_stzone_skillcdround_notify_;
}
inline ::Zone_SkillCDRound_Notify* CSMsgBody::release_m_stzone_skillcdround_notify() {
  clear_has_m_stzone_skillcdround_notify();
  ::Zone_SkillCDRound_Notify* temp = m_stzone_skillcdround_notify_;
  m_stzone_skillcdround_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_skillcdround_notify(::Zone_SkillCDRound_Notify* m_stzone_skillcdround_notify) {
  delete m_stzone_skillcdround_notify_;
  m_stzone_skillcdround_notify_ = m_stzone_skillcdround_notify;
  if (m_stzone_skillcdround_notify) {
    set_has_m_stzone_skillcdround_notify();
  } else {
    clear_has_m_stzone_skillcdround_notify();
  }
}

// -------------------------------------------------------------------

// CSMsgHead

// optional uint32 m_uiSessionFd = 1;
inline bool CSMsgHead::has_m_uisessionfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsgHead::set_has_m_uisessionfd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsgHead::clear_has_m_uisessionfd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsgHead::clear_m_uisessionfd() {
  m_uisessionfd_ = 0u;
  clear_has_m_uisessionfd();
}
inline ::google::protobuf::uint32 CSMsgHead::m_uisessionfd() const {
  return m_uisessionfd_;
}
inline void CSMsgHead::set_m_uisessionfd(::google::protobuf::uint32 value) {
  set_has_m_uisessionfd();
  m_uisessionfd_ = value;
}

// optional .ProtocolMsgID m_uiMsgID = 2 [default = MSGID_PROTOCOL_INVALID_MSG];
inline bool CSMsgHead::has_m_uimsgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMsgHead::set_has_m_uimsgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMsgHead::clear_has_m_uimsgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMsgHead::clear_m_uimsgid() {
  m_uimsgid_ = 0;
  clear_has_m_uimsgid();
}
inline ::ProtocolMsgID CSMsgHead::m_uimsgid() const {
  return static_cast< ::ProtocolMsgID >(m_uimsgid_);
}
inline void CSMsgHead::set_m_uimsgid(::ProtocolMsgID value) {
  assert(::ProtocolMsgID_IsValid(value));
  set_has_m_uimsgid();
  m_uimsgid_ = value;
}

// optional uint32 m_uin = 3;
inline bool CSMsgHead::has_m_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMsgHead::set_has_m_uin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMsgHead::clear_has_m_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMsgHead::clear_m_uin() {
  m_uin_ = 0u;
  clear_has_m_uin();
}
inline ::google::protobuf::uint32 CSMsgHead::m_uin() const {
  return m_uin_;
}
inline void CSMsgHead::set_m_uin(::google::protobuf::uint32 value) {
  set_has_m_uin();
  m_uin_ = value;
}

// optional string m_strSessionKey = 4;
inline bool CSMsgHead::has_m_strsessionkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMsgHead::set_has_m_strsessionkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMsgHead::clear_has_m_strsessionkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMsgHead::clear_m_strsessionkey() {
  if (m_strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    m_strsessionkey_->clear();
  }
  clear_has_m_strsessionkey();
}
inline const ::std::string& CSMsgHead::m_strsessionkey() const {
  return *m_strsessionkey_;
}
inline void CSMsgHead::set_m_strsessionkey(const ::std::string& value) {
  set_has_m_strsessionkey();
  if (m_strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    m_strsessionkey_ = new ::std::string;
  }
  m_strsessionkey_->assign(value);
}
inline void CSMsgHead::set_m_strsessionkey(const char* value) {
  set_has_m_strsessionkey();
  if (m_strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    m_strsessionkey_ = new ::std::string;
  }
  m_strsessionkey_->assign(value);
}
inline void CSMsgHead::set_m_strsessionkey(const char* value, size_t size) {
  set_has_m_strsessionkey();
  if (m_strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    m_strsessionkey_ = new ::std::string;
  }
  m_strsessionkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSMsgHead::mutable_m_strsessionkey() {
  set_has_m_strsessionkey();
  if (m_strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    m_strsessionkey_ = new ::std::string;
  }
  return m_strsessionkey_;
}
inline ::std::string* CSMsgHead::release_m_strsessionkey() {
  clear_has_m_strsessionkey();
  if (m_strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_strsessionkey_;
    m_strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSMsgHead::set_allocated_m_strsessionkey(::std::string* m_strsessionkey) {
  if (m_strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete m_strsessionkey_;
  }
  if (m_strsessionkey) {
    set_has_m_strsessionkey();
    m_strsessionkey_ = m_strsessionkey;
  } else {
    clear_has_m_strsessionkey();
    m_strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProtocolCSMsg

// optional .GameProtocol.CS.CSMsgHead m_stMsgHead = 1;
inline bool ProtocolCSMsg::has_m_stmsghead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtocolCSMsg::set_has_m_stmsghead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtocolCSMsg::clear_has_m_stmsghead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtocolCSMsg::clear_m_stmsghead() {
  if (m_stmsghead_ != NULL) m_stmsghead_->::GameProtocol::CS::CSMsgHead::Clear();
  clear_has_m_stmsghead();
}
inline const ::GameProtocol::CS::CSMsgHead& ProtocolCSMsg::m_stmsghead() const {
  return m_stmsghead_ != NULL ? *m_stmsghead_ : *default_instance_->m_stmsghead_;
}
inline ::GameProtocol::CS::CSMsgHead* ProtocolCSMsg::mutable_m_stmsghead() {
  set_has_m_stmsghead();
  if (m_stmsghead_ == NULL) m_stmsghead_ = new ::GameProtocol::CS::CSMsgHead;
  return m_stmsghead_;
}
inline ::GameProtocol::CS::CSMsgHead* ProtocolCSMsg::release_m_stmsghead() {
  clear_has_m_stmsghead();
  ::GameProtocol::CS::CSMsgHead* temp = m_stmsghead_;
  m_stmsghead_ = NULL;
  return temp;
}
inline void ProtocolCSMsg::set_allocated_m_stmsghead(::GameProtocol::CS::CSMsgHead* m_stmsghead) {
  delete m_stmsghead_;
  m_stmsghead_ = m_stmsghead;
  if (m_stmsghead) {
    set_has_m_stmsghead();
  } else {
    clear_has_m_stmsghead();
  }
}

// optional .GameProtocol.CS.CSMsgBody m_stMsgBody = 2;
inline bool ProtocolCSMsg::has_m_stmsgbody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtocolCSMsg::set_has_m_stmsgbody() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtocolCSMsg::clear_has_m_stmsgbody() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtocolCSMsg::clear_m_stmsgbody() {
  if (m_stmsgbody_ != NULL) m_stmsgbody_->::GameProtocol::CS::CSMsgBody::Clear();
  clear_has_m_stmsgbody();
}
inline const ::GameProtocol::CS::CSMsgBody& ProtocolCSMsg::m_stmsgbody() const {
  return m_stmsgbody_ != NULL ? *m_stmsgbody_ : *default_instance_->m_stmsgbody_;
}
inline ::GameProtocol::CS::CSMsgBody* ProtocolCSMsg::mutable_m_stmsgbody() {
  set_has_m_stmsgbody();
  if (m_stmsgbody_ == NULL) m_stmsgbody_ = new ::GameProtocol::CS::CSMsgBody;
  return m_stmsgbody_;
}
inline ::GameProtocol::CS::CSMsgBody* ProtocolCSMsg::release_m_stmsgbody() {
  clear_has_m_stmsgbody();
  ::GameProtocol::CS::CSMsgBody* temp = m_stmsgbody_;
  m_stmsgbody_ = NULL;
  return temp;
}
inline void ProtocolCSMsg::set_allocated_m_stmsgbody(::GameProtocol::CS::CSMsgBody* m_stmsgbody) {
  delete m_stmsgbody_;
  m_stmsgbody_ = m_stmsgbody;
  if (m_stmsgbody) {
    set_has_m_stmsgbody();
  } else {
    clear_has_m_stmsgbody();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CS
}  // namespace GameProtocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameProtocol_2eCS_2eproto__INCLUDED
