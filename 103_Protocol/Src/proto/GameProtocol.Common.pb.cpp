// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.Common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol.Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleID_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutServer_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutServer_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutServer_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutServer_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddNewName_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddNewName_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddNewName_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddNewName_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteName_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteName_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteName_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteName_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatChannelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enNameType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_2eCommon_2eproto() {
  protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol.Common.proto");
  GOOGLE_CHECK(file != NULL);
  ZoneInfo_descriptor_ = file->message_type(0);
  static const int ZoneInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, uzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, strzonename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, uzonestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, strzoneip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, uzoneport_),
  };
  ZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneInfo_descriptor_,
      ZoneInfo::default_instance_,
      ZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneInfo));
  ZoneList_descriptor_ = file->message_type(1);
  static const int ZoneList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneList, stzoneinfos_),
  };
  ZoneList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneList_descriptor_,
      ZoneList::default_instance_,
      ZoneList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneList));
  RoleID_descriptor_ = file->message_type(2);
  static const int RoleID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleID, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleID, uiseq_),
  };
  RoleID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleID_descriptor_,
      RoleID::default_instance_,
      RoleID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleID));
  LogoutServer_Request_descriptor_ = file->message_type(3);
  static const int LogoutServer_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Request, ureason_),
  };
  LogoutServer_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutServer_Request_descriptor_,
      LogoutServer_Request::default_instance_,
      LogoutServer_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutServer_Request));
  LogoutServer_Response_descriptor_ = file->message_type(4);
  static const int LogoutServer_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Response, iresult_),
  };
  LogoutServer_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutServer_Response_descriptor_,
      LogoutServer_Response::default_instance_,
      LogoutServer_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutServer_Response));
  AddNewName_Request_descriptor_ = file->message_type(5);
  static const int AddNewName_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, name_id_),
  };
  AddNewName_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddNewName_Request_descriptor_,
      AddNewName_Request::default_instance_,
      AddNewName_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddNewName_Request));
  AddNewName_Response_descriptor_ = file->message_type(6);
  static const int AddNewName_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, name_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, strname_),
  };
  AddNewName_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddNewName_Response_descriptor_,
      AddNewName_Response::default_instance_,
      AddNewName_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddNewName_Response));
  DeleteName_Request_descriptor_ = file->message_type(7);
  static const int DeleteName_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Request, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Request, itype_),
  };
  DeleteName_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteName_Request_descriptor_,
      DeleteName_Request::default_instance_,
      DeleteName_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteName_Request));
  DeleteName_Response_descriptor_ = file->message_type(8);
  static const int DeleteName_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Response, iresult_),
  };
  DeleteName_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteName_Response_descriptor_,
      DeleteName_Response::default_instance_,
      DeleteName_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteName_Response));
  ChatChannelType_descriptor_ = file->enum_type(0);
  enNameType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_2eCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneInfo_descriptor_, &ZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneList_descriptor_, &ZoneList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleID_descriptor_, &RoleID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutServer_Request_descriptor_, &LogoutServer_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutServer_Response_descriptor_, &LogoutServer_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddNewName_Request_descriptor_, &AddNewName_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddNewName_Response_descriptor_, &AddNewName_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteName_Request_descriptor_, &DeleteName_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteName_Response_descriptor_, &DeleteName_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_2eCommon_2eproto() {
  delete ZoneInfo::default_instance_;
  delete ZoneInfo_reflection_;
  delete ZoneList::default_instance_;
  delete ZoneList_reflection_;
  delete RoleID::default_instance_;
  delete RoleID_reflection_;
  delete LogoutServer_Request::default_instance_;
  delete LogoutServer_Request_reflection_;
  delete LogoutServer_Response::default_instance_;
  delete LogoutServer_Response_reflection_;
  delete AddNewName_Request::default_instance_;
  delete AddNewName_Request_reflection_;
  delete AddNewName_Response::default_instance_;
  delete AddNewName_Response_reflection_;
  delete DeleteName_Request::default_instance_;
  delete DeleteName_Request_reflection_;
  delete DeleteName_Response::default_instance_;
  delete DeleteName_Response_reflection_;
}

void protobuf_AddDesc_GameProtocol_2eCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031GameProtocol.Common.proto\"j\n\010ZoneInfo\022"
    "\017\n\007uZoneID\030\001 \001(\r\022\023\n\013strZoneName\030\002 \001(\t\022\022\n"
    "\nuZoneState\030\003 \001(\r\022\021\n\tstrZoneIP\030\004 \001(\t\022\021\n\t"
    "uZonePort\030\005 \001(\r\"*\n\010ZoneList\022\036\n\013stZoneInf"
    "os\030\001 \003(\0132\t.ZoneInfo\"$\n\006RoleID\022\013\n\003uin\030\001 \001"
    "(\r\022\r\n\005uiSeq\030\002 \001(\r\"4\n\024LogoutServer_Reques"
    "t\022\013\n\003uin\030\001 \001(\r\022\017\n\007uReason\030\002 \001(\r\"(\n\025Logou"
    "tServer_Response\022\017\n\007iResult\030\001 \001(\005\"E\n\022Add"
    "NewName_Request\022\017\n\007strName\030\001 \001(\t\022\r\n\005iTyp"
    "e\030\002 \001(\005\022\017\n\007name_id\030\003 \001(\r\"W\n\023AddNewName_R"
    "esponse\022\017\n\007iResult\030\001 \001(\005\022\r\n\005iType\030\002 \001(\005\022"
    "\017\n\007name_id\030\003 \001(\r\022\017\n\007strName\030\004 \001(\t\"4\n\022Del"
    "eteName_Request\022\017\n\007strName\030\001 \001(\t\022\r\n\005iTyp"
    "e\030\002 \001(\005\"&\n\023DeleteName_Response\022\017\n\007iResul"
    "t\030\001 \001(\005*v\n\017ChatChannelType\022\030\n\024CHAT_CHANN"
    "EL_INVALID\020\000\022\026\n\022CHAT_CHANNEL_WORLD\020\001\022\030\n\024"
    "CHAT_CHANNEL_PRIVATE\020\002\022\027\n\023CHAT_CHANNEL_S"
    "YSTEM\020\003*S\n\nenNameType\022\030\n\024EN_NAME_TYPE_IN"
    "VALID\020\000\022\025\n\021EN_NAME_TYPE_ROLE\020\001\022\024\n\020EN_NAM"
    "E_TYPE_MAX\020\002", 772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol.Common.proto", &protobuf_RegisterTypes);
  ZoneInfo::default_instance_ = new ZoneInfo();
  ZoneList::default_instance_ = new ZoneList();
  RoleID::default_instance_ = new RoleID();
  LogoutServer_Request::default_instance_ = new LogoutServer_Request();
  LogoutServer_Response::default_instance_ = new LogoutServer_Response();
  AddNewName_Request::default_instance_ = new AddNewName_Request();
  AddNewName_Response::default_instance_ = new AddNewName_Response();
  DeleteName_Request::default_instance_ = new DeleteName_Request();
  DeleteName_Response::default_instance_ = new DeleteName_Response();
  ZoneInfo::default_instance_->InitAsDefaultInstance();
  ZoneList::default_instance_->InitAsDefaultInstance();
  RoleID::default_instance_->InitAsDefaultInstance();
  LogoutServer_Request::default_instance_->InitAsDefaultInstance();
  LogoutServer_Response::default_instance_->InitAsDefaultInstance();
  AddNewName_Request::default_instance_->InitAsDefaultInstance();
  AddNewName_Response::default_instance_->InitAsDefaultInstance();
  DeleteName_Request::default_instance_->InitAsDefaultInstance();
  DeleteName_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_2eCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_2eCommon_2eproto {
  StaticDescriptorInitializer_GameProtocol_2eCommon_2eproto() {
    protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  }
} static_descriptor_initializer_GameProtocol_2eCommon_2eproto_;
const ::google::protobuf::EnumDescriptor* ChatChannelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatChannelType_descriptor_;
}
bool ChatChannelType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enNameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enNameType_descriptor_;
}
bool enNameType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneInfo::kUZoneIDFieldNumber;
const int ZoneInfo::kStrZoneNameFieldNumber;
const int ZoneInfo::kUZoneStateFieldNumber;
const int ZoneInfo::kStrZoneIPFieldNumber;
const int ZoneInfo::kUZonePortFieldNumber;
#endif  // !_MSC_VER

ZoneInfo::ZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneInfo::InitAsDefaultInstance() {
}

ZoneInfo::ZoneInfo(const ZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneInfo::SharedCtor() {
  _cached_size_ = 0;
  uzoneid_ = 0u;
  strzonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uzonestate_ = 0u;
  strzoneip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uzoneport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneInfo::~ZoneInfo() {
  SharedDtor();
}

void ZoneInfo::SharedDtor() {
  if (strzonename_ != &::google::protobuf::internal::kEmptyString) {
    delete strzonename_;
  }
  if (strzoneip_ != &::google::protobuf::internal::kEmptyString) {
    delete strzoneip_;
  }
  if (this != default_instance_) {
  }
}

void ZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneInfo_descriptor_;
}

const ZoneInfo& ZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  return *default_instance_;
}

ZoneInfo* ZoneInfo::default_instance_ = NULL;

ZoneInfo* ZoneInfo::New() const {
  return new ZoneInfo;
}

void ZoneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uzoneid_ = 0u;
    if (has_strzonename()) {
      if (strzonename_ != &::google::protobuf::internal::kEmptyString) {
        strzonename_->clear();
      }
    }
    uzonestate_ = 0u;
    if (has_strzoneip()) {
      if (strzoneip_ != &::google::protobuf::internal::kEmptyString) {
        strzoneip_->clear();
      }
    }
    uzoneport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uZoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uzoneid_)));
          set_has_uzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strZoneName;
        break;
      }

      // optional string strZoneName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strZoneName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strzonename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strzonename().data(), this->strzonename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uZoneState;
        break;
      }

      // optional uint32 uZoneState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uZoneState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uzonestate_)));
          set_has_uzonestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strZoneIP;
        break;
      }

      // optional string strZoneIP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strZoneIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strzoneip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strzoneip().data(), this->strzoneip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uZonePort;
        break;
      }

      // optional uint32 uZonePort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uZonePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uzoneport_)));
          set_has_uzoneport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uZoneID = 1;
  if (has_uzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uzoneid(), output);
  }

  // optional string strZoneName = 2;
  if (has_strzonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strzonename().data(), this->strzonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strzonename(), output);
  }

  // optional uint32 uZoneState = 3;
  if (has_uzonestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uzonestate(), output);
  }

  // optional string strZoneIP = 4;
  if (has_strzoneip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strzoneip().data(), this->strzoneip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strzoneip(), output);
  }

  // optional uint32 uZonePort = 5;
  if (has_uzoneport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uzoneport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uZoneID = 1;
  if (has_uzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uzoneid(), target);
  }

  // optional string strZoneName = 2;
  if (has_strzonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strzonename().data(), this->strzonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strzonename(), target);
  }

  // optional uint32 uZoneState = 3;
  if (has_uzonestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uzonestate(), target);
  }

  // optional string strZoneIP = 4;
  if (has_strzoneip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strzoneip().data(), this->strzoneip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strzoneip(), target);
  }

  // optional uint32 uZonePort = 5;
  if (has_uzoneport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uzoneport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uZoneID = 1;
    if (has_uzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uzoneid());
    }

    // optional string strZoneName = 2;
    if (has_strzonename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strzonename());
    }

    // optional uint32 uZoneState = 3;
    if (has_uzonestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uzonestate());
    }

    // optional string strZoneIP = 4;
    if (has_strzoneip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strzoneip());
    }

    // optional uint32 uZonePort = 5;
    if (has_uzoneport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uzoneport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneInfo::MergeFrom(const ZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uzoneid()) {
      set_uzoneid(from.uzoneid());
    }
    if (from.has_strzonename()) {
      set_strzonename(from.strzonename());
    }
    if (from.has_uzonestate()) {
      set_uzonestate(from.uzonestate());
    }
    if (from.has_strzoneip()) {
      set_strzoneip(from.strzoneip());
    }
    if (from.has_uzoneport()) {
      set_uzoneport(from.uzoneport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneInfo::CopyFrom(const ZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneInfo::IsInitialized() const {

  return true;
}

void ZoneInfo::Swap(ZoneInfo* other) {
  if (other != this) {
    std::swap(uzoneid_, other->uzoneid_);
    std::swap(strzonename_, other->strzonename_);
    std::swap(uzonestate_, other->uzonestate_);
    std::swap(strzoneip_, other->strzoneip_);
    std::swap(uzoneport_, other->uzoneport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneInfo_descriptor_;
  metadata.reflection = ZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneList::kStZoneInfosFieldNumber;
#endif  // !_MSC_VER

ZoneList::ZoneList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneList::InitAsDefaultInstance() {
}

ZoneList::ZoneList(const ZoneList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneList::~ZoneList() {
  SharedDtor();
}

void ZoneList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneList_descriptor_;
}

const ZoneList& ZoneList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  return *default_instance_;
}

ZoneList* ZoneList::default_instance_ = NULL;

ZoneList* ZoneList::New() const {
  return new ZoneList;
}

void ZoneList::Clear() {
  stzoneinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZoneInfo stZoneInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stZoneInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stzoneinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stZoneInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ZoneInfo stZoneInfos = 1;
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stzoneinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ZoneInfo stZoneInfos = 1;
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stzoneinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneList::ByteSize() const {
  int total_size = 0;

  // repeated .ZoneInfo stZoneInfos = 1;
  total_size += 1 * this->stzoneinfos_size();
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stzoneinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneList::MergeFrom(const ZoneList& from) {
  GOOGLE_CHECK_NE(&from, this);
  stzoneinfos_.MergeFrom(from.stzoneinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneList::CopyFrom(const ZoneList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneList::IsInitialized() const {

  return true;
}

void ZoneList::Swap(ZoneList* other) {
  if (other != this) {
    stzoneinfos_.Swap(&other->stzoneinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneList_descriptor_;
  metadata.reflection = ZoneList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleID::kUinFieldNumber;
const int RoleID::kUiSeqFieldNumber;
#endif  // !_MSC_VER

RoleID::RoleID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleID::InitAsDefaultInstance() {
}

RoleID::RoleID(const RoleID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleID::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  uiseq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleID::~RoleID() {
  SharedDtor();
}

void RoleID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleID_descriptor_;
}

const RoleID& RoleID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  return *default_instance_;
}

RoleID* RoleID::default_instance_ = NULL;

RoleID* RoleID::New() const {
  return new RoleID;
}

void RoleID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    uiseq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiSeq;
        break;
      }

      // optional uint32 uiSeq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiseq_)));
          set_has_uiseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 uiSeq = 2;
  if (has_uiseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiseq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 uiSeq = 2;
  if (has_uiseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiseq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 uiSeq = 2;
    if (has_uiseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiseq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleID::MergeFrom(const RoleID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_uiseq()) {
      set_uiseq(from.uiseq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleID::CopyFrom(const RoleID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleID::IsInitialized() const {

  return true;
}

void RoleID::Swap(RoleID* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(uiseq_, other->uiseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleID_descriptor_;
  metadata.reflection = RoleID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutServer_Request::kUinFieldNumber;
const int LogoutServer_Request::kUReasonFieldNumber;
#endif  // !_MSC_VER

LogoutServer_Request::LogoutServer_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutServer_Request::InitAsDefaultInstance() {
}

LogoutServer_Request::LogoutServer_Request(const LogoutServer_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutServer_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  ureason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutServer_Request::~LogoutServer_Request() {
  SharedDtor();
}

void LogoutServer_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutServer_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutServer_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutServer_Request_descriptor_;
}

const LogoutServer_Request& LogoutServer_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  return *default_instance_;
}

LogoutServer_Request* LogoutServer_Request::default_instance_ = NULL;

LogoutServer_Request* LogoutServer_Request::New() const {
  return new LogoutServer_Request;
}

void LogoutServer_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    ureason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutServer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uReason;
        break;
      }

      // optional uint32 uReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ureason_)));
          set_has_ureason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutServer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 uReason = 2;
  if (has_ureason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ureason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutServer_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 uReason = 2;
  if (has_ureason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ureason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutServer_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 uReason = 2;
    if (has_ureason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ureason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutServer_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutServer_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutServer_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutServer_Request::MergeFrom(const LogoutServer_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ureason()) {
      set_ureason(from.ureason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutServer_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutServer_Request::CopyFrom(const LogoutServer_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutServer_Request::IsInitialized() const {

  return true;
}

void LogoutServer_Request::Swap(LogoutServer_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(ureason_, other->ureason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutServer_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutServer_Request_descriptor_;
  metadata.reflection = LogoutServer_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutServer_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

LogoutServer_Response::LogoutServer_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutServer_Response::InitAsDefaultInstance() {
}

LogoutServer_Response::LogoutServer_Response(const LogoutServer_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutServer_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutServer_Response::~LogoutServer_Response() {
  SharedDtor();
}

void LogoutServer_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutServer_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutServer_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutServer_Response_descriptor_;
}

const LogoutServer_Response& LogoutServer_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  return *default_instance_;
}

LogoutServer_Response* LogoutServer_Response::default_instance_ = NULL;

LogoutServer_Response* LogoutServer_Response::New() const {
  return new LogoutServer_Response;
}

void LogoutServer_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutServer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutServer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutServer_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutServer_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutServer_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutServer_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutServer_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutServer_Response::MergeFrom(const LogoutServer_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutServer_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutServer_Response::CopyFrom(const LogoutServer_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutServer_Response::IsInitialized() const {

  return true;
}

void LogoutServer_Response::Swap(LogoutServer_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutServer_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutServer_Response_descriptor_;
  metadata.reflection = LogoutServer_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddNewName_Request::kStrNameFieldNumber;
const int AddNewName_Request::kITypeFieldNumber;
const int AddNewName_Request::kNameIdFieldNumber;
#endif  // !_MSC_VER

AddNewName_Request::AddNewName_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddNewName_Request::InitAsDefaultInstance() {
}

AddNewName_Request::AddNewName_Request(const AddNewName_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddNewName_Request::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itype_ = 0;
  name_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddNewName_Request::~AddNewName_Request() {
  SharedDtor();
}

void AddNewName_Request::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void AddNewName_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNewName_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddNewName_Request_descriptor_;
}

const AddNewName_Request& AddNewName_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  return *default_instance_;
}

AddNewName_Request* AddNewName_Request::default_instance_ = NULL;

AddNewName_Request* AddNewName_Request::New() const {
  return new AddNewName_Request;
}

void AddNewName_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    itype_ = 0;
    name_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddNewName_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_name_id;
        break;
      }

      // optional uint32 name_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_id_)));
          set_has_name_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddNewName_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strname(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  // optional uint32 name_id = 3;
  if (has_name_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->name_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddNewName_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  // optional uint32 name_id = 3;
  if (has_name_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->name_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddNewName_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strName = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional uint32 name_id = 3;
    if (has_name_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNewName_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddNewName_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddNewName_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddNewName_Request::MergeFrom(const AddNewName_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_name_id()) {
      set_name_id(from.name_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddNewName_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNewName_Request::CopyFrom(const AddNewName_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewName_Request::IsInitialized() const {

  return true;
}

void AddNewName_Request::Swap(AddNewName_Request* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(itype_, other->itype_);
    std::swap(name_id_, other->name_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddNewName_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddNewName_Request_descriptor_;
  metadata.reflection = AddNewName_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddNewName_Response::kIResultFieldNumber;
const int AddNewName_Response::kITypeFieldNumber;
const int AddNewName_Response::kNameIdFieldNumber;
const int AddNewName_Response::kStrNameFieldNumber;
#endif  // !_MSC_VER

AddNewName_Response::AddNewName_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddNewName_Response::InitAsDefaultInstance() {
}

AddNewName_Response::AddNewName_Response(const AddNewName_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddNewName_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  itype_ = 0;
  name_id_ = 0u;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddNewName_Response::~AddNewName_Response() {
  SharedDtor();
}

void AddNewName_Response::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void AddNewName_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNewName_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddNewName_Response_descriptor_;
}

const AddNewName_Response& AddNewName_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  return *default_instance_;
}

AddNewName_Response* AddNewName_Response::default_instance_ = NULL;

AddNewName_Response* AddNewName_Response::New() const {
  return new AddNewName_Response;
}

void AddNewName_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    itype_ = 0;
    name_id_ = 0u;
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddNewName_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_name_id;
        break;
      }

      // optional uint32 name_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_id_)));
          set_has_name_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strName;
        break;
      }

      // optional string strName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddNewName_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  // optional uint32 name_id = 3;
  if (has_name_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->name_id(), output);
  }

  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddNewName_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  // optional uint32 name_id = 3;
  if (has_name_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->name_id(), target);
  }

  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddNewName_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional uint32 name_id = 3;
    if (has_name_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_id());
    }

    // optional string strName = 4;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNewName_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddNewName_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddNewName_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddNewName_Response::MergeFrom(const AddNewName_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_name_id()) {
      set_name_id(from.name_id());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddNewName_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNewName_Response::CopyFrom(const AddNewName_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewName_Response::IsInitialized() const {

  return true;
}

void AddNewName_Response::Swap(AddNewName_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(itype_, other->itype_);
    std::swap(name_id_, other->name_id_);
    std::swap(strname_, other->strname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddNewName_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddNewName_Response_descriptor_;
  metadata.reflection = AddNewName_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteName_Request::kStrNameFieldNumber;
const int DeleteName_Request::kITypeFieldNumber;
#endif  // !_MSC_VER

DeleteName_Request::DeleteName_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteName_Request::InitAsDefaultInstance() {
}

DeleteName_Request::DeleteName_Request(const DeleteName_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteName_Request::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteName_Request::~DeleteName_Request() {
  SharedDtor();
}

void DeleteName_Request::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void DeleteName_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteName_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteName_Request_descriptor_;
}

const DeleteName_Request& DeleteName_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  return *default_instance_;
}

DeleteName_Request* DeleteName_Request::default_instance_ = NULL;

DeleteName_Request* DeleteName_Request::New() const {
  return new DeleteName_Request;
}

void DeleteName_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    itype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteName_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteName_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strname(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteName_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteName_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strName = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteName_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteName_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteName_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteName_Request::MergeFrom(const DeleteName_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteName_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteName_Request::CopyFrom(const DeleteName_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteName_Request::IsInitialized() const {

  return true;
}

void DeleteName_Request::Swap(DeleteName_Request* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(itype_, other->itype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteName_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteName_Request_descriptor_;
  metadata.reflection = DeleteName_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteName_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

DeleteName_Response::DeleteName_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteName_Response::InitAsDefaultInstance() {
}

DeleteName_Response::DeleteName_Response(const DeleteName_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteName_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteName_Response::~DeleteName_Response() {
  SharedDtor();
}

void DeleteName_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteName_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteName_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteName_Response_descriptor_;
}

const DeleteName_Response& DeleteName_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  return *default_instance_;
}

DeleteName_Response* DeleteName_Response::default_instance_ = NULL;

DeleteName_Response* DeleteName_Response::New() const {
  return new DeleteName_Response;
}

void DeleteName_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteName_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteName_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteName_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteName_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteName_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteName_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteName_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteName_Response::MergeFrom(const DeleteName_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteName_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteName_Response::CopyFrom(const DeleteName_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteName_Response::IsInitialized() const {

  return true;
}

void DeleteName_Response::Swap(DeleteName_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteName_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteName_Response_descriptor_;
  metadata.reflection = DeleteName_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
