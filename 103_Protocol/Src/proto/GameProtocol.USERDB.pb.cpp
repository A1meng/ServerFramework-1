// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.USERDB.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol.USERDB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BASEDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BASEDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* QUESTDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QUESTDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ITEMDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ITEMDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneFightUnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneFightUnitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightUnitRepInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightUnitRepInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightForm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightForm_reflection_ = NULL;
const ::google::protobuf::Descriptor* FIGHTDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FIGHTDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* FRIENDDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FRIENDDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* RESERVED1DBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RESERVED1DBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* RESERVED2DBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RESERVED2DBINFO_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto() {
  protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol.USERDB.proto");
  GOOGLE_CHECK(file != NULL);
  GameUserInfo_descriptor_ = file->message_type(0);
  static const int GameUserInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, uiseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strbaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strquestinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, striteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strfightinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strfriendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strreserved1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strreserved2_),
  };
  GameUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameUserInfo_descriptor_,
      GameUserInfo::default_instance_,
      GameUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameUserInfo));
  BASEDBINFO_descriptor_ = file->message_type(1);
  static const int BASEDBINFO_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, sznickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, iresources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ustatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilastlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilastlogout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, icreatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ionlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilogincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, iforbidtalkingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilogouttime_),
  };
  BASEDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BASEDBINFO_descriptor_,
      BASEDBINFO::default_instance_,
      BASEDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BASEDBINFO));
  QUESTDBINFO_descriptor_ = file->message_type(2);
  static const int QUESTDBINFO_offsets_[1] = {
  };
  QUESTDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QUESTDBINFO_descriptor_,
      QUESTDBINFO::default_instance_,
      QUESTDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QUESTDBINFO));
  OneSlotInfo_descriptor_ = file->message_type(3);
  static const int OneSlotInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSlotInfo, iitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSlotInfo, iitemnum_),
  };
  OneSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneSlotInfo_descriptor_,
      OneSlotInfo::default_instance_,
      OneSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneSlotInfo));
  ItemSlotInfo_descriptor_ = file->message_type(4);
  static const int ItemSlotInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSlotInfo, stslots_),
  };
  ItemSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSlotInfo_descriptor_,
      ItemSlotInfo::default_instance_,
      ItemSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSlotInfo));
  ITEMDBINFO_descriptor_ = file->message_type(5);
  static const int ITEMDBINFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITEMDBINFO, m_iopenedslotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITEMDBINFO, stitemslot_),
  };
  ITEMDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ITEMDBINFO_descriptor_,
      ITEMDBINFO::default_instance_,
      ITEMDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITEMDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITEMDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ITEMDBINFO));
  UnitItemInfo_descriptor_ = file->message_type(6);
  static const int UnitItemInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitItemInfo, stitems_),
  };
  UnitItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitItemInfo_descriptor_,
      UnitItemInfo::default_instance_,
      UnitItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitItemInfo));
  OneFightUnitInfo_descriptor_ = file->message_type(7);
  static const int OneFightUnitInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFightUnitInfo, iunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFightUnitInfo, iunitaiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFightUnitInfo, iattributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFightUnitInfo, inormalskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFightUnitInfo, ilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFightUnitInfo, ilevelexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFightUnitInfo, stiteminfo_),
  };
  OneFightUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneFightUnitInfo_descriptor_,
      OneFightUnitInfo::default_instance_,
      OneFightUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFightUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFightUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneFightUnitInfo));
  FightUnitRepInfo_descriptor_ = file->message_type(8);
  static const int FightUnitRepInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUnitRepInfo, stunits_),
  };
  FightUnitRepInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightUnitRepInfo_descriptor_,
      FightUnitRepInfo::default_instance_,
      FightUnitRepInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUnitRepInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUnitRepInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightUnitRepInfo));
  FightForm_descriptor_ = file->message_type(9);
  static const int FightForm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightForm, ifightunitids_),
  };
  FightForm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightForm_descriptor_,
      FightForm::default_instance_,
      FightForm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightForm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightForm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightForm));
  FIGHTDBINFO_descriptor_ = file->message_type(10);
  static const int FIGHTDBINFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIGHTDBINFO, stunitrep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIGHTDBINFO, stforms_),
  };
  FIGHTDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FIGHTDBINFO_descriptor_,
      FIGHTDBINFO::default_instance_,
      FIGHTDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIGHTDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FIGHTDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FIGHTDBINFO));
  FRIENDDBINFO_descriptor_ = file->message_type(11);
  static const int FRIENDDBINFO_offsets_[1] = {
  };
  FRIENDDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FRIENDDBINFO_descriptor_,
      FRIENDDBINFO::default_instance_,
      FRIENDDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRIENDDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRIENDDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FRIENDDBINFO));
  RESERVED1DBINFO_descriptor_ = file->message_type(12);
  static const int RESERVED1DBINFO_offsets_[1] = {
  };
  RESERVED1DBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RESERVED1DBINFO_descriptor_,
      RESERVED1DBINFO::default_instance_,
      RESERVED1DBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED1DBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED1DBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RESERVED1DBINFO));
  RESERVED2DBINFO_descriptor_ = file->message_type(13);
  static const int RESERVED2DBINFO_offsets_[1] = {
  };
  RESERVED2DBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RESERVED2DBINFO_descriptor_,
      RESERVED2DBINFO::default_instance_,
      RESERVED2DBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED2DBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED2DBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RESERVED2DBINFO));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_2eUSERDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameUserInfo_descriptor_, &GameUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BASEDBINFO_descriptor_, &BASEDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QUESTDBINFO_descriptor_, &QUESTDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneSlotInfo_descriptor_, &OneSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSlotInfo_descriptor_, &ItemSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ITEMDBINFO_descriptor_, &ITEMDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitItemInfo_descriptor_, &UnitItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneFightUnitInfo_descriptor_, &OneFightUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightUnitRepInfo_descriptor_, &FightUnitRepInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightForm_descriptor_, &FightForm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FIGHTDBINFO_descriptor_, &FIGHTDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FRIENDDBINFO_descriptor_, &FRIENDDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RESERVED1DBINFO_descriptor_, &RESERVED1DBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RESERVED2DBINFO_descriptor_, &RESERVED2DBINFO::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto() {
  delete GameUserInfo::default_instance_;
  delete GameUserInfo_reflection_;
  delete BASEDBINFO::default_instance_;
  delete BASEDBINFO_reflection_;
  delete QUESTDBINFO::default_instance_;
  delete QUESTDBINFO_reflection_;
  delete OneSlotInfo::default_instance_;
  delete OneSlotInfo_reflection_;
  delete ItemSlotInfo::default_instance_;
  delete ItemSlotInfo_reflection_;
  delete ITEMDBINFO::default_instance_;
  delete ITEMDBINFO_reflection_;
  delete UnitItemInfo::default_instance_;
  delete UnitItemInfo_reflection_;
  delete OneFightUnitInfo::default_instance_;
  delete OneFightUnitInfo_reflection_;
  delete FightUnitRepInfo::default_instance_;
  delete FightUnitRepInfo_reflection_;
  delete FightForm::default_instance_;
  delete FightForm_reflection_;
  delete FIGHTDBINFO::default_instance_;
  delete FIGHTDBINFO_reflection_;
  delete FRIENDDBINFO::default_instance_;
  delete FRIENDDBINFO_reflection_;
  delete RESERVED1DBINFO::default_instance_;
  delete RESERVED1DBINFO_reflection_;
  delete RESERVED2DBINFO::default_instance_;
  delete RESERVED2DBINFO_reflection_;
}

void protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031GameProtocol.USERDB.proto\032\031GameProtoco"
    "l.Common.proto\"\303\001\n\014GameUserInfo\022\013\n\003uin\030\001"
    " \001(\r\022\r\n\005uiSeq\030\002 \001(\r\022\023\n\013strBaseInfo\030\003 \001(\014"
    "\022\024\n\014strQuestInfo\030\004 \001(\014\022\023\n\013strItemInfo\030\005 "
    "\001(\014\022\024\n\014strFightInfo\030\007 \001(\014\022\025\n\rstrFriendIn"
    "fo\030\010 \001(\014\022\024\n\014strReserved1\030\t \001(\014\022\024\n\014strRes"
    "erved2\030\n \001(\014\"\362\001\n\nBASEDBINFO\022\022\n\nszNickNam"
    "e\030\001 \001(\t\022\022\n\niResources\030\003 \003(\005\022\017\n\007uStatus\030\t"
    " \001(\r\022\022\n\niLastLogin\030\013 \001(\005\022\023\n\013iLastLogout\030"
    "\014 \001(\005\022\023\n\013iCreateTime\030\r \001(\005\022\023\n\013iOnlineTim"
    "e\030\016 \001(\005\022\023\n\013iLoginCount\030\017 \001(\005\022\032\n\022iForbidT"
    "alkingTime\030\020 \001(\005\022\022\n\niLoginTime\030\021 \001(\005\022\023\n\013"
    "iLogoutTime\030\022 \001(\005\"\r\n\013QUESTDBINFO\"0\n\013OneS"
    "lotInfo\022\017\n\007iItemID\030\001 \001(\005\022\020\n\010iItemNum\030\002 \001"
    "(\005\"-\n\014ItemSlotInfo\022\035\n\007stSlots\030\001 \003(\0132\014.On"
    "eSlotInfo\"I\n\nITEMDBINFO\022\030\n\020m_iOpenedSlot"
    "Num\030\001 \001(\005\022!\n\nstItemSlot\030\002 \001(\0132\r.ItemSlot"
    "Info\"-\n\014UnitItemInfo\022\035\n\007stItems\030\001 \003(\0132\014."
    "OneSlotInfo\"\251\001\n\020OneFightUnitInfo\022\017\n\007iUni"
    "tID\030\001 \001(\005\022\021\n\tiUnitAIID\030\002 \001(\005\022\023\n\013iAttribu"
    "tes\030\003 \003(\005\022\026\n\016iNormalSkillID\030\004 \001(\005\022\016\n\006iLe"
    "vel\030\005 \001(\005\022\021\n\tiLevelExp\030\006 \001(\005\022!\n\nstItemIn"
    "fo\030\007 \001(\0132\r.UnitItemInfo\"6\n\020FightUnitRepI"
    "nfo\022\"\n\007stUnits\030\001 \003(\0132\021.OneFightUnitInfo\""
    "\"\n\tFightForm\022\025\n\riFightUnitIDs\030\001 \003(\005\"P\n\013F"
    "IGHTDBINFO\022$\n\tstUnitRep\030\001 \001(\0132\021.FightUni"
    "tRepInfo\022\033\n\007stForms\030\002 \001(\0132\n.FightForm\"\016\n"
    "\014FRIENDDBINFO\"\021\n\017RESERVED1DBINFO\"\021\n\017RESE"
    "RVED2DBINFO", 1131);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol.USERDB.proto", &protobuf_RegisterTypes);
  GameUserInfo::default_instance_ = new GameUserInfo();
  BASEDBINFO::default_instance_ = new BASEDBINFO();
  QUESTDBINFO::default_instance_ = new QUESTDBINFO();
  OneSlotInfo::default_instance_ = new OneSlotInfo();
  ItemSlotInfo::default_instance_ = new ItemSlotInfo();
  ITEMDBINFO::default_instance_ = new ITEMDBINFO();
  UnitItemInfo::default_instance_ = new UnitItemInfo();
  OneFightUnitInfo::default_instance_ = new OneFightUnitInfo();
  FightUnitRepInfo::default_instance_ = new FightUnitRepInfo();
  FightForm::default_instance_ = new FightForm();
  FIGHTDBINFO::default_instance_ = new FIGHTDBINFO();
  FRIENDDBINFO::default_instance_ = new FRIENDDBINFO();
  RESERVED1DBINFO::default_instance_ = new RESERVED1DBINFO();
  RESERVED2DBINFO::default_instance_ = new RESERVED2DBINFO();
  GameUserInfo::default_instance_->InitAsDefaultInstance();
  BASEDBINFO::default_instance_->InitAsDefaultInstance();
  QUESTDBINFO::default_instance_->InitAsDefaultInstance();
  OneSlotInfo::default_instance_->InitAsDefaultInstance();
  ItemSlotInfo::default_instance_->InitAsDefaultInstance();
  ITEMDBINFO::default_instance_->InitAsDefaultInstance();
  UnitItemInfo::default_instance_->InitAsDefaultInstance();
  OneFightUnitInfo::default_instance_->InitAsDefaultInstance();
  FightUnitRepInfo::default_instance_->InitAsDefaultInstance();
  FightForm::default_instance_->InitAsDefaultInstance();
  FIGHTDBINFO::default_instance_->InitAsDefaultInstance();
  FRIENDDBINFO::default_instance_->InitAsDefaultInstance();
  RESERVED1DBINFO::default_instance_->InitAsDefaultInstance();
  RESERVED2DBINFO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_2eUSERDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_2eUSERDB_2eproto {
  StaticDescriptorInitializer_GameProtocol_2eUSERDB_2eproto() {
    protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  }
} static_descriptor_initializer_GameProtocol_2eUSERDB_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GameUserInfo::kUinFieldNumber;
const int GameUserInfo::kUiSeqFieldNumber;
const int GameUserInfo::kStrBaseInfoFieldNumber;
const int GameUserInfo::kStrQuestInfoFieldNumber;
const int GameUserInfo::kStrItemInfoFieldNumber;
const int GameUserInfo::kStrFightInfoFieldNumber;
const int GameUserInfo::kStrFriendInfoFieldNumber;
const int GameUserInfo::kStrReserved1FieldNumber;
const int GameUserInfo::kStrReserved2FieldNumber;
#endif  // !_MSC_VER

GameUserInfo::GameUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameUserInfo::InitAsDefaultInstance() {
}

GameUserInfo::GameUserInfo(const GameUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  uiseq_ = 0u;
  strbaseinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strquestinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  striteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strfightinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strfriendinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strreserved1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strreserved2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUserInfo::~GameUserInfo() {
  SharedDtor();
}

void GameUserInfo::SharedDtor() {
  if (strbaseinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strbaseinfo_;
  }
  if (strquestinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strquestinfo_;
  }
  if (striteminfo_ != &::google::protobuf::internal::kEmptyString) {
    delete striteminfo_;
  }
  if (strfightinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strfightinfo_;
  }
  if (strfriendinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strfriendinfo_;
  }
  if (strreserved1_ != &::google::protobuf::internal::kEmptyString) {
    delete strreserved1_;
  }
  if (strreserved2_ != &::google::protobuf::internal::kEmptyString) {
    delete strreserved2_;
  }
  if (this != default_instance_) {
  }
}

void GameUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameUserInfo_descriptor_;
}

const GameUserInfo& GameUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

GameUserInfo* GameUserInfo::default_instance_ = NULL;

GameUserInfo* GameUserInfo::New() const {
  return new GameUserInfo;
}

void GameUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    uiseq_ = 0u;
    if (has_strbaseinfo()) {
      if (strbaseinfo_ != &::google::protobuf::internal::kEmptyString) {
        strbaseinfo_->clear();
      }
    }
    if (has_strquestinfo()) {
      if (strquestinfo_ != &::google::protobuf::internal::kEmptyString) {
        strquestinfo_->clear();
      }
    }
    if (has_striteminfo()) {
      if (striteminfo_ != &::google::protobuf::internal::kEmptyString) {
        striteminfo_->clear();
      }
    }
    if (has_strfightinfo()) {
      if (strfightinfo_ != &::google::protobuf::internal::kEmptyString) {
        strfightinfo_->clear();
      }
    }
    if (has_strfriendinfo()) {
      if (strfriendinfo_ != &::google::protobuf::internal::kEmptyString) {
        strfriendinfo_->clear();
      }
    }
    if (has_strreserved1()) {
      if (strreserved1_ != &::google::protobuf::internal::kEmptyString) {
        strreserved1_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_strreserved2()) {
      if (strreserved2_ != &::google::protobuf::internal::kEmptyString) {
        strreserved2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiSeq;
        break;
      }

      // optional uint32 uiSeq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiseq_)));
          set_has_uiseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strBaseInfo;
        break;
      }

      // optional bytes strBaseInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strbaseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strQuestInfo;
        break;
      }

      // optional bytes strQuestInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strQuestInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strquestinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strItemInfo;
        break;
      }

      // optional bytes strItemInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_striteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strFightInfo;
        break;
      }

      // optional bytes strFightInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strFightInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strfightinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strFriendInfo;
        break;
      }

      // optional bytes strFriendInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strFriendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strfriendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strReserved1;
        break;
      }

      // optional bytes strReserved1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strReserved1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strreserved1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_strReserved2;
        break;
      }

      // optional bytes strReserved2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strReserved2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strreserved2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 uiSeq = 2;
  if (has_uiseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiseq(), output);
  }

  // optional bytes strBaseInfo = 3;
  if (has_strbaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strbaseinfo(), output);
  }

  // optional bytes strQuestInfo = 4;
  if (has_strquestinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strquestinfo(), output);
  }

  // optional bytes strItemInfo = 5;
  if (has_striteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->striteminfo(), output);
  }

  // optional bytes strFightInfo = 7;
  if (has_strfightinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->strfightinfo(), output);
  }

  // optional bytes strFriendInfo = 8;
  if (has_strfriendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->strfriendinfo(), output);
  }

  // optional bytes strReserved1 = 9;
  if (has_strreserved1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->strreserved1(), output);
  }

  // optional bytes strReserved2 = 10;
  if (has_strreserved2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->strreserved2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 uiSeq = 2;
  if (has_uiseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiseq(), target);
  }

  // optional bytes strBaseInfo = 3;
  if (has_strbaseinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strbaseinfo(), target);
  }

  // optional bytes strQuestInfo = 4;
  if (has_strquestinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strquestinfo(), target);
  }

  // optional bytes strItemInfo = 5;
  if (has_striteminfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->striteminfo(), target);
  }

  // optional bytes strFightInfo = 7;
  if (has_strfightinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->strfightinfo(), target);
  }

  // optional bytes strFriendInfo = 8;
  if (has_strfriendinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->strfriendinfo(), target);
  }

  // optional bytes strReserved1 = 9;
  if (has_strreserved1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->strreserved1(), target);
  }

  // optional bytes strReserved2 = 10;
  if (has_strreserved2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->strreserved2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 uiSeq = 2;
    if (has_uiseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiseq());
    }

    // optional bytes strBaseInfo = 3;
    if (has_strbaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strbaseinfo());
    }

    // optional bytes strQuestInfo = 4;
    if (has_strquestinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strquestinfo());
    }

    // optional bytes strItemInfo = 5;
    if (has_striteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->striteminfo());
    }

    // optional bytes strFightInfo = 7;
    if (has_strfightinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strfightinfo());
    }

    // optional bytes strFriendInfo = 8;
    if (has_strfriendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strfriendinfo());
    }

    // optional bytes strReserved1 = 9;
    if (has_strreserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strreserved1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes strReserved2 = 10;
    if (has_strreserved2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strreserved2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameUserInfo::MergeFrom(const GameUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_uiseq()) {
      set_uiseq(from.uiseq());
    }
    if (from.has_strbaseinfo()) {
      set_strbaseinfo(from.strbaseinfo());
    }
    if (from.has_strquestinfo()) {
      set_strquestinfo(from.strquestinfo());
    }
    if (from.has_striteminfo()) {
      set_striteminfo(from.striteminfo());
    }
    if (from.has_strfightinfo()) {
      set_strfightinfo(from.strfightinfo());
    }
    if (from.has_strfriendinfo()) {
      set_strfriendinfo(from.strfriendinfo());
    }
    if (from.has_strreserved1()) {
      set_strreserved1(from.strreserved1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strreserved2()) {
      set_strreserved2(from.strreserved2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameUserInfo::CopyFrom(const GameUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserInfo::IsInitialized() const {

  return true;
}

void GameUserInfo::Swap(GameUserInfo* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(uiseq_, other->uiseq_);
    std::swap(strbaseinfo_, other->strbaseinfo_);
    std::swap(strquestinfo_, other->strquestinfo_);
    std::swap(striteminfo_, other->striteminfo_);
    std::swap(strfightinfo_, other->strfightinfo_);
    std::swap(strfriendinfo_, other->strfriendinfo_);
    std::swap(strreserved1_, other->strreserved1_);
    std::swap(strreserved2_, other->strreserved2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameUserInfo_descriptor_;
  metadata.reflection = GameUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BASEDBINFO::kSzNickNameFieldNumber;
const int BASEDBINFO::kIResourcesFieldNumber;
const int BASEDBINFO::kUStatusFieldNumber;
const int BASEDBINFO::kILastLoginFieldNumber;
const int BASEDBINFO::kILastLogoutFieldNumber;
const int BASEDBINFO::kICreateTimeFieldNumber;
const int BASEDBINFO::kIOnlineTimeFieldNumber;
const int BASEDBINFO::kILoginCountFieldNumber;
const int BASEDBINFO::kIForbidTalkingTimeFieldNumber;
const int BASEDBINFO::kILoginTimeFieldNumber;
const int BASEDBINFO::kILogoutTimeFieldNumber;
#endif  // !_MSC_VER

BASEDBINFO::BASEDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BASEDBINFO::InitAsDefaultInstance() {
}

BASEDBINFO::BASEDBINFO(const BASEDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BASEDBINFO::SharedCtor() {
  _cached_size_ = 0;
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ustatus_ = 0u;
  ilastlogin_ = 0;
  ilastlogout_ = 0;
  icreatetime_ = 0;
  ionlinetime_ = 0;
  ilogincount_ = 0;
  iforbidtalkingtime_ = 0;
  ilogintime_ = 0;
  ilogouttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BASEDBINFO::~BASEDBINFO() {
  SharedDtor();
}

void BASEDBINFO::SharedDtor() {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sznickname_;
  }
  if (this != default_instance_) {
  }
}

void BASEDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BASEDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BASEDBINFO_descriptor_;
}

const BASEDBINFO& BASEDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

BASEDBINFO* BASEDBINFO::default_instance_ = NULL;

BASEDBINFO* BASEDBINFO::New() const {
  return new BASEDBINFO;
}

void BASEDBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
        sznickname_->clear();
      }
    }
    ustatus_ = 0u;
    ilastlogin_ = 0;
    ilastlogout_ = 0;
    icreatetime_ = 0;
    ionlinetime_ = 0;
    ilogincount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    iforbidtalkingtime_ = 0;
    ilogintime_ = 0;
    ilogouttime_ = 0;
  }
  iresources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BASEDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string szNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sznickname().data(), this->sznickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iResources;
        break;
      }

      // repeated int32 iResources = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iResources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_iresources())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_iresources())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iResources;
        if (input->ExpectTag(72)) goto parse_uStatus;
        break;
      }

      // optional uint32 uStatus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ustatus_)));
          set_has_ustatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_iLastLogin;
        break;
      }

      // optional int32 iLastLogin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastlogin_)));
          set_has_ilastlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_iLastLogout;
        break;
      }

      // optional int32 iLastLogout = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastLogout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastlogout_)));
          set_has_ilastlogout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_iCreateTime;
        break;
      }

      // optional int32 iCreateTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icreatetime_)));
          set_has_icreatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_iOnlineTime;
        break;
      }

      // optional int32 iOnlineTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ionlinetime_)));
          set_has_ionlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_iLoginCount;
        break;
      }

      // optional int32 iLoginCount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLoginCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilogincount_)));
          set_has_ilogincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_iForbidTalkingTime;
        break;
      }

      // optional int32 iForbidTalkingTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iForbidTalkingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iforbidtalkingtime_)));
          set_has_iforbidtalkingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_iLoginTime;
        break;
      }

      // optional int32 iLoginTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilogintime_)));
          set_has_ilogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_iLogoutTime;
        break;
      }

      // optional int32 iLogoutTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLogoutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilogouttime_)));
          set_has_ilogouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BASEDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string szNickName = 1;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sznickname(), output);
  }

  // repeated int32 iResources = 3;
  for (int i = 0; i < this->iresources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->iresources(i), output);
  }

  // optional uint32 uStatus = 9;
  if (has_ustatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ustatus(), output);
  }

  // optional int32 iLastLogin = 11;
  if (has_ilastlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ilastlogin(), output);
  }

  // optional int32 iLastLogout = 12;
  if (has_ilastlogout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ilastlogout(), output);
  }

  // optional int32 iCreateTime = 13;
  if (has_icreatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->icreatetime(), output);
  }

  // optional int32 iOnlineTime = 14;
  if (has_ionlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ionlinetime(), output);
  }

  // optional int32 iLoginCount = 15;
  if (has_ilogincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ilogincount(), output);
  }

  // optional int32 iForbidTalkingTime = 16;
  if (has_iforbidtalkingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->iforbidtalkingtime(), output);
  }

  // optional int32 iLoginTime = 17;
  if (has_ilogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->ilogintime(), output);
  }

  // optional int32 iLogoutTime = 18;
  if (has_ilogouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ilogouttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BASEDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string szNickName = 1;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sznickname(), target);
  }

  // repeated int32 iResources = 3;
  for (int i = 0; i < this->iresources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->iresources(i), target);
  }

  // optional uint32 uStatus = 9;
  if (has_ustatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ustatus(), target);
  }

  // optional int32 iLastLogin = 11;
  if (has_ilastlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ilastlogin(), target);
  }

  // optional int32 iLastLogout = 12;
  if (has_ilastlogout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ilastlogout(), target);
  }

  // optional int32 iCreateTime = 13;
  if (has_icreatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->icreatetime(), target);
  }

  // optional int32 iOnlineTime = 14;
  if (has_ionlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ionlinetime(), target);
  }

  // optional int32 iLoginCount = 15;
  if (has_ilogincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ilogincount(), target);
  }

  // optional int32 iForbidTalkingTime = 16;
  if (has_iforbidtalkingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->iforbidtalkingtime(), target);
  }

  // optional int32 iLoginTime = 17;
  if (has_ilogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->ilogintime(), target);
  }

  // optional int32 iLogoutTime = 18;
  if (has_ilogouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ilogouttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BASEDBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string szNickName = 1;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

    // optional uint32 uStatus = 9;
    if (has_ustatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ustatus());
    }

    // optional int32 iLastLogin = 11;
    if (has_ilastlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastlogin());
    }

    // optional int32 iLastLogout = 12;
    if (has_ilastlogout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastlogout());
    }

    // optional int32 iCreateTime = 13;
    if (has_icreatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icreatetime());
    }

    // optional int32 iOnlineTime = 14;
    if (has_ionlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ionlinetime());
    }

    // optional int32 iLoginCount = 15;
    if (has_ilogincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilogincount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 iForbidTalkingTime = 16;
    if (has_iforbidtalkingtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iforbidtalkingtime());
    }

    // optional int32 iLoginTime = 17;
    if (has_ilogintime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilogintime());
    }

    // optional int32 iLogoutTime = 18;
    if (has_ilogouttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilogouttime());
    }

  }
  // repeated int32 iResources = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->iresources_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->iresources(i));
    }
    total_size += 1 * this->iresources_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BASEDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BASEDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BASEDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BASEDBINFO::MergeFrom(const BASEDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  iresources_.MergeFrom(from.iresources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
    if (from.has_ustatus()) {
      set_ustatus(from.ustatus());
    }
    if (from.has_ilastlogin()) {
      set_ilastlogin(from.ilastlogin());
    }
    if (from.has_ilastlogout()) {
      set_ilastlogout(from.ilastlogout());
    }
    if (from.has_icreatetime()) {
      set_icreatetime(from.icreatetime());
    }
    if (from.has_ionlinetime()) {
      set_ionlinetime(from.ionlinetime());
    }
    if (from.has_ilogincount()) {
      set_ilogincount(from.ilogincount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iforbidtalkingtime()) {
      set_iforbidtalkingtime(from.iforbidtalkingtime());
    }
    if (from.has_ilogintime()) {
      set_ilogintime(from.ilogintime());
    }
    if (from.has_ilogouttime()) {
      set_ilogouttime(from.ilogouttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BASEDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BASEDBINFO::CopyFrom(const BASEDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BASEDBINFO::IsInitialized() const {

  return true;
}

void BASEDBINFO::Swap(BASEDBINFO* other) {
  if (other != this) {
    std::swap(sznickname_, other->sznickname_);
    iresources_.Swap(&other->iresources_);
    std::swap(ustatus_, other->ustatus_);
    std::swap(ilastlogin_, other->ilastlogin_);
    std::swap(ilastlogout_, other->ilastlogout_);
    std::swap(icreatetime_, other->icreatetime_);
    std::swap(ionlinetime_, other->ionlinetime_);
    std::swap(ilogincount_, other->ilogincount_);
    std::swap(iforbidtalkingtime_, other->iforbidtalkingtime_);
    std::swap(ilogintime_, other->ilogintime_);
    std::swap(ilogouttime_, other->ilogouttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BASEDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BASEDBINFO_descriptor_;
  metadata.reflection = BASEDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QUESTDBINFO::QUESTDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QUESTDBINFO::InitAsDefaultInstance() {
}

QUESTDBINFO::QUESTDBINFO(const QUESTDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QUESTDBINFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QUESTDBINFO::~QUESTDBINFO() {
  SharedDtor();
}

void QUESTDBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QUESTDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QUESTDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QUESTDBINFO_descriptor_;
}

const QUESTDBINFO& QUESTDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

QUESTDBINFO* QUESTDBINFO::default_instance_ = NULL;

QUESTDBINFO* QUESTDBINFO::New() const {
  return new QUESTDBINFO;
}

void QUESTDBINFO::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QUESTDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QUESTDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QUESTDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QUESTDBINFO::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QUESTDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QUESTDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QUESTDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QUESTDBINFO::MergeFrom(const QUESTDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QUESTDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QUESTDBINFO::CopyFrom(const QUESTDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUESTDBINFO::IsInitialized() const {

  return true;
}

void QUESTDBINFO::Swap(QUESTDBINFO* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QUESTDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QUESTDBINFO_descriptor_;
  metadata.reflection = QUESTDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneSlotInfo::kIItemIDFieldNumber;
const int OneSlotInfo::kIItemNumFieldNumber;
#endif  // !_MSC_VER

OneSlotInfo::OneSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneSlotInfo::InitAsDefaultInstance() {
}

OneSlotInfo::OneSlotInfo(const OneSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  iitemid_ = 0;
  iitemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneSlotInfo::~OneSlotInfo() {
  SharedDtor();
}

void OneSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneSlotInfo_descriptor_;
}

const OneSlotInfo& OneSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

OneSlotInfo* OneSlotInfo::default_instance_ = NULL;

OneSlotInfo* OneSlotInfo::New() const {
  return new OneSlotInfo;
}

void OneSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iitemid_ = 0;
    iitemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemid_)));
          set_has_iitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iItemNum;
        break;
      }

      // optional int32 iItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemnum_)));
          set_has_iitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iItemID = 1;
  if (has_iitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iitemid(), output);
  }

  // optional int32 iItemNum = 2;
  if (has_iitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iitemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iItemID = 1;
  if (has_iitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iitemid(), target);
  }

  // optional int32 iItemNum = 2;
  if (has_iitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iitemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iItemID = 1;
    if (has_iitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemid());
    }

    // optional int32 iItemNum = 2;
    if (has_iitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneSlotInfo::MergeFrom(const OneSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iitemid()) {
      set_iitemid(from.iitemid());
    }
    if (from.has_iitemnum()) {
      set_iitemnum(from.iitemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneSlotInfo::CopyFrom(const OneSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneSlotInfo::IsInitialized() const {

  return true;
}

void OneSlotInfo::Swap(OneSlotInfo* other) {
  if (other != this) {
    std::swap(iitemid_, other->iitemid_);
    std::swap(iitemnum_, other->iitemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneSlotInfo_descriptor_;
  metadata.reflection = OneSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSlotInfo::kStSlotsFieldNumber;
#endif  // !_MSC_VER

ItemSlotInfo::ItemSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSlotInfo::InitAsDefaultInstance() {
}

ItemSlotInfo::ItemSlotInfo(const ItemSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSlotInfo::~ItemSlotInfo() {
  SharedDtor();
}

void ItemSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSlotInfo_descriptor_;
}

const ItemSlotInfo& ItemSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

ItemSlotInfo* ItemSlotInfo::default_instance_ = NULL;

ItemSlotInfo* ItemSlotInfo::New() const {
  return new ItemSlotInfo;
}

void ItemSlotInfo::Clear() {
  stslots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneSlotInfo stSlots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stSlots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stslots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stSlots;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneSlotInfo stSlots = 1;
  for (int i = 0; i < this->stslots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stslots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneSlotInfo stSlots = 1;
  for (int i = 0; i < this->stslots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stslots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSlotInfo::ByteSize() const {
  int total_size = 0;

  // repeated .OneSlotInfo stSlots = 1;
  total_size += 1 * this->stslots_size();
  for (int i = 0; i < this->stslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stslots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSlotInfo::MergeFrom(const ItemSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stslots_.MergeFrom(from.stslots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSlotInfo::CopyFrom(const ItemSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSlotInfo::IsInitialized() const {

  return true;
}

void ItemSlotInfo::Swap(ItemSlotInfo* other) {
  if (other != this) {
    stslots_.Swap(&other->stslots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSlotInfo_descriptor_;
  metadata.reflection = ItemSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ITEMDBINFO::kMIOpenedSlotNumFieldNumber;
const int ITEMDBINFO::kStItemSlotFieldNumber;
#endif  // !_MSC_VER

ITEMDBINFO::ITEMDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ITEMDBINFO::InitAsDefaultInstance() {
  stitemslot_ = const_cast< ::ItemSlotInfo*>(&::ItemSlotInfo::default_instance());
}

ITEMDBINFO::ITEMDBINFO(const ITEMDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ITEMDBINFO::SharedCtor() {
  _cached_size_ = 0;
  m_iopenedslotnum_ = 0;
  stitemslot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ITEMDBINFO::~ITEMDBINFO() {
  SharedDtor();
}

void ITEMDBINFO::SharedDtor() {
  if (this != default_instance_) {
    delete stitemslot_;
  }
}

void ITEMDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ITEMDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ITEMDBINFO_descriptor_;
}

const ITEMDBINFO& ITEMDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

ITEMDBINFO* ITEMDBINFO::default_instance_ = NULL;

ITEMDBINFO* ITEMDBINFO::New() const {
  return new ITEMDBINFO;
}

void ITEMDBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_iopenedslotnum_ = 0;
    if (has_stitemslot()) {
      if (stitemslot_ != NULL) stitemslot_->::ItemSlotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ITEMDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_iOpenedSlotNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iopenedslotnum_)));
          set_has_m_iopenedslotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stItemSlot;
        break;
      }

      // optional .ItemSlotInfo stItemSlot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItemSlot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stitemslot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ITEMDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_iOpenedSlotNum = 1;
  if (has_m_iopenedslotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_iopenedslotnum(), output);
  }

  // optional .ItemSlotInfo stItemSlot = 2;
  if (has_stitemslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stitemslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ITEMDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_iOpenedSlotNum = 1;
  if (has_m_iopenedslotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_iopenedslotnum(), target);
  }

  // optional .ItemSlotInfo stItemSlot = 2;
  if (has_stitemslot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stitemslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ITEMDBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_iOpenedSlotNum = 1;
    if (has_m_iopenedslotnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iopenedslotnum());
    }

    // optional .ItemSlotInfo stItemSlot = 2;
    if (has_stitemslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stitemslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ITEMDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ITEMDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ITEMDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ITEMDBINFO::MergeFrom(const ITEMDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_iopenedslotnum()) {
      set_m_iopenedslotnum(from.m_iopenedslotnum());
    }
    if (from.has_stitemslot()) {
      mutable_stitemslot()->::ItemSlotInfo::MergeFrom(from.stitemslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ITEMDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ITEMDBINFO::CopyFrom(const ITEMDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ITEMDBINFO::IsInitialized() const {

  return true;
}

void ITEMDBINFO::Swap(ITEMDBINFO* other) {
  if (other != this) {
    std::swap(m_iopenedslotnum_, other->m_iopenedslotnum_);
    std::swap(stitemslot_, other->stitemslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ITEMDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ITEMDBINFO_descriptor_;
  metadata.reflection = ITEMDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitItemInfo::kStItemsFieldNumber;
#endif  // !_MSC_VER

UnitItemInfo::UnitItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitItemInfo::InitAsDefaultInstance() {
}

UnitItemInfo::UnitItemInfo(const UnitItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitItemInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitItemInfo::~UnitItemInfo() {
  SharedDtor();
}

void UnitItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitItemInfo_descriptor_;
}

const UnitItemInfo& UnitItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

UnitItemInfo* UnitItemInfo::default_instance_ = NULL;

UnitItemInfo* UnitItemInfo::New() const {
  return new UnitItemInfo;
}

void UnitItemInfo::Clear() {
  stitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneSlotInfo stItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneSlotInfo stItems = 1;
  for (int i = 0; i < this->stitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneSlotInfo stItems = 1;
  for (int i = 0; i < this->stitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitItemInfo::ByteSize() const {
  int total_size = 0;

  // repeated .OneSlotInfo stItems = 1;
  total_size += 1 * this->stitems_size();
  for (int i = 0; i < this->stitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitItemInfo::MergeFrom(const UnitItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stitems_.MergeFrom(from.stitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitItemInfo::CopyFrom(const UnitItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitItemInfo::IsInitialized() const {

  return true;
}

void UnitItemInfo::Swap(UnitItemInfo* other) {
  if (other != this) {
    stitems_.Swap(&other->stitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitItemInfo_descriptor_;
  metadata.reflection = UnitItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneFightUnitInfo::kIUnitIDFieldNumber;
const int OneFightUnitInfo::kIUnitAIIDFieldNumber;
const int OneFightUnitInfo::kIAttributesFieldNumber;
const int OneFightUnitInfo::kINormalSkillIDFieldNumber;
const int OneFightUnitInfo::kILevelFieldNumber;
const int OneFightUnitInfo::kILevelExpFieldNumber;
const int OneFightUnitInfo::kStItemInfoFieldNumber;
#endif  // !_MSC_VER

OneFightUnitInfo::OneFightUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneFightUnitInfo::InitAsDefaultInstance() {
  stiteminfo_ = const_cast< ::UnitItemInfo*>(&::UnitItemInfo::default_instance());
}

OneFightUnitInfo::OneFightUnitInfo(const OneFightUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneFightUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  iunitid_ = 0;
  iunitaiid_ = 0;
  inormalskillid_ = 0;
  ilevel_ = 0;
  ilevelexp_ = 0;
  stiteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneFightUnitInfo::~OneFightUnitInfo() {
  SharedDtor();
}

void OneFightUnitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete stiteminfo_;
  }
}

void OneFightUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneFightUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneFightUnitInfo_descriptor_;
}

const OneFightUnitInfo& OneFightUnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

OneFightUnitInfo* OneFightUnitInfo::default_instance_ = NULL;

OneFightUnitInfo* OneFightUnitInfo::New() const {
  return new OneFightUnitInfo;
}

void OneFightUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iunitid_ = 0;
    iunitaiid_ = 0;
    inormalskillid_ = 0;
    ilevel_ = 0;
    ilevelexp_ = 0;
    if (has_stiteminfo()) {
      if (stiteminfo_ != NULL) stiteminfo_->::UnitItemInfo::Clear();
    }
  }
  iattributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneFightUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitid_)));
          set_has_iunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iUnitAIID;
        break;
      }

      // optional int32 iUnitAIID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iUnitAIID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitaiid_)));
          set_has_iunitaiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAttributes;
        break;
      }

      // repeated int32 iAttributes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAttributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_iattributes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_iattributes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAttributes;
        if (input->ExpectTag(32)) goto parse_iNormalSkillID;
        break;
      }

      // optional int32 iNormalSkillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNormalSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inormalskillid_)));
          set_has_inormalskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iLevel;
        break;
      }

      // optional int32 iLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilevel_)));
          set_has_ilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iLevelExp;
        break;
      }

      // optional int32 iLevelExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLevelExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilevelexp_)));
          set_has_ilevelexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stItemInfo;
        break;
      }

      // optional .UnitItemInfo stItemInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stiteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneFightUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iunitid(), output);
  }

  // optional int32 iUnitAIID = 2;
  if (has_iunitaiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iunitaiid(), output);
  }

  // repeated int32 iAttributes = 3;
  for (int i = 0; i < this->iattributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->iattributes(i), output);
  }

  // optional int32 iNormalSkillID = 4;
  if (has_inormalskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inormalskillid(), output);
  }

  // optional int32 iLevel = 5;
  if (has_ilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ilevel(), output);
  }

  // optional int32 iLevelExp = 6;
  if (has_ilevelexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ilevelexp(), output);
  }

  // optional .UnitItemInfo stItemInfo = 7;
  if (has_stiteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stiteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneFightUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iunitid(), target);
  }

  // optional int32 iUnitAIID = 2;
  if (has_iunitaiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iunitaiid(), target);
  }

  // repeated int32 iAttributes = 3;
  for (int i = 0; i < this->iattributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->iattributes(i), target);
  }

  // optional int32 iNormalSkillID = 4;
  if (has_inormalskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inormalskillid(), target);
  }

  // optional int32 iLevel = 5;
  if (has_ilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ilevel(), target);
  }

  // optional int32 iLevelExp = 6;
  if (has_ilevelexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ilevelexp(), target);
  }

  // optional .UnitItemInfo stItemInfo = 7;
  if (has_stiteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stiteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneFightUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iUnitID = 1;
    if (has_iunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitid());
    }

    // optional int32 iUnitAIID = 2;
    if (has_iunitaiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitaiid());
    }

    // optional int32 iNormalSkillID = 4;
    if (has_inormalskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inormalskillid());
    }

    // optional int32 iLevel = 5;
    if (has_ilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilevel());
    }

    // optional int32 iLevelExp = 6;
    if (has_ilevelexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilevelexp());
    }

    // optional .UnitItemInfo stItemInfo = 7;
    if (has_stiteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stiteminfo());
    }

  }
  // repeated int32 iAttributes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->iattributes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->iattributes(i));
    }
    total_size += 1 * this->iattributes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneFightUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneFightUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneFightUnitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneFightUnitInfo::MergeFrom(const OneFightUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  iattributes_.MergeFrom(from.iattributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iunitid()) {
      set_iunitid(from.iunitid());
    }
    if (from.has_iunitaiid()) {
      set_iunitaiid(from.iunitaiid());
    }
    if (from.has_inormalskillid()) {
      set_inormalskillid(from.inormalskillid());
    }
    if (from.has_ilevel()) {
      set_ilevel(from.ilevel());
    }
    if (from.has_ilevelexp()) {
      set_ilevelexp(from.ilevelexp());
    }
    if (from.has_stiteminfo()) {
      mutable_stiteminfo()->::UnitItemInfo::MergeFrom(from.stiteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneFightUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneFightUnitInfo::CopyFrom(const OneFightUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneFightUnitInfo::IsInitialized() const {

  return true;
}

void OneFightUnitInfo::Swap(OneFightUnitInfo* other) {
  if (other != this) {
    std::swap(iunitid_, other->iunitid_);
    std::swap(iunitaiid_, other->iunitaiid_);
    iattributes_.Swap(&other->iattributes_);
    std::swap(inormalskillid_, other->inormalskillid_);
    std::swap(ilevel_, other->ilevel_);
    std::swap(ilevelexp_, other->ilevelexp_);
    std::swap(stiteminfo_, other->stiteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneFightUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneFightUnitInfo_descriptor_;
  metadata.reflection = OneFightUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightUnitRepInfo::kStUnitsFieldNumber;
#endif  // !_MSC_VER

FightUnitRepInfo::FightUnitRepInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightUnitRepInfo::InitAsDefaultInstance() {
}

FightUnitRepInfo::FightUnitRepInfo(const FightUnitRepInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightUnitRepInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightUnitRepInfo::~FightUnitRepInfo() {
  SharedDtor();
}

void FightUnitRepInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightUnitRepInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightUnitRepInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightUnitRepInfo_descriptor_;
}

const FightUnitRepInfo& FightUnitRepInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

FightUnitRepInfo* FightUnitRepInfo::default_instance_ = NULL;

FightUnitRepInfo* FightUnitRepInfo::New() const {
  return new FightUnitRepInfo;
}

void FightUnitRepInfo::Clear() {
  stunits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightUnitRepInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneFightUnitInfo stUnits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUnits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stunits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stUnits;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightUnitRepInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneFightUnitInfo stUnits = 1;
  for (int i = 0; i < this->stunits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stunits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightUnitRepInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneFightUnitInfo stUnits = 1;
  for (int i = 0; i < this->stunits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stunits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightUnitRepInfo::ByteSize() const {
  int total_size = 0;

  // repeated .OneFightUnitInfo stUnits = 1;
  total_size += 1 * this->stunits_size();
  for (int i = 0; i < this->stunits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stunits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightUnitRepInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightUnitRepInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightUnitRepInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightUnitRepInfo::MergeFrom(const FightUnitRepInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stunits_.MergeFrom(from.stunits_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightUnitRepInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightUnitRepInfo::CopyFrom(const FightUnitRepInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightUnitRepInfo::IsInitialized() const {

  return true;
}

void FightUnitRepInfo::Swap(FightUnitRepInfo* other) {
  if (other != this) {
    stunits_.Swap(&other->stunits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightUnitRepInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightUnitRepInfo_descriptor_;
  metadata.reflection = FightUnitRepInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightForm::kIFightUnitIDsFieldNumber;
#endif  // !_MSC_VER

FightForm::FightForm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightForm::InitAsDefaultInstance() {
}

FightForm::FightForm(const FightForm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightForm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightForm::~FightForm() {
  SharedDtor();
}

void FightForm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightForm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightForm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightForm_descriptor_;
}

const FightForm& FightForm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

FightForm* FightForm::default_instance_ = NULL;

FightForm* FightForm::New() const {
  return new FightForm;
}

void FightForm::Clear() {
  ifightunitids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightForm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 iFightUnitIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFightUnitIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ifightunitids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ifightunitids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_iFightUnitIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightForm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 iFightUnitIDs = 1;
  for (int i = 0; i < this->ifightunitids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ifightunitids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightForm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 iFightUnitIDs = 1;
  for (int i = 0; i < this->ifightunitids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ifightunitids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightForm::ByteSize() const {
  int total_size = 0;

  // repeated int32 iFightUnitIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ifightunitids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ifightunitids(i));
    }
    total_size += 1 * this->ifightunitids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightForm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightForm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightForm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightForm::MergeFrom(const FightForm& from) {
  GOOGLE_CHECK_NE(&from, this);
  ifightunitids_.MergeFrom(from.ifightunitids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightForm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightForm::CopyFrom(const FightForm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightForm::IsInitialized() const {

  return true;
}

void FightForm::Swap(FightForm* other) {
  if (other != this) {
    ifightunitids_.Swap(&other->ifightunitids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightForm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightForm_descriptor_;
  metadata.reflection = FightForm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FIGHTDBINFO::kStUnitRepFieldNumber;
const int FIGHTDBINFO::kStFormsFieldNumber;
#endif  // !_MSC_VER

FIGHTDBINFO::FIGHTDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FIGHTDBINFO::InitAsDefaultInstance() {
  stunitrep_ = const_cast< ::FightUnitRepInfo*>(&::FightUnitRepInfo::default_instance());
  stforms_ = const_cast< ::FightForm*>(&::FightForm::default_instance());
}

FIGHTDBINFO::FIGHTDBINFO(const FIGHTDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FIGHTDBINFO::SharedCtor() {
  _cached_size_ = 0;
  stunitrep_ = NULL;
  stforms_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FIGHTDBINFO::~FIGHTDBINFO() {
  SharedDtor();
}

void FIGHTDBINFO::SharedDtor() {
  if (this != default_instance_) {
    delete stunitrep_;
    delete stforms_;
  }
}

void FIGHTDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FIGHTDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FIGHTDBINFO_descriptor_;
}

const FIGHTDBINFO& FIGHTDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

FIGHTDBINFO* FIGHTDBINFO::default_instance_ = NULL;

FIGHTDBINFO* FIGHTDBINFO::New() const {
  return new FIGHTDBINFO;
}

void FIGHTDBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stunitrep()) {
      if (stunitrep_ != NULL) stunitrep_->::FightUnitRepInfo::Clear();
    }
    if (has_stforms()) {
      if (stforms_ != NULL) stforms_->::FightForm::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FIGHTDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FightUnitRepInfo stUnitRep = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stunitrep()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stForms;
        break;
      }

      // optional .FightForm stForms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stForms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stforms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FIGHTDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FightUnitRepInfo stUnitRep = 1;
  if (has_stunitrep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stunitrep(), output);
  }

  // optional .FightForm stForms = 2;
  if (has_stforms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stforms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FIGHTDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FightUnitRepInfo stUnitRep = 1;
  if (has_stunitrep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stunitrep(), target);
  }

  // optional .FightForm stForms = 2;
  if (has_stforms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stforms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FIGHTDBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FightUnitRepInfo stUnitRep = 1;
    if (has_stunitrep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stunitrep());
    }

    // optional .FightForm stForms = 2;
    if (has_stforms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stforms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FIGHTDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FIGHTDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FIGHTDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FIGHTDBINFO::MergeFrom(const FIGHTDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stunitrep()) {
      mutable_stunitrep()->::FightUnitRepInfo::MergeFrom(from.stunitrep());
    }
    if (from.has_stforms()) {
      mutable_stforms()->::FightForm::MergeFrom(from.stforms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FIGHTDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FIGHTDBINFO::CopyFrom(const FIGHTDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FIGHTDBINFO::IsInitialized() const {

  return true;
}

void FIGHTDBINFO::Swap(FIGHTDBINFO* other) {
  if (other != this) {
    std::swap(stunitrep_, other->stunitrep_);
    std::swap(stforms_, other->stforms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FIGHTDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FIGHTDBINFO_descriptor_;
  metadata.reflection = FIGHTDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FRIENDDBINFO::FRIENDDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FRIENDDBINFO::InitAsDefaultInstance() {
}

FRIENDDBINFO::FRIENDDBINFO(const FRIENDDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FRIENDDBINFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FRIENDDBINFO::~FRIENDDBINFO() {
  SharedDtor();
}

void FRIENDDBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FRIENDDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FRIENDDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FRIENDDBINFO_descriptor_;
}

const FRIENDDBINFO& FRIENDDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

FRIENDDBINFO* FRIENDDBINFO::default_instance_ = NULL;

FRIENDDBINFO* FRIENDDBINFO::New() const {
  return new FRIENDDBINFO;
}

void FRIENDDBINFO::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FRIENDDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FRIENDDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FRIENDDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FRIENDDBINFO::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FRIENDDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FRIENDDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FRIENDDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FRIENDDBINFO::MergeFrom(const FRIENDDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FRIENDDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FRIENDDBINFO::CopyFrom(const FRIENDDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FRIENDDBINFO::IsInitialized() const {

  return true;
}

void FRIENDDBINFO::Swap(FRIENDDBINFO* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FRIENDDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FRIENDDBINFO_descriptor_;
  metadata.reflection = FRIENDDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RESERVED1DBINFO::RESERVED1DBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RESERVED1DBINFO::InitAsDefaultInstance() {
}

RESERVED1DBINFO::RESERVED1DBINFO(const RESERVED1DBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RESERVED1DBINFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RESERVED1DBINFO::~RESERVED1DBINFO() {
  SharedDtor();
}

void RESERVED1DBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RESERVED1DBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RESERVED1DBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESERVED1DBINFO_descriptor_;
}

const RESERVED1DBINFO& RESERVED1DBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

RESERVED1DBINFO* RESERVED1DBINFO::default_instance_ = NULL;

RESERVED1DBINFO* RESERVED1DBINFO::New() const {
  return new RESERVED1DBINFO;
}

void RESERVED1DBINFO::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RESERVED1DBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RESERVED1DBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RESERVED1DBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RESERVED1DBINFO::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RESERVED1DBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RESERVED1DBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RESERVED1DBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RESERVED1DBINFO::MergeFrom(const RESERVED1DBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RESERVED1DBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RESERVED1DBINFO::CopyFrom(const RESERVED1DBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RESERVED1DBINFO::IsInitialized() const {

  return true;
}

void RESERVED1DBINFO::Swap(RESERVED1DBINFO* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RESERVED1DBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RESERVED1DBINFO_descriptor_;
  metadata.reflection = RESERVED1DBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RESERVED2DBINFO::RESERVED2DBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RESERVED2DBINFO::InitAsDefaultInstance() {
}

RESERVED2DBINFO::RESERVED2DBINFO(const RESERVED2DBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RESERVED2DBINFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RESERVED2DBINFO::~RESERVED2DBINFO() {
  SharedDtor();
}

void RESERVED2DBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RESERVED2DBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RESERVED2DBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESERVED2DBINFO_descriptor_;
}

const RESERVED2DBINFO& RESERVED2DBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  return *default_instance_;
}

RESERVED2DBINFO* RESERVED2DBINFO::default_instance_ = NULL;

RESERVED2DBINFO* RESERVED2DBINFO::New() const {
  return new RESERVED2DBINFO;
}

void RESERVED2DBINFO::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RESERVED2DBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RESERVED2DBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RESERVED2DBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RESERVED2DBINFO::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RESERVED2DBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RESERVED2DBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RESERVED2DBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RESERVED2DBINFO::MergeFrom(const RESERVED2DBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RESERVED2DBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RESERVED2DBINFO::CopyFrom(const RESERVED2DBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RESERVED2DBINFO::IsInitialized() const {

  return true;
}

void RESERVED2DBINFO::Swap(RESERVED2DBINFO* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RESERVED2DBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RESERVED2DBINFO_descriptor_;
  metadata.reflection = RESERVED2DBINFO_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
