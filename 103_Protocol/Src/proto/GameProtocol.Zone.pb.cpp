// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.Zone.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol.Zone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameLoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LoginServer_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LoginServer_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LoginServer_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LoginServer_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_Logout_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_Logout_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetFriendInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetFriendInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetFriendInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetFriendInfo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_OnlineRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_OnlineRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GameMaster_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GameMaster_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GameMaster_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GameMaster_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LoginServer_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LoginServer_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_RepOpera_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_RepOpera_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_RepOpera_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_RepOpera_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetRepInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetRepInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetRepInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetRepInfo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_WearEquip_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_WearEquip_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_WearEquip_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_WearEquip_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneRepSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneRepSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_RepChange_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_RepChange_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SellItem_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SellItem_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SellItem_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SellItem_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserResourceChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserResourceChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ResourceChange_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ResourceChange_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_Chat_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_Chat_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_Chat_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_Chat_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FightAttr_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FightAttr_Notify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqOperaType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_2eZone_2eproto() {
  protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol.Zone.proto");
  GOOGLE_CHECK(file != NULL);
  GameLoginInfo_descriptor_ = file->message_type(0);
  static const int GameLoginInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stbaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stquestinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stiteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stfightinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stfriendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, streserved1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, streserved2_),
  };
  GameLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameLoginInfo_descriptor_,
      GameLoginInfo::default_instance_,
      GameLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameLoginInfo));
  Zone_LoginServer_Request_descriptor_ = file->message_type(1);
  static const int Zone_LoginServer_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, uloginreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, uclientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, strsessionkey_),
  };
  Zone_LoginServer_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LoginServer_Request_descriptor_,
      Zone_LoginServer_Request::default_instance_,
      Zone_LoginServer_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LoginServer_Request));
  Zone_LoginServer_Response_descriptor_ = file->message_type(2);
  static const int Zone_LoginServer_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, stlogininfo_),
  };
  Zone_LoginServer_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LoginServer_Response_descriptor_,
      Zone_LoginServer_Response::default_instance_,
      Zone_LoginServer_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LoginServer_Response));
  Zone_Logout_Notify_descriptor_ = file->message_type(3);
  static const int Zone_Logout_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Logout_Notify, stroleid_),
  };
  Zone_Logout_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_Logout_Notify_descriptor_,
      Zone_Logout_Notify::default_instance_,
      Zone_Logout_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Logout_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Logout_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_Logout_Notify));
  Zone_GetFriendInfo_Request_descriptor_ = file->message_type(4);
  static const int Zone_GetFriendInfo_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, ucreqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, friend_uin_),
  };
  Zone_GetFriendInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetFriendInfo_Request_descriptor_,
      Zone_GetFriendInfo_Request::default_instance_,
      Zone_GetFriendInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetFriendInfo_Request));
  Zone_GetFriendInfo_Response_descriptor_ = file->message_type(5);
  static const int Zone_GetFriendInfo_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Response, iresult_),
  };
  Zone_GetFriendInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetFriendInfo_Response_descriptor_,
      Zone_GetFriendInfo_Response::default_instance_,
      Zone_GetFriendInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetFriendInfo_Response));
  Zone_OnlineRole_Request_descriptor_ = file->message_type(6);
  static const int Zone_OnlineRole_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, irolenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, strrecordtime_),
  };
  Zone_OnlineRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_OnlineRole_Request_descriptor_,
      Zone_OnlineRole_Request::default_instance_,
      Zone_OnlineRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_OnlineRole_Request));
  Zone_GameMaster_Request_descriptor_ = file->message_type(7);
  static const int Zone_GameMaster_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GameMaster_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GameMaster_Request, strcommand_),
  };
  Zone_GameMaster_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GameMaster_Request_descriptor_,
      Zone_GameMaster_Request::default_instance_,
      Zone_GameMaster_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GameMaster_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GameMaster_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GameMaster_Request));
  Zone_GameMaster_Response_descriptor_ = file->message_type(8);
  static const int Zone_GameMaster_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GameMaster_Response, iresult_),
  };
  Zone_GameMaster_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GameMaster_Response_descriptor_,
      Zone_GameMaster_Response::default_instance_,
      Zone_GameMaster_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GameMaster_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GameMaster_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GameMaster_Response));
  Zone_LoginServer_Notify_descriptor_ = file->message_type(9);
  static const int Zone_LoginServer_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Notify, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Notify, izoneid_),
  };
  Zone_LoginServer_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LoginServer_Notify_descriptor_,
      Zone_LoginServer_Notify::default_instance_,
      Zone_LoginServer_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LoginServer_Notify));
  Zone_RepOpera_Request_descriptor_ = file->message_type(10);
  static const int Zone_RepOpera_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, islotindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, iitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, iotherslotindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, ifightunitid_),
  };
  Zone_RepOpera_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_RepOpera_Request_descriptor_,
      Zone_RepOpera_Request::default_instance_,
      Zone_RepOpera_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_RepOpera_Request));
  Zone_RepOpera_Response_descriptor_ = file->message_type(11);
  static const int Zone_RepOpera_Response_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, islotindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, stslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, iotherslotindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, stotherslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, etype_),
  };
  Zone_RepOpera_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_RepOpera_Response_descriptor_,
      Zone_RepOpera_Response::default_instance_,
      Zone_RepOpera_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_RepOpera_Response));
  Zone_GetRepInfo_Request_descriptor_ = file->message_type(12);
  static const int Zone_GetRepInfo_Request_offsets_[1] = {
  };
  Zone_GetRepInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetRepInfo_Request_descriptor_,
      Zone_GetRepInfo_Request::default_instance_,
      Zone_GetRepInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRepInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRepInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetRepInfo_Request));
  Zone_GetRepInfo_Response_descriptor_ = file->message_type(13);
  static const int Zone_GetRepInfo_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRepInfo_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRepInfo_Response, stitems_),
  };
  Zone_GetRepInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetRepInfo_Response_descriptor_,
      Zone_GetRepInfo_Response::default_instance_,
      Zone_GetRepInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRepInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRepInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetRepInfo_Response));
  Zone_WearEquip_Request_descriptor_ = file->message_type(14);
  static const int Zone_WearEquip_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Request, biswear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Request, iunitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Request, islotindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Request, iequipsubtype_),
  };
  Zone_WearEquip_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_WearEquip_Request_descriptor_,
      Zone_WearEquip_Request::default_instance_,
      Zone_WearEquip_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_WearEquip_Request));
  Zone_WearEquip_Response_descriptor_ = file->message_type(15);
  static const int Zone_WearEquip_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Response, biswear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Response, iunitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Response, iequipsubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Response, stslotinfo_),
  };
  Zone_WearEquip_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_WearEquip_Response_descriptor_,
      Zone_WearEquip_Response::default_instance_,
      Zone_WearEquip_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_WearEquip_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_WearEquip_Response));
  OneRepSlot_descriptor_ = file->message_type(16);
  static const int OneRepSlot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRepSlot, irepslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRepSlot, ichangechannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRepSlot, stslotinfo_),
  };
  OneRepSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneRepSlot_descriptor_,
      OneRepSlot::default_instance_,
      OneRepSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRepSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRepSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneRepSlot));
  Zone_RepChange_Notify_descriptor_ = file->message_type(17);
  static const int Zone_RepChange_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepChange_Notify, stitems_),
  };
  Zone_RepChange_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_RepChange_Notify_descriptor_,
      Zone_RepChange_Notify::default_instance_,
      Zone_RepChange_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepChange_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepChange_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_RepChange_Notify));
  SellItemInfo_descriptor_ = file->message_type(18);
  static const int SellItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemInfo, iitemslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemInfo, isellnum_),
  };
  SellItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellItemInfo_descriptor_,
      SellItemInfo::default_instance_,
      SellItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellItemInfo));
  Zone_SellItem_Request_descriptor_ = file->message_type(19);
  static const int Zone_SellItem_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SellItem_Request, ishopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SellItem_Request, stitems_),
  };
  Zone_SellItem_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SellItem_Request_descriptor_,
      Zone_SellItem_Request::default_instance_,
      Zone_SellItem_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SellItem_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SellItem_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SellItem_Request));
  Zone_SellItem_Response_descriptor_ = file->message_type(20);
  static const int Zone_SellItem_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SellItem_Response, iresult_),
  };
  Zone_SellItem_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SellItem_Response_descriptor_,
      Zone_SellItem_Response::default_instance_,
      Zone_SellItem_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SellItem_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SellItem_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SellItem_Response));
  UserResourceChange_descriptor_ = file->message_type(21);
  static const int UserResourceChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceChange, irestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceChange, inewresnum_),
  };
  UserResourceChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserResourceChange_descriptor_,
      UserResourceChange::default_instance_,
      UserResourceChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserResourceChange));
  Zone_ResourceChange_Notify_descriptor_ = file->message_type(22);
  static const int Zone_ResourceChange_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ResourceChange_Notify, stchangeinfos_),
  };
  Zone_ResourceChange_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ResourceChange_Notify_descriptor_,
      Zone_ResourceChange_Notify::default_instance_,
      Zone_ResourceChange_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ResourceChange_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ResourceChange_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ResourceChange_Notify));
  Zone_Chat_Request_descriptor_ = file->message_type(23);
  static const int Zone_Chat_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, ichannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, sttargetroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, strmessage_),
  };
  Zone_Chat_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_Chat_Request_descriptor_,
      Zone_Chat_Request::default_instance_,
      Zone_Chat_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_Chat_Request));
  Zone_Chat_Response_descriptor_ = file->message_type(24);
  static const int Zone_Chat_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Response, iresult_),
  };
  Zone_Chat_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_Chat_Response_descriptor_,
      Zone_Chat_Response::default_instance_,
      Zone_Chat_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_Chat_Response));
  Zone_FightAttr_Notify_descriptor_ = file->message_type(25);
  static const int Zone_FightAttr_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FightAttr_Notify, iunitconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FightAttr_Notify, ifightunitattr_),
  };
  Zone_FightAttr_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FightAttr_Notify_descriptor_,
      Zone_FightAttr_Notify::default_instance_,
      Zone_FightAttr_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FightAttr_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FightAttr_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FightAttr_Notify));
  ReqOperaType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_2eZone_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameLoginInfo_descriptor_, &GameLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LoginServer_Request_descriptor_, &Zone_LoginServer_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LoginServer_Response_descriptor_, &Zone_LoginServer_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_Logout_Notify_descriptor_, &Zone_Logout_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetFriendInfo_Request_descriptor_, &Zone_GetFriendInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetFriendInfo_Response_descriptor_, &Zone_GetFriendInfo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_OnlineRole_Request_descriptor_, &Zone_OnlineRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GameMaster_Request_descriptor_, &Zone_GameMaster_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GameMaster_Response_descriptor_, &Zone_GameMaster_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LoginServer_Notify_descriptor_, &Zone_LoginServer_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_RepOpera_Request_descriptor_, &Zone_RepOpera_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_RepOpera_Response_descriptor_, &Zone_RepOpera_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetRepInfo_Request_descriptor_, &Zone_GetRepInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetRepInfo_Response_descriptor_, &Zone_GetRepInfo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_WearEquip_Request_descriptor_, &Zone_WearEquip_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_WearEquip_Response_descriptor_, &Zone_WearEquip_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneRepSlot_descriptor_, &OneRepSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_RepChange_Notify_descriptor_, &Zone_RepChange_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellItemInfo_descriptor_, &SellItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SellItem_Request_descriptor_, &Zone_SellItem_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SellItem_Response_descriptor_, &Zone_SellItem_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserResourceChange_descriptor_, &UserResourceChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ResourceChange_Notify_descriptor_, &Zone_ResourceChange_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_Chat_Request_descriptor_, &Zone_Chat_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_Chat_Response_descriptor_, &Zone_Chat_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FightAttr_Notify_descriptor_, &Zone_FightAttr_Notify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_2eZone_2eproto() {
  delete GameLoginInfo::default_instance_;
  delete GameLoginInfo_reflection_;
  delete Zone_LoginServer_Request::default_instance_;
  delete Zone_LoginServer_Request_reflection_;
  delete Zone_LoginServer_Response::default_instance_;
  delete Zone_LoginServer_Response_reflection_;
  delete Zone_Logout_Notify::default_instance_;
  delete Zone_Logout_Notify_reflection_;
  delete Zone_GetFriendInfo_Request::default_instance_;
  delete Zone_GetFriendInfo_Request_reflection_;
  delete Zone_GetFriendInfo_Response::default_instance_;
  delete Zone_GetFriendInfo_Response_reflection_;
  delete Zone_OnlineRole_Request::default_instance_;
  delete Zone_OnlineRole_Request_reflection_;
  delete Zone_GameMaster_Request::default_instance_;
  delete Zone_GameMaster_Request_reflection_;
  delete Zone_GameMaster_Response::default_instance_;
  delete Zone_GameMaster_Response_reflection_;
  delete Zone_LoginServer_Notify::default_instance_;
  delete Zone_LoginServer_Notify_reflection_;
  delete Zone_RepOpera_Request::default_instance_;
  delete Zone_RepOpera_Request_reflection_;
  delete Zone_RepOpera_Response::default_instance_;
  delete Zone_RepOpera_Response_reflection_;
  delete Zone_GetRepInfo_Request::default_instance_;
  delete Zone_GetRepInfo_Request_reflection_;
  delete Zone_GetRepInfo_Response::default_instance_;
  delete Zone_GetRepInfo_Response_reflection_;
  delete Zone_WearEquip_Request::default_instance_;
  delete Zone_WearEquip_Request_reflection_;
  delete Zone_WearEquip_Response::default_instance_;
  delete Zone_WearEquip_Response_reflection_;
  delete OneRepSlot::default_instance_;
  delete OneRepSlot_reflection_;
  delete Zone_RepChange_Notify::default_instance_;
  delete Zone_RepChange_Notify_reflection_;
  delete SellItemInfo::default_instance_;
  delete SellItemInfo_reflection_;
  delete Zone_SellItem_Request::default_instance_;
  delete Zone_SellItem_Request_reflection_;
  delete Zone_SellItem_Response::default_instance_;
  delete Zone_SellItem_Response_reflection_;
  delete UserResourceChange::default_instance_;
  delete UserResourceChange_reflection_;
  delete Zone_ResourceChange_Notify::default_instance_;
  delete Zone_ResourceChange_Notify_reflection_;
  delete Zone_Chat_Request::default_instance_;
  delete Zone_Chat_Request_reflection_;
  delete Zone_Chat_Response::default_instance_;
  delete Zone_Chat_Response_reflection_;
  delete Zone_FightAttr_Notify::default_instance_;
  delete Zone_FightAttr_Notify_reflection_;
}

void protobuf_AddDesc_GameProtocol_2eZone_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  ::protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  ::protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027GameProtocol.Zone.proto\032\031GameProtocol."
    "Common.proto\032\031GameProtocol.USERDB.proto\032"
    "\030GameProtocol.Fight.proto\"\212\002\n\rGameLoginI"
    "nfo\022\037\n\nstBaseInfo\030\001 \001(\0132\013.BASEDBINFO\022!\n\013"
    "stQuestInfo\030\002 \001(\0132\014.QUESTDBINFO\022\037\n\nstIte"
    "mInfo\030\003 \001(\0132\013.ITEMDBINFO\022!\n\013stFightInfo\030"
    "\005 \001(\0132\014.FIGHTDBINFO\022#\n\014stFriendInfo\030\006 \001("
    "\0132\r.FRIENDDBINFO\022%\n\013stReserved1\030\007 \001(\0132\020."
    "RESERVED1DBINFO\022%\n\013stReserved2\030\010 \001(\0132\020.R"
    "ESERVED2DBINFO\"z\n\030Zone_LoginServer_Reque"
    "st\022\031\n\010stRoleID\030\001 \001(\0132\007.RoleID\022\024\n\014uLoginR"
    "eason\030\003 \001(\r\022\026\n\016uClientVersion\030\004 \001(\r\022\025\n\rs"
    "trSessionKey\030\005 \001(\t\"\201\001\n\031Zone_LoginServer_"
    "Response\022\017\n\007iResult\030\001 \001(\005\022\013\n\003uin\030\002 \001(\r\022\017"
    "\n\007iZoneID\030\003 \001(\005\022\020\n\010iWorldID\030\004 \001(\005\022#\n\013stL"
    "oginInfo\030\005 \001(\0132\016.GameLoginInfo\"/\n\022Zone_L"
    "ogout_Notify\022\031\n\010stRoleID\030\001 \001(\0132\007.RoleID\""
    "P\n\032Zone_GetFriendInfo_Request\022\021\n\tucReqTy"
    "pe\030\001 \001(\r\022\013\n\003uin\030\002 \001(\r\022\022\n\nfriend_uin\030\003 \001("
    "\r\".\n\033Zone_GetFriendInfo_Response\022\017\n\007iRes"
    "ult\030\001 \001(\005\"e\n\027Zone_OnlineRole_Request\022\020\n\010"
    "iWorldID\030\001 \001(\005\022\017\n\007iZoneID\030\002 \001(\005\022\020\n\010iRole"
    "Num\030\003 \001(\005\022\025\n\rstrRecordTime\030\004 \001(\t\":\n\027Zone"
    "_GameMaster_Request\022\013\n\003uin\030\001 \001(\r\022\022\n\nstrC"
    "ommand\030\002 \001(\t\"+\n\030Zone_GameMaster_Response"
    "\022\017\n\007iResult\030\001 \001(\005\"E\n\027Zone_LoginServer_No"
    "tify\022\031\n\010stRoleID\030\001 \001(\0132\007.RoleID\022\017\n\007iZone"
    "ID\030\004 \001(\005\"\242\001\n\025Zone_RepOpera_Request\0224\n\005eT"
    "ype\030\001 \001(\0162\r.ReqOperaType:\026REQ_OPERA_TYPE"
    "_INVALID\022\022\n\niSlotIndex\030\002 \001(\005\022\020\n\010iItemNum"
    "\030\003 \001(\005\022\027\n\017iOtherSlotIndex\030\004 \001(\005\022\024\n\014iFigh"
    "tUnitID\030\005 \001(\005\"\315\001\n\026Zone_RepOpera_Response"
    "\022\017\n\007iResult\030\001 \001(\005\022\022\n\niSlotIndex\030\002 \001(\005\022\034\n"
    "\006stSlot\030\003 \001(\0132\014.OneSlotInfo\022\027\n\017iOtherSlo"
    "tIndex\030\004 \001(\005\022!\n\013stOtherSlot\030\005 \001(\0132\014.OneS"
    "lotInfo\0224\n\005eType\030\006 \001(\0162\r.ReqOperaType:\026R"
    "EQ_OPERA_TYPE_INVALID\"\031\n\027Zone_GetRepInfo"
    "_Request\"I\n\030Zone_GetRepInfo_Response\022\017\n\007"
    "iResult\030\001 \001(\005\022\034\n\007stItems\030\002 \001(\0132\013.ITEMDBI"
    "NFO\"h\n\026Zone_WearEquip_Request\022\017\n\007bIsWear"
    "\030\001 \001(\010\022\022\n\niUnitIndex\030\002 \001(\005\022\022\n\niSlotIndex"
    "\030\003 \001(\005\022\025\n\riEquipSubType\030\004 \001(\005\"\210\001\n\027Zone_W"
    "earEquip_Response\022\017\n\007iResult\030\001 \001(\005\022\017\n\007bI"
    "sWear\030\002 \001(\010\022\022\n\niUnitIndex\030\003 \001(\005\022\025\n\riEqui"
    "pSubType\030\004 \001(\005\022 \n\nstSlotInfo\030\005 \001(\0132\014.One"
    "SlotInfo\"X\n\nOneRepSlot\022\020\n\010iRepSlot\030\001 \001(\005"
    "\022\026\n\016iChangeChannel\030\003 \001(\005\022 \n\nstSlotInfo\030\002"
    " \001(\0132\014.OneSlotInfo\"5\n\025Zone_RepChange_Not"
    "ify\022\034\n\007stItems\030\001 \003(\0132\013.OneRepSlot\"3\n\014Sel"
    "lItemInfo\022\021\n\tiItemSlot\030\001 \001(\005\022\020\n\010iSellNum"
    "\030\002 \001(\005\"H\n\025Zone_SellItem_Request\022\017\n\007iShop"
    "ID\030\001 \001(\005\022\036\n\007stItems\030\002 \003(\0132\r.SellItemInfo"
    "\")\n\026Zone_SellItem_Response\022\017\n\007iResult\030\001 "
    "\001(\005\":\n\022UserResourceChange\022\020\n\010iResType\030\001 "
    "\001(\005\022\022\n\niNewResNum\030\002 \001(\005\"H\n\032Zone_Resource"
    "Change_Notify\022*\n\rstChangeInfos\030\001 \003(\0132\023.U"
    "serResourceChange\"\202\001\n\021Zone_Chat_Request\022"
    "8\n\010iChannel\030\001 \001(\0162\020.ChatChannelType:\024CHA"
    "T_CHANNEL_INVALID\022\037\n\016stTargetRoleID\030\002 \001("
    "\0132\007.RoleID\022\022\n\nstrMessage\030\003 \001(\t\"%\n\022Zone_C"
    "hat_Response\022\017\n\007iResult\030\001 \001(\005\"F\n\025Zone_Fi"
    "ghtAttr_Notify\022\025\n\riUnitConfigID\030\001 \001(\005\022\026\n"
    "\016iFightUnitAttr\030\002 \003(\005*\255\001\n\014ReqOperaType\022\032"
    "\n\026REQ_OPERA_TYPE_INVALID\020\000\022\030\n\024REQ_OPERA_"
    "TYPE_SPLIT\020\001\022\033\n\027REQ_OPERA_TYPE_EXCHANGE\020"
    "\002\022\026\n\022REQ_OPERA_TYPE_USE\020\003\022\031\n\025REQ_OPERA_T"
    "YPE_DELETE\020\004\022\027\n\023REQ_OPERA_TYPE_SORT\020\005", 2677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol.Zone.proto", &protobuf_RegisterTypes);
  GameLoginInfo::default_instance_ = new GameLoginInfo();
  Zone_LoginServer_Request::default_instance_ = new Zone_LoginServer_Request();
  Zone_LoginServer_Response::default_instance_ = new Zone_LoginServer_Response();
  Zone_Logout_Notify::default_instance_ = new Zone_Logout_Notify();
  Zone_GetFriendInfo_Request::default_instance_ = new Zone_GetFriendInfo_Request();
  Zone_GetFriendInfo_Response::default_instance_ = new Zone_GetFriendInfo_Response();
  Zone_OnlineRole_Request::default_instance_ = new Zone_OnlineRole_Request();
  Zone_GameMaster_Request::default_instance_ = new Zone_GameMaster_Request();
  Zone_GameMaster_Response::default_instance_ = new Zone_GameMaster_Response();
  Zone_LoginServer_Notify::default_instance_ = new Zone_LoginServer_Notify();
  Zone_RepOpera_Request::default_instance_ = new Zone_RepOpera_Request();
  Zone_RepOpera_Response::default_instance_ = new Zone_RepOpera_Response();
  Zone_GetRepInfo_Request::default_instance_ = new Zone_GetRepInfo_Request();
  Zone_GetRepInfo_Response::default_instance_ = new Zone_GetRepInfo_Response();
  Zone_WearEquip_Request::default_instance_ = new Zone_WearEquip_Request();
  Zone_WearEquip_Response::default_instance_ = new Zone_WearEquip_Response();
  OneRepSlot::default_instance_ = new OneRepSlot();
  Zone_RepChange_Notify::default_instance_ = new Zone_RepChange_Notify();
  SellItemInfo::default_instance_ = new SellItemInfo();
  Zone_SellItem_Request::default_instance_ = new Zone_SellItem_Request();
  Zone_SellItem_Response::default_instance_ = new Zone_SellItem_Response();
  UserResourceChange::default_instance_ = new UserResourceChange();
  Zone_ResourceChange_Notify::default_instance_ = new Zone_ResourceChange_Notify();
  Zone_Chat_Request::default_instance_ = new Zone_Chat_Request();
  Zone_Chat_Response::default_instance_ = new Zone_Chat_Response();
  Zone_FightAttr_Notify::default_instance_ = new Zone_FightAttr_Notify();
  GameLoginInfo::default_instance_->InitAsDefaultInstance();
  Zone_LoginServer_Request::default_instance_->InitAsDefaultInstance();
  Zone_LoginServer_Response::default_instance_->InitAsDefaultInstance();
  Zone_Logout_Notify::default_instance_->InitAsDefaultInstance();
  Zone_GetFriendInfo_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetFriendInfo_Response::default_instance_->InitAsDefaultInstance();
  Zone_OnlineRole_Request::default_instance_->InitAsDefaultInstance();
  Zone_GameMaster_Request::default_instance_->InitAsDefaultInstance();
  Zone_GameMaster_Response::default_instance_->InitAsDefaultInstance();
  Zone_LoginServer_Notify::default_instance_->InitAsDefaultInstance();
  Zone_RepOpera_Request::default_instance_->InitAsDefaultInstance();
  Zone_RepOpera_Response::default_instance_->InitAsDefaultInstance();
  Zone_GetRepInfo_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetRepInfo_Response::default_instance_->InitAsDefaultInstance();
  Zone_WearEquip_Request::default_instance_->InitAsDefaultInstance();
  Zone_WearEquip_Response::default_instance_->InitAsDefaultInstance();
  OneRepSlot::default_instance_->InitAsDefaultInstance();
  Zone_RepChange_Notify::default_instance_->InitAsDefaultInstance();
  SellItemInfo::default_instance_->InitAsDefaultInstance();
  Zone_SellItem_Request::default_instance_->InitAsDefaultInstance();
  Zone_SellItem_Response::default_instance_->InitAsDefaultInstance();
  UserResourceChange::default_instance_->InitAsDefaultInstance();
  Zone_ResourceChange_Notify::default_instance_->InitAsDefaultInstance();
  Zone_Chat_Request::default_instance_->InitAsDefaultInstance();
  Zone_Chat_Response::default_instance_->InitAsDefaultInstance();
  Zone_FightAttr_Notify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_2eZone_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_2eZone_2eproto {
  StaticDescriptorInitializer_GameProtocol_2eZone_2eproto() {
    protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  }
} static_descriptor_initializer_GameProtocol_2eZone_2eproto_;
const ::google::protobuf::EnumDescriptor* ReqOperaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOperaType_descriptor_;
}
bool ReqOperaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameLoginInfo::kStBaseInfoFieldNumber;
const int GameLoginInfo::kStQuestInfoFieldNumber;
const int GameLoginInfo::kStItemInfoFieldNumber;
const int GameLoginInfo::kStFightInfoFieldNumber;
const int GameLoginInfo::kStFriendInfoFieldNumber;
const int GameLoginInfo::kStReserved1FieldNumber;
const int GameLoginInfo::kStReserved2FieldNumber;
#endif  // !_MSC_VER

GameLoginInfo::GameLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameLoginInfo::InitAsDefaultInstance() {
  stbaseinfo_ = const_cast< ::BASEDBINFO*>(&::BASEDBINFO::default_instance());
  stquestinfo_ = const_cast< ::QUESTDBINFO*>(&::QUESTDBINFO::default_instance());
  stiteminfo_ = const_cast< ::ITEMDBINFO*>(&::ITEMDBINFO::default_instance());
  stfightinfo_ = const_cast< ::FIGHTDBINFO*>(&::FIGHTDBINFO::default_instance());
  stfriendinfo_ = const_cast< ::FRIENDDBINFO*>(&::FRIENDDBINFO::default_instance());
  streserved1_ = const_cast< ::RESERVED1DBINFO*>(&::RESERVED1DBINFO::default_instance());
  streserved2_ = const_cast< ::RESERVED2DBINFO*>(&::RESERVED2DBINFO::default_instance());
}

GameLoginInfo::GameLoginInfo(const GameLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  stbaseinfo_ = NULL;
  stquestinfo_ = NULL;
  stiteminfo_ = NULL;
  stfightinfo_ = NULL;
  stfriendinfo_ = NULL;
  streserved1_ = NULL;
  streserved2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameLoginInfo::~GameLoginInfo() {
  SharedDtor();
}

void GameLoginInfo::SharedDtor() {
  if (this != default_instance_) {
    delete stbaseinfo_;
    delete stquestinfo_;
    delete stiteminfo_;
    delete stfightinfo_;
    delete stfriendinfo_;
    delete streserved1_;
    delete streserved2_;
  }
}

void GameLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameLoginInfo_descriptor_;
}

const GameLoginInfo& GameLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

GameLoginInfo* GameLoginInfo::default_instance_ = NULL;

GameLoginInfo* GameLoginInfo::New() const {
  return new GameLoginInfo;
}

void GameLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stbaseinfo()) {
      if (stbaseinfo_ != NULL) stbaseinfo_->::BASEDBINFO::Clear();
    }
    if (has_stquestinfo()) {
      if (stquestinfo_ != NULL) stquestinfo_->::QUESTDBINFO::Clear();
    }
    if (has_stiteminfo()) {
      if (stiteminfo_ != NULL) stiteminfo_->::ITEMDBINFO::Clear();
    }
    if (has_stfightinfo()) {
      if (stfightinfo_ != NULL) stfightinfo_->::FIGHTDBINFO::Clear();
    }
    if (has_stfriendinfo()) {
      if (stfriendinfo_ != NULL) stfriendinfo_->::FRIENDDBINFO::Clear();
    }
    if (has_streserved1()) {
      if (streserved1_ != NULL) streserved1_->::RESERVED1DBINFO::Clear();
    }
    if (has_streserved2()) {
      if (streserved2_ != NULL) streserved2_->::RESERVED2DBINFO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BASEDBINFO stBaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbaseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stQuestInfo;
        break;
      }

      // optional .QUESTDBINFO stQuestInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stQuestInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stquestinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stItemInfo;
        break;
      }

      // optional .ITEMDBINFO stItemInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stiteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stFightInfo;
        break;
      }

      // optional .FIGHTDBINFO stFightInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stFightInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stfightinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stFriendInfo;
        break;
      }

      // optional .FRIENDDBINFO stFriendInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stFriendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stfriendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stReserved1;
        break;
      }

      // optional .RESERVED1DBINFO stReserved1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stReserved1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streserved1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_stReserved2;
        break;
      }

      // optional .RESERVED2DBINFO stReserved2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stReserved2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streserved2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .BASEDBINFO stBaseInfo = 1;
  if (has_stbaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stbaseinfo(), output);
  }

  // optional .QUESTDBINFO stQuestInfo = 2;
  if (has_stquestinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stquestinfo(), output);
  }

  // optional .ITEMDBINFO stItemInfo = 3;
  if (has_stiteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stiteminfo(), output);
  }

  // optional .FIGHTDBINFO stFightInfo = 5;
  if (has_stfightinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stfightinfo(), output);
  }

  // optional .FRIENDDBINFO stFriendInfo = 6;
  if (has_stfriendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stfriendinfo(), output);
  }

  // optional .RESERVED1DBINFO stReserved1 = 7;
  if (has_streserved1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->streserved1(), output);
  }

  // optional .RESERVED2DBINFO stReserved2 = 8;
  if (has_streserved2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->streserved2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .BASEDBINFO stBaseInfo = 1;
  if (has_stbaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stbaseinfo(), target);
  }

  // optional .QUESTDBINFO stQuestInfo = 2;
  if (has_stquestinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stquestinfo(), target);
  }

  // optional .ITEMDBINFO stItemInfo = 3;
  if (has_stiteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stiteminfo(), target);
  }

  // optional .FIGHTDBINFO stFightInfo = 5;
  if (has_stfightinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stfightinfo(), target);
  }

  // optional .FRIENDDBINFO stFriendInfo = 6;
  if (has_stfriendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stfriendinfo(), target);
  }

  // optional .RESERVED1DBINFO stReserved1 = 7;
  if (has_streserved1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->streserved1(), target);
  }

  // optional .RESERVED2DBINFO stReserved2 = 8;
  if (has_streserved2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->streserved2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameLoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BASEDBINFO stBaseInfo = 1;
    if (has_stbaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbaseinfo());
    }

    // optional .QUESTDBINFO stQuestInfo = 2;
    if (has_stquestinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stquestinfo());
    }

    // optional .ITEMDBINFO stItemInfo = 3;
    if (has_stiteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stiteminfo());
    }

    // optional .FIGHTDBINFO stFightInfo = 5;
    if (has_stfightinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stfightinfo());
    }

    // optional .FRIENDDBINFO stFriendInfo = 6;
    if (has_stfriendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stfriendinfo());
    }

    // optional .RESERVED1DBINFO stReserved1 = 7;
    if (has_streserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streserved1());
    }

    // optional .RESERVED2DBINFO stReserved2 = 8;
    if (has_streserved2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streserved2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameLoginInfo::MergeFrom(const GameLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stbaseinfo()) {
      mutable_stbaseinfo()->::BASEDBINFO::MergeFrom(from.stbaseinfo());
    }
    if (from.has_stquestinfo()) {
      mutable_stquestinfo()->::QUESTDBINFO::MergeFrom(from.stquestinfo());
    }
    if (from.has_stiteminfo()) {
      mutable_stiteminfo()->::ITEMDBINFO::MergeFrom(from.stiteminfo());
    }
    if (from.has_stfightinfo()) {
      mutable_stfightinfo()->::FIGHTDBINFO::MergeFrom(from.stfightinfo());
    }
    if (from.has_stfriendinfo()) {
      mutable_stfriendinfo()->::FRIENDDBINFO::MergeFrom(from.stfriendinfo());
    }
    if (from.has_streserved1()) {
      mutable_streserved1()->::RESERVED1DBINFO::MergeFrom(from.streserved1());
    }
    if (from.has_streserved2()) {
      mutable_streserved2()->::RESERVED2DBINFO::MergeFrom(from.streserved2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLoginInfo::CopyFrom(const GameLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLoginInfo::IsInitialized() const {

  return true;
}

void GameLoginInfo::Swap(GameLoginInfo* other) {
  if (other != this) {
    std::swap(stbaseinfo_, other->stbaseinfo_);
    std::swap(stquestinfo_, other->stquestinfo_);
    std::swap(stiteminfo_, other->stiteminfo_);
    std::swap(stfightinfo_, other->stfightinfo_);
    std::swap(stfriendinfo_, other->stfriendinfo_);
    std::swap(streserved1_, other->streserved1_);
    std::swap(streserved2_, other->streserved2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameLoginInfo_descriptor_;
  metadata.reflection = GameLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LoginServer_Request::kStRoleIDFieldNumber;
const int Zone_LoginServer_Request::kULoginReasonFieldNumber;
const int Zone_LoginServer_Request::kUClientVersionFieldNumber;
const int Zone_LoginServer_Request::kStrSessionKeyFieldNumber;
#endif  // !_MSC_VER

Zone_LoginServer_Request::Zone_LoginServer_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LoginServer_Request::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

Zone_LoginServer_Request::Zone_LoginServer_Request(const Zone_LoginServer_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LoginServer_Request::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  uloginreason_ = 0u;
  uclientversion_ = 0u;
  strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LoginServer_Request::~Zone_LoginServer_Request() {
  SharedDtor();
}

void Zone_LoginServer_Request::SharedDtor() {
  if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete strsessionkey_;
  }
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void Zone_LoginServer_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LoginServer_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LoginServer_Request_descriptor_;
}

const Zone_LoginServer_Request& Zone_LoginServer_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_LoginServer_Request* Zone_LoginServer_Request::default_instance_ = NULL;

Zone_LoginServer_Request* Zone_LoginServer_Request::New() const {
  return new Zone_LoginServer_Request;
}

void Zone_LoginServer_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    uloginreason_ = 0u;
    uclientversion_ = 0u;
    if (has_strsessionkey()) {
      if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
        strsessionkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LoginServer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uLoginReason;
        break;
      }

      // optional uint32 uLoginReason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginreason_)));
          set_has_uloginreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uClientVersion;
        break;
      }

      // optional uint32 uClientVersion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uClientVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uclientversion_)));
          set_has_uclientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strSessionKey;
        break;
      }

      // optional string strSessionKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsessionkey().data(), this->strsessionkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LoginServer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional uint32 uLoginReason = 3;
  if (has_uloginreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uloginreason(), output);
  }

  // optional uint32 uClientVersion = 4;
  if (has_uclientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uclientversion(), output);
  }

  // optional string strSessionKey = 5;
  if (has_strsessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsessionkey().data(), this->strsessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strsessionkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LoginServer_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional uint32 uLoginReason = 3;
  if (has_uloginreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uloginreason(), target);
  }

  // optional uint32 uClientVersion = 4;
  if (has_uclientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uclientversion(), target);
  }

  // optional string strSessionKey = 5;
  if (has_strsessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsessionkey().data(), this->strsessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strsessionkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LoginServer_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional uint32 uLoginReason = 3;
    if (has_uloginreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginreason());
    }

    // optional uint32 uClientVersion = 4;
    if (has_uclientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uclientversion());
    }

    // optional string strSessionKey = 5;
    if (has_strsessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsessionkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LoginServer_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LoginServer_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LoginServer_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LoginServer_Request::MergeFrom(const Zone_LoginServer_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_uloginreason()) {
      set_uloginreason(from.uloginreason());
    }
    if (from.has_uclientversion()) {
      set_uclientversion(from.uclientversion());
    }
    if (from.has_strsessionkey()) {
      set_strsessionkey(from.strsessionkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LoginServer_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LoginServer_Request::CopyFrom(const Zone_LoginServer_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LoginServer_Request::IsInitialized() const {

  return true;
}

void Zone_LoginServer_Request::Swap(Zone_LoginServer_Request* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(uloginreason_, other->uloginreason_);
    std::swap(uclientversion_, other->uclientversion_);
    std::swap(strsessionkey_, other->strsessionkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LoginServer_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LoginServer_Request_descriptor_;
  metadata.reflection = Zone_LoginServer_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LoginServer_Response::kIResultFieldNumber;
const int Zone_LoginServer_Response::kUinFieldNumber;
const int Zone_LoginServer_Response::kIZoneIDFieldNumber;
const int Zone_LoginServer_Response::kIWorldIDFieldNumber;
const int Zone_LoginServer_Response::kStLoginInfoFieldNumber;
#endif  // !_MSC_VER

Zone_LoginServer_Response::Zone_LoginServer_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LoginServer_Response::InitAsDefaultInstance() {
  stlogininfo_ = const_cast< ::GameLoginInfo*>(&::GameLoginInfo::default_instance());
}

Zone_LoginServer_Response::Zone_LoginServer_Response(const Zone_LoginServer_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LoginServer_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uin_ = 0u;
  izoneid_ = 0;
  iworldid_ = 0;
  stlogininfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LoginServer_Response::~Zone_LoginServer_Response() {
  SharedDtor();
}

void Zone_LoginServer_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stlogininfo_;
  }
}

void Zone_LoginServer_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LoginServer_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LoginServer_Response_descriptor_;
}

const Zone_LoginServer_Response& Zone_LoginServer_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_LoginServer_Response* Zone_LoginServer_Response::default_instance_ = NULL;

Zone_LoginServer_Response* Zone_LoginServer_Response::New() const {
  return new Zone_LoginServer_Response;
}

void Zone_LoginServer_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uin_ = 0u;
    izoneid_ = 0;
    iworldid_ = 0;
    if (has_stlogininfo()) {
      if (stlogininfo_ != NULL) stlogininfo_->::GameLoginInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LoginServer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iWorldID;
        break;
      }

      // optional int32 iWorldID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stLoginInfo;
        break;
      }

      // optional .GameLoginInfo stLoginInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stLoginInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stlogininfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LoginServer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional int32 iZoneID = 3;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->izoneid(), output);
  }

  // optional int32 iWorldID = 4;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iworldid(), output);
  }

  // optional .GameLoginInfo stLoginInfo = 5;
  if (has_stlogininfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stlogininfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LoginServer_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional int32 iZoneID = 3;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->izoneid(), target);
  }

  // optional int32 iWorldID = 4;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iworldid(), target);
  }

  // optional .GameLoginInfo stLoginInfo = 5;
  if (has_stlogininfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stlogininfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LoginServer_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iZoneID = 3;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional int32 iWorldID = 4;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional .GameLoginInfo stLoginInfo = 5;
    if (has_stlogininfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stlogininfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LoginServer_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LoginServer_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LoginServer_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LoginServer_Response::MergeFrom(const Zone_LoginServer_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_stlogininfo()) {
      mutable_stlogininfo()->::GameLoginInfo::MergeFrom(from.stlogininfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LoginServer_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LoginServer_Response::CopyFrom(const Zone_LoginServer_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LoginServer_Response::IsInitialized() const {

  return true;
}

void Zone_LoginServer_Response::Swap(Zone_LoginServer_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uin_, other->uin_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(iworldid_, other->iworldid_);
    std::swap(stlogininfo_, other->stlogininfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LoginServer_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LoginServer_Response_descriptor_;
  metadata.reflection = Zone_LoginServer_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_Logout_Notify::kStRoleIDFieldNumber;
#endif  // !_MSC_VER

Zone_Logout_Notify::Zone_Logout_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_Logout_Notify::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

Zone_Logout_Notify::Zone_Logout_Notify(const Zone_Logout_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_Logout_Notify::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_Logout_Notify::~Zone_Logout_Notify() {
  SharedDtor();
}

void Zone_Logout_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void Zone_Logout_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_Logout_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_Logout_Notify_descriptor_;
}

const Zone_Logout_Notify& Zone_Logout_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_Logout_Notify* Zone_Logout_Notify::default_instance_ = NULL;

Zone_Logout_Notify* Zone_Logout_Notify::New() const {
  return new Zone_Logout_Notify;
}

void Zone_Logout_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_Logout_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_Logout_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_Logout_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_Logout_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_Logout_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_Logout_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_Logout_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_Logout_Notify::MergeFrom(const Zone_Logout_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_Logout_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_Logout_Notify::CopyFrom(const Zone_Logout_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_Logout_Notify::IsInitialized() const {

  return true;
}

void Zone_Logout_Notify::Swap(Zone_Logout_Notify* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_Logout_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_Logout_Notify_descriptor_;
  metadata.reflection = Zone_Logout_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetFriendInfo_Request::kUcReqTypeFieldNumber;
const int Zone_GetFriendInfo_Request::kUinFieldNumber;
const int Zone_GetFriendInfo_Request::kFriendUinFieldNumber;
#endif  // !_MSC_VER

Zone_GetFriendInfo_Request::Zone_GetFriendInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetFriendInfo_Request::InitAsDefaultInstance() {
}

Zone_GetFriendInfo_Request::Zone_GetFriendInfo_Request(const Zone_GetFriendInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetFriendInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ucreqtype_ = 0u;
  uin_ = 0u;
  friend_uin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetFriendInfo_Request::~Zone_GetFriendInfo_Request() {
  SharedDtor();
}

void Zone_GetFriendInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetFriendInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetFriendInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetFriendInfo_Request_descriptor_;
}

const Zone_GetFriendInfo_Request& Zone_GetFriendInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_GetFriendInfo_Request* Zone_GetFriendInfo_Request::default_instance_ = NULL;

Zone_GetFriendInfo_Request* Zone_GetFriendInfo_Request::New() const {
  return new Zone_GetFriendInfo_Request;
}

void Zone_GetFriendInfo_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ucreqtype_ = 0u;
    uin_ = 0u;
    friend_uin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetFriendInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ucReqType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucreqtype_)));
          set_has_ucreqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friend_uin;
        break;
      }

      // optional uint32 friend_uin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_uin_)));
          set_has_friend_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetFriendInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ucReqType = 1;
  if (has_ucreqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ucreqtype(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional uint32 friend_uin = 3;
  if (has_friend_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friend_uin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetFriendInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ucReqType = 1;
  if (has_ucreqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ucreqtype(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional uint32 friend_uin = 3;
  if (has_friend_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friend_uin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetFriendInfo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ucReqType = 1;
    if (has_ucreqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ucreqtype());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 friend_uin = 3;
    if (has_friend_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_uin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetFriendInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetFriendInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetFriendInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetFriendInfo_Request::MergeFrom(const Zone_GetFriendInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ucreqtype()) {
      set_ucreqtype(from.ucreqtype());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_friend_uin()) {
      set_friend_uin(from.friend_uin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetFriendInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetFriendInfo_Request::CopyFrom(const Zone_GetFriendInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetFriendInfo_Request::IsInitialized() const {

  return true;
}

void Zone_GetFriendInfo_Request::Swap(Zone_GetFriendInfo_Request* other) {
  if (other != this) {
    std::swap(ucreqtype_, other->ucreqtype_);
    std::swap(uin_, other->uin_);
    std::swap(friend_uin_, other->friend_uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetFriendInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetFriendInfo_Request_descriptor_;
  metadata.reflection = Zone_GetFriendInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetFriendInfo_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_GetFriendInfo_Response::Zone_GetFriendInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetFriendInfo_Response::InitAsDefaultInstance() {
}

Zone_GetFriendInfo_Response::Zone_GetFriendInfo_Response(const Zone_GetFriendInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetFriendInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetFriendInfo_Response::~Zone_GetFriendInfo_Response() {
  SharedDtor();
}

void Zone_GetFriendInfo_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetFriendInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetFriendInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetFriendInfo_Response_descriptor_;
}

const Zone_GetFriendInfo_Response& Zone_GetFriendInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_GetFriendInfo_Response* Zone_GetFriendInfo_Response::default_instance_ = NULL;

Zone_GetFriendInfo_Response* Zone_GetFriendInfo_Response::New() const {
  return new Zone_GetFriendInfo_Response;
}

void Zone_GetFriendInfo_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetFriendInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetFriendInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetFriendInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetFriendInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetFriendInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetFriendInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetFriendInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetFriendInfo_Response::MergeFrom(const Zone_GetFriendInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetFriendInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetFriendInfo_Response::CopyFrom(const Zone_GetFriendInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetFriendInfo_Response::IsInitialized() const {

  return true;
}

void Zone_GetFriendInfo_Response::Swap(Zone_GetFriendInfo_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetFriendInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetFriendInfo_Response_descriptor_;
  metadata.reflection = Zone_GetFriendInfo_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_OnlineRole_Request::kIWorldIDFieldNumber;
const int Zone_OnlineRole_Request::kIZoneIDFieldNumber;
const int Zone_OnlineRole_Request::kIRoleNumFieldNumber;
const int Zone_OnlineRole_Request::kStrRecordTimeFieldNumber;
#endif  // !_MSC_VER

Zone_OnlineRole_Request::Zone_OnlineRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_OnlineRole_Request::InitAsDefaultInstance() {
}

Zone_OnlineRole_Request::Zone_OnlineRole_Request(const Zone_OnlineRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_OnlineRole_Request::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  izoneid_ = 0;
  irolenum_ = 0;
  strrecordtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_OnlineRole_Request::~Zone_OnlineRole_Request() {
  SharedDtor();
}

void Zone_OnlineRole_Request::SharedDtor() {
  if (strrecordtime_ != &::google::protobuf::internal::kEmptyString) {
    delete strrecordtime_;
  }
  if (this != default_instance_) {
  }
}

void Zone_OnlineRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_OnlineRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_OnlineRole_Request_descriptor_;
}

const Zone_OnlineRole_Request& Zone_OnlineRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_OnlineRole_Request* Zone_OnlineRole_Request::default_instance_ = NULL;

Zone_OnlineRole_Request* Zone_OnlineRole_Request::New() const {
  return new Zone_OnlineRole_Request;
}

void Zone_OnlineRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    izoneid_ = 0;
    irolenum_ = 0;
    if (has_strrecordtime()) {
      if (strrecordtime_ != &::google::protobuf::internal::kEmptyString) {
        strrecordtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_OnlineRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRoleNum;
        break;
      }

      // optional int32 iRoleNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRoleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irolenum_)));
          set_has_irolenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strRecordTime;
        break;
      }

      // optional string strRecordTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRecordTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrecordtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrecordtime().data(), this->strrecordtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_OnlineRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // optional int32 iZoneID = 2;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->izoneid(), output);
  }

  // optional int32 iRoleNum = 3;
  if (has_irolenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->irolenum(), output);
  }

  // optional string strRecordTime = 4;
  if (has_strrecordtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordtime().data(), this->strrecordtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strrecordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_OnlineRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // optional int32 iZoneID = 2;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->izoneid(), target);
  }

  // optional int32 iRoleNum = 3;
  if (has_irolenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->irolenum(), target);
  }

  // optional string strRecordTime = 4;
  if (has_strrecordtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordtime().data(), this->strrecordtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strrecordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_OnlineRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional int32 iZoneID = 2;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional int32 iRoleNum = 3;
    if (has_irolenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irolenum());
    }

    // optional string strRecordTime = 4;
    if (has_strrecordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrecordtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_OnlineRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_OnlineRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_OnlineRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_OnlineRole_Request::MergeFrom(const Zone_OnlineRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_irolenum()) {
      set_irolenum(from.irolenum());
    }
    if (from.has_strrecordtime()) {
      set_strrecordtime(from.strrecordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_OnlineRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_OnlineRole_Request::CopyFrom(const Zone_OnlineRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_OnlineRole_Request::IsInitialized() const {

  return true;
}

void Zone_OnlineRole_Request::Swap(Zone_OnlineRole_Request* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(irolenum_, other->irolenum_);
    std::swap(strrecordtime_, other->strrecordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_OnlineRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_OnlineRole_Request_descriptor_;
  metadata.reflection = Zone_OnlineRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GameMaster_Request::kUinFieldNumber;
const int Zone_GameMaster_Request::kStrCommandFieldNumber;
#endif  // !_MSC_VER

Zone_GameMaster_Request::Zone_GameMaster_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GameMaster_Request::InitAsDefaultInstance() {
}

Zone_GameMaster_Request::Zone_GameMaster_Request(const Zone_GameMaster_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GameMaster_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  strcommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GameMaster_Request::~Zone_GameMaster_Request() {
  SharedDtor();
}

void Zone_GameMaster_Request::SharedDtor() {
  if (strcommand_ != &::google::protobuf::internal::kEmptyString) {
    delete strcommand_;
  }
  if (this != default_instance_) {
  }
}

void Zone_GameMaster_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GameMaster_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GameMaster_Request_descriptor_;
}

const Zone_GameMaster_Request& Zone_GameMaster_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_GameMaster_Request* Zone_GameMaster_Request::default_instance_ = NULL;

Zone_GameMaster_Request* Zone_GameMaster_Request::New() const {
  return new Zone_GameMaster_Request;
}

void Zone_GameMaster_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    if (has_strcommand()) {
      if (strcommand_ != &::google::protobuf::internal::kEmptyString) {
        strcommand_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GameMaster_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strCommand;
        break;
      }

      // optional string strCommand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcommand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcommand().data(), this->strcommand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GameMaster_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional string strCommand = 2;
  if (has_strcommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcommand().data(), this->strcommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strcommand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GameMaster_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional string strCommand = 2;
  if (has_strcommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcommand().data(), this->strcommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strcommand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GameMaster_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional string strCommand = 2;
    if (has_strcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcommand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GameMaster_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GameMaster_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GameMaster_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GameMaster_Request::MergeFrom(const Zone_GameMaster_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_strcommand()) {
      set_strcommand(from.strcommand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GameMaster_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GameMaster_Request::CopyFrom(const Zone_GameMaster_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GameMaster_Request::IsInitialized() const {

  return true;
}

void Zone_GameMaster_Request::Swap(Zone_GameMaster_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(strcommand_, other->strcommand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GameMaster_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GameMaster_Request_descriptor_;
  metadata.reflection = Zone_GameMaster_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GameMaster_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_GameMaster_Response::Zone_GameMaster_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GameMaster_Response::InitAsDefaultInstance() {
}

Zone_GameMaster_Response::Zone_GameMaster_Response(const Zone_GameMaster_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GameMaster_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GameMaster_Response::~Zone_GameMaster_Response() {
  SharedDtor();
}

void Zone_GameMaster_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GameMaster_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GameMaster_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GameMaster_Response_descriptor_;
}

const Zone_GameMaster_Response& Zone_GameMaster_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_GameMaster_Response* Zone_GameMaster_Response::default_instance_ = NULL;

Zone_GameMaster_Response* Zone_GameMaster_Response::New() const {
  return new Zone_GameMaster_Response;
}

void Zone_GameMaster_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GameMaster_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GameMaster_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GameMaster_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GameMaster_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GameMaster_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GameMaster_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GameMaster_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GameMaster_Response::MergeFrom(const Zone_GameMaster_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GameMaster_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GameMaster_Response::CopyFrom(const Zone_GameMaster_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GameMaster_Response::IsInitialized() const {

  return true;
}

void Zone_GameMaster_Response::Swap(Zone_GameMaster_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GameMaster_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GameMaster_Response_descriptor_;
  metadata.reflection = Zone_GameMaster_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LoginServer_Notify::kStRoleIDFieldNumber;
const int Zone_LoginServer_Notify::kIZoneIDFieldNumber;
#endif  // !_MSC_VER

Zone_LoginServer_Notify::Zone_LoginServer_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LoginServer_Notify::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

Zone_LoginServer_Notify::Zone_LoginServer_Notify(const Zone_LoginServer_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LoginServer_Notify::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  izoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LoginServer_Notify::~Zone_LoginServer_Notify() {
  SharedDtor();
}

void Zone_LoginServer_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void Zone_LoginServer_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LoginServer_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LoginServer_Notify_descriptor_;
}

const Zone_LoginServer_Notify& Zone_LoginServer_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_LoginServer_Notify* Zone_LoginServer_Notify::default_instance_ = NULL;

Zone_LoginServer_Notify* Zone_LoginServer_Notify::New() const {
  return new Zone_LoginServer_Notify;
}

void Zone_LoginServer_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    izoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LoginServer_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LoginServer_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->izoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LoginServer_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->izoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LoginServer_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iZoneID = 4;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LoginServer_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LoginServer_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LoginServer_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LoginServer_Notify::MergeFrom(const Zone_LoginServer_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LoginServer_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LoginServer_Notify::CopyFrom(const Zone_LoginServer_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LoginServer_Notify::IsInitialized() const {

  return true;
}

void Zone_LoginServer_Notify::Swap(Zone_LoginServer_Notify* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LoginServer_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LoginServer_Notify_descriptor_;
  metadata.reflection = Zone_LoginServer_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_RepOpera_Request::kETypeFieldNumber;
const int Zone_RepOpera_Request::kISlotIndexFieldNumber;
const int Zone_RepOpera_Request::kIItemNumFieldNumber;
const int Zone_RepOpera_Request::kIOtherSlotIndexFieldNumber;
const int Zone_RepOpera_Request::kIFightUnitIDFieldNumber;
#endif  // !_MSC_VER

Zone_RepOpera_Request::Zone_RepOpera_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_RepOpera_Request::InitAsDefaultInstance() {
}

Zone_RepOpera_Request::Zone_RepOpera_Request(const Zone_RepOpera_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_RepOpera_Request::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  islotindex_ = 0;
  iitemnum_ = 0;
  iotherslotindex_ = 0;
  ifightunitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_RepOpera_Request::~Zone_RepOpera_Request() {
  SharedDtor();
}

void Zone_RepOpera_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_RepOpera_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_RepOpera_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_RepOpera_Request_descriptor_;
}

const Zone_RepOpera_Request& Zone_RepOpera_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_RepOpera_Request* Zone_RepOpera_Request::default_instance_ = NULL;

Zone_RepOpera_Request* Zone_RepOpera_Request::New() const {
  return new Zone_RepOpera_Request;
}

void Zone_RepOpera_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 0;
    islotindex_ = 0;
    iitemnum_ = 0;
    iotherslotindex_ = 0;
    ifightunitid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_RepOpera_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ReqOperaType eType = 1 [default = REQ_OPERA_TYPE_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReqOperaType_IsValid(value)) {
            set_etype(static_cast< ::ReqOperaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iSlotIndex;
        break;
      }

      // optional int32 iSlotIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSlotIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islotindex_)));
          set_has_islotindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iItemNum;
        break;
      }

      // optional int32 iItemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemnum_)));
          set_has_iitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iOtherSlotIndex;
        break;
      }

      // optional int32 iOtherSlotIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOtherSlotIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iotherslotindex_)));
          set_has_iotherslotindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iFightUnitID;
        break;
      }

      // optional int32 iFightUnitID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFightUnitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifightunitid_)));
          set_has_ifightunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_RepOpera_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ReqOperaType eType = 1 [default = REQ_OPERA_TYPE_INVALID];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional int32 iSlotIndex = 2;
  if (has_islotindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->islotindex(), output);
  }

  // optional int32 iItemNum = 3;
  if (has_iitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iitemnum(), output);
  }

  // optional int32 iOtherSlotIndex = 4;
  if (has_iotherslotindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iotherslotindex(), output);
  }

  // optional int32 iFightUnitID = 5;
  if (has_ifightunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifightunitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_RepOpera_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ReqOperaType eType = 1 [default = REQ_OPERA_TYPE_INVALID];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional int32 iSlotIndex = 2;
  if (has_islotindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->islotindex(), target);
  }

  // optional int32 iItemNum = 3;
  if (has_iitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iitemnum(), target);
  }

  // optional int32 iOtherSlotIndex = 4;
  if (has_iotherslotindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iotherslotindex(), target);
  }

  // optional int32 iFightUnitID = 5;
  if (has_ifightunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifightunitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_RepOpera_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ReqOperaType eType = 1 [default = REQ_OPERA_TYPE_INVALID];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional int32 iSlotIndex = 2;
    if (has_islotindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->islotindex());
    }

    // optional int32 iItemNum = 3;
    if (has_iitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemnum());
    }

    // optional int32 iOtherSlotIndex = 4;
    if (has_iotherslotindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iotherslotindex());
    }

    // optional int32 iFightUnitID = 5;
    if (has_ifightunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifightunitid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_RepOpera_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_RepOpera_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_RepOpera_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_RepOpera_Request::MergeFrom(const Zone_RepOpera_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_islotindex()) {
      set_islotindex(from.islotindex());
    }
    if (from.has_iitemnum()) {
      set_iitemnum(from.iitemnum());
    }
    if (from.has_iotherslotindex()) {
      set_iotherslotindex(from.iotherslotindex());
    }
    if (from.has_ifightunitid()) {
      set_ifightunitid(from.ifightunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_RepOpera_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_RepOpera_Request::CopyFrom(const Zone_RepOpera_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_RepOpera_Request::IsInitialized() const {

  return true;
}

void Zone_RepOpera_Request::Swap(Zone_RepOpera_Request* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(islotindex_, other->islotindex_);
    std::swap(iitemnum_, other->iitemnum_);
    std::swap(iotherslotindex_, other->iotherslotindex_);
    std::swap(ifightunitid_, other->ifightunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_RepOpera_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_RepOpera_Request_descriptor_;
  metadata.reflection = Zone_RepOpera_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_RepOpera_Response::kIResultFieldNumber;
const int Zone_RepOpera_Response::kISlotIndexFieldNumber;
const int Zone_RepOpera_Response::kStSlotFieldNumber;
const int Zone_RepOpera_Response::kIOtherSlotIndexFieldNumber;
const int Zone_RepOpera_Response::kStOtherSlotFieldNumber;
const int Zone_RepOpera_Response::kETypeFieldNumber;
#endif  // !_MSC_VER

Zone_RepOpera_Response::Zone_RepOpera_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_RepOpera_Response::InitAsDefaultInstance() {
  stslot_ = const_cast< ::OneSlotInfo*>(&::OneSlotInfo::default_instance());
  stotherslot_ = const_cast< ::OneSlotInfo*>(&::OneSlotInfo::default_instance());
}

Zone_RepOpera_Response::Zone_RepOpera_Response(const Zone_RepOpera_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_RepOpera_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  islotindex_ = 0;
  stslot_ = NULL;
  iotherslotindex_ = 0;
  stotherslot_ = NULL;
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_RepOpera_Response::~Zone_RepOpera_Response() {
  SharedDtor();
}

void Zone_RepOpera_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stslot_;
    delete stotherslot_;
  }
}

void Zone_RepOpera_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_RepOpera_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_RepOpera_Response_descriptor_;
}

const Zone_RepOpera_Response& Zone_RepOpera_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_RepOpera_Response* Zone_RepOpera_Response::default_instance_ = NULL;

Zone_RepOpera_Response* Zone_RepOpera_Response::New() const {
  return new Zone_RepOpera_Response;
}

void Zone_RepOpera_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    islotindex_ = 0;
    if (has_stslot()) {
      if (stslot_ != NULL) stslot_->::OneSlotInfo::Clear();
    }
    iotherslotindex_ = 0;
    if (has_stotherslot()) {
      if (stotherslot_ != NULL) stotherslot_->::OneSlotInfo::Clear();
    }
    etype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_RepOpera_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iSlotIndex;
        break;
      }

      // optional int32 iSlotIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSlotIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islotindex_)));
          set_has_islotindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stSlot;
        break;
      }

      // optional .OneSlotInfo stSlot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stSlot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stslot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iOtherSlotIndex;
        break;
      }

      // optional int32 iOtherSlotIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOtherSlotIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iotherslotindex_)));
          set_has_iotherslotindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stOtherSlot;
        break;
      }

      // optional .OneSlotInfo stOtherSlot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stOtherSlot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stotherslot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_eType;
        break;
      }

      // optional .ReqOperaType eType = 6 [default = REQ_OPERA_TYPE_INVALID];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReqOperaType_IsValid(value)) {
            set_etype(static_cast< ::ReqOperaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_RepOpera_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iSlotIndex = 2;
  if (has_islotindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->islotindex(), output);
  }

  // optional .OneSlotInfo stSlot = 3;
  if (has_stslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stslot(), output);
  }

  // optional int32 iOtherSlotIndex = 4;
  if (has_iotherslotindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iotherslotindex(), output);
  }

  // optional .OneSlotInfo stOtherSlot = 5;
  if (has_stotherslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stotherslot(), output);
  }

  // optional .ReqOperaType eType = 6 [default = REQ_OPERA_TYPE_INVALID];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_RepOpera_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iSlotIndex = 2;
  if (has_islotindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->islotindex(), target);
  }

  // optional .OneSlotInfo stSlot = 3;
  if (has_stslot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stslot(), target);
  }

  // optional int32 iOtherSlotIndex = 4;
  if (has_iotherslotindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iotherslotindex(), target);
  }

  // optional .OneSlotInfo stOtherSlot = 5;
  if (has_stotherslot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stotherslot(), target);
  }

  // optional .ReqOperaType eType = 6 [default = REQ_OPERA_TYPE_INVALID];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_RepOpera_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iSlotIndex = 2;
    if (has_islotindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->islotindex());
    }

    // optional .OneSlotInfo stSlot = 3;
    if (has_stslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stslot());
    }

    // optional int32 iOtherSlotIndex = 4;
    if (has_iotherslotindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iotherslotindex());
    }

    // optional .OneSlotInfo stOtherSlot = 5;
    if (has_stotherslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stotherslot());
    }

    // optional .ReqOperaType eType = 6 [default = REQ_OPERA_TYPE_INVALID];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_RepOpera_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_RepOpera_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_RepOpera_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_RepOpera_Response::MergeFrom(const Zone_RepOpera_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_islotindex()) {
      set_islotindex(from.islotindex());
    }
    if (from.has_stslot()) {
      mutable_stslot()->::OneSlotInfo::MergeFrom(from.stslot());
    }
    if (from.has_iotherslotindex()) {
      set_iotherslotindex(from.iotherslotindex());
    }
    if (from.has_stotherslot()) {
      mutable_stotherslot()->::OneSlotInfo::MergeFrom(from.stotherslot());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_RepOpera_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_RepOpera_Response::CopyFrom(const Zone_RepOpera_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_RepOpera_Response::IsInitialized() const {

  return true;
}

void Zone_RepOpera_Response::Swap(Zone_RepOpera_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(islotindex_, other->islotindex_);
    std::swap(stslot_, other->stslot_);
    std::swap(iotherslotindex_, other->iotherslotindex_);
    std::swap(stotherslot_, other->stotherslot_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_RepOpera_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_RepOpera_Response_descriptor_;
  metadata.reflection = Zone_RepOpera_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Zone_GetRepInfo_Request::Zone_GetRepInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetRepInfo_Request::InitAsDefaultInstance() {
}

Zone_GetRepInfo_Request::Zone_GetRepInfo_Request(const Zone_GetRepInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetRepInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetRepInfo_Request::~Zone_GetRepInfo_Request() {
  SharedDtor();
}

void Zone_GetRepInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetRepInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetRepInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetRepInfo_Request_descriptor_;
}

const Zone_GetRepInfo_Request& Zone_GetRepInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_GetRepInfo_Request* Zone_GetRepInfo_Request::default_instance_ = NULL;

Zone_GetRepInfo_Request* Zone_GetRepInfo_Request::New() const {
  return new Zone_GetRepInfo_Request;
}

void Zone_GetRepInfo_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetRepInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Zone_GetRepInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetRepInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetRepInfo_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetRepInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetRepInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetRepInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetRepInfo_Request::MergeFrom(const Zone_GetRepInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetRepInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetRepInfo_Request::CopyFrom(const Zone_GetRepInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetRepInfo_Request::IsInitialized() const {

  return true;
}

void Zone_GetRepInfo_Request::Swap(Zone_GetRepInfo_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetRepInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetRepInfo_Request_descriptor_;
  metadata.reflection = Zone_GetRepInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetRepInfo_Response::kIResultFieldNumber;
const int Zone_GetRepInfo_Response::kStItemsFieldNumber;
#endif  // !_MSC_VER

Zone_GetRepInfo_Response::Zone_GetRepInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetRepInfo_Response::InitAsDefaultInstance() {
  stitems_ = const_cast< ::ITEMDBINFO*>(&::ITEMDBINFO::default_instance());
}

Zone_GetRepInfo_Response::Zone_GetRepInfo_Response(const Zone_GetRepInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetRepInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stitems_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetRepInfo_Response::~Zone_GetRepInfo_Response() {
  SharedDtor();
}

void Zone_GetRepInfo_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stitems_;
  }
}

void Zone_GetRepInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetRepInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetRepInfo_Response_descriptor_;
}

const Zone_GetRepInfo_Response& Zone_GetRepInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_GetRepInfo_Response* Zone_GetRepInfo_Response::default_instance_ = NULL;

Zone_GetRepInfo_Response* Zone_GetRepInfo_Response::New() const {
  return new Zone_GetRepInfo_Response;
}

void Zone_GetRepInfo_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stitems()) {
      if (stitems_ != NULL) stitems_->::ITEMDBINFO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetRepInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stItems;
        break;
      }

      // optional .ITEMDBINFO stItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetRepInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .ITEMDBINFO stItems = 2;
  if (has_stitems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stitems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetRepInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .ITEMDBINFO stItems = 2;
  if (has_stitems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stitems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetRepInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .ITEMDBINFO stItems = 2;
    if (has_stitems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stitems());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetRepInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetRepInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetRepInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetRepInfo_Response::MergeFrom(const Zone_GetRepInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stitems()) {
      mutable_stitems()->::ITEMDBINFO::MergeFrom(from.stitems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetRepInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetRepInfo_Response::CopyFrom(const Zone_GetRepInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetRepInfo_Response::IsInitialized() const {

  return true;
}

void Zone_GetRepInfo_Response::Swap(Zone_GetRepInfo_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stitems_, other->stitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetRepInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetRepInfo_Response_descriptor_;
  metadata.reflection = Zone_GetRepInfo_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_WearEquip_Request::kBIsWearFieldNumber;
const int Zone_WearEquip_Request::kIUnitIndexFieldNumber;
const int Zone_WearEquip_Request::kISlotIndexFieldNumber;
const int Zone_WearEquip_Request::kIEquipSubTypeFieldNumber;
#endif  // !_MSC_VER

Zone_WearEquip_Request::Zone_WearEquip_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_WearEquip_Request::InitAsDefaultInstance() {
}

Zone_WearEquip_Request::Zone_WearEquip_Request(const Zone_WearEquip_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_WearEquip_Request::SharedCtor() {
  _cached_size_ = 0;
  biswear_ = false;
  iunitindex_ = 0;
  islotindex_ = 0;
  iequipsubtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_WearEquip_Request::~Zone_WearEquip_Request() {
  SharedDtor();
}

void Zone_WearEquip_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_WearEquip_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_WearEquip_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_WearEquip_Request_descriptor_;
}

const Zone_WearEquip_Request& Zone_WearEquip_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_WearEquip_Request* Zone_WearEquip_Request::default_instance_ = NULL;

Zone_WearEquip_Request* Zone_WearEquip_Request::New() const {
  return new Zone_WearEquip_Request;
}

void Zone_WearEquip_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    biswear_ = false;
    iunitindex_ = 0;
    islotindex_ = 0;
    iequipsubtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_WearEquip_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsWear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biswear_)));
          set_has_biswear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iUnitIndex;
        break;
      }

      // optional int32 iUnitIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iUnitIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitindex_)));
          set_has_iunitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iSlotIndex;
        break;
      }

      // optional int32 iSlotIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSlotIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islotindex_)));
          set_has_islotindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iEquipSubType;
        break;
      }

      // optional int32 iEquipSubType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iEquipSubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iequipsubtype_)));
          set_has_iequipsubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_WearEquip_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bIsWear = 1;
  if (has_biswear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->biswear(), output);
  }

  // optional int32 iUnitIndex = 2;
  if (has_iunitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iunitindex(), output);
  }

  // optional int32 iSlotIndex = 3;
  if (has_islotindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->islotindex(), output);
  }

  // optional int32 iEquipSubType = 4;
  if (has_iequipsubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iequipsubtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_WearEquip_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bIsWear = 1;
  if (has_biswear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->biswear(), target);
  }

  // optional int32 iUnitIndex = 2;
  if (has_iunitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iunitindex(), target);
  }

  // optional int32 iSlotIndex = 3;
  if (has_islotindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->islotindex(), target);
  }

  // optional int32 iEquipSubType = 4;
  if (has_iequipsubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iequipsubtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_WearEquip_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bIsWear = 1;
    if (has_biswear()) {
      total_size += 1 + 1;
    }

    // optional int32 iUnitIndex = 2;
    if (has_iunitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitindex());
    }

    // optional int32 iSlotIndex = 3;
    if (has_islotindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->islotindex());
    }

    // optional int32 iEquipSubType = 4;
    if (has_iequipsubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iequipsubtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_WearEquip_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_WearEquip_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_WearEquip_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_WearEquip_Request::MergeFrom(const Zone_WearEquip_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_biswear()) {
      set_biswear(from.biswear());
    }
    if (from.has_iunitindex()) {
      set_iunitindex(from.iunitindex());
    }
    if (from.has_islotindex()) {
      set_islotindex(from.islotindex());
    }
    if (from.has_iequipsubtype()) {
      set_iequipsubtype(from.iequipsubtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_WearEquip_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_WearEquip_Request::CopyFrom(const Zone_WearEquip_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_WearEquip_Request::IsInitialized() const {

  return true;
}

void Zone_WearEquip_Request::Swap(Zone_WearEquip_Request* other) {
  if (other != this) {
    std::swap(biswear_, other->biswear_);
    std::swap(iunitindex_, other->iunitindex_);
    std::swap(islotindex_, other->islotindex_);
    std::swap(iequipsubtype_, other->iequipsubtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_WearEquip_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_WearEquip_Request_descriptor_;
  metadata.reflection = Zone_WearEquip_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_WearEquip_Response::kIResultFieldNumber;
const int Zone_WearEquip_Response::kBIsWearFieldNumber;
const int Zone_WearEquip_Response::kIUnitIndexFieldNumber;
const int Zone_WearEquip_Response::kIEquipSubTypeFieldNumber;
const int Zone_WearEquip_Response::kStSlotInfoFieldNumber;
#endif  // !_MSC_VER

Zone_WearEquip_Response::Zone_WearEquip_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_WearEquip_Response::InitAsDefaultInstance() {
  stslotinfo_ = const_cast< ::OneSlotInfo*>(&::OneSlotInfo::default_instance());
}

Zone_WearEquip_Response::Zone_WearEquip_Response(const Zone_WearEquip_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_WearEquip_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  biswear_ = false;
  iunitindex_ = 0;
  iequipsubtype_ = 0;
  stslotinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_WearEquip_Response::~Zone_WearEquip_Response() {
  SharedDtor();
}

void Zone_WearEquip_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stslotinfo_;
  }
}

void Zone_WearEquip_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_WearEquip_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_WearEquip_Response_descriptor_;
}

const Zone_WearEquip_Response& Zone_WearEquip_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_WearEquip_Response* Zone_WearEquip_Response::default_instance_ = NULL;

Zone_WearEquip_Response* Zone_WearEquip_Response::New() const {
  return new Zone_WearEquip_Response;
}

void Zone_WearEquip_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    biswear_ = false;
    iunitindex_ = 0;
    iequipsubtype_ = 0;
    if (has_stslotinfo()) {
      if (stslotinfo_ != NULL) stslotinfo_->::OneSlotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_WearEquip_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsWear;
        break;
      }

      // optional bool bIsWear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsWear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biswear_)));
          set_has_biswear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iUnitIndex;
        break;
      }

      // optional int32 iUnitIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iUnitIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitindex_)));
          set_has_iunitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iEquipSubType;
        break;
      }

      // optional int32 iEquipSubType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iEquipSubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iequipsubtype_)));
          set_has_iequipsubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stSlotInfo;
        break;
      }

      // optional .OneSlotInfo stSlotInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stSlotInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stslotinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_WearEquip_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional bool bIsWear = 2;
  if (has_biswear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->biswear(), output);
  }

  // optional int32 iUnitIndex = 3;
  if (has_iunitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iunitindex(), output);
  }

  // optional int32 iEquipSubType = 4;
  if (has_iequipsubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iequipsubtype(), output);
  }

  // optional .OneSlotInfo stSlotInfo = 5;
  if (has_stslotinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stslotinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_WearEquip_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional bool bIsWear = 2;
  if (has_biswear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->biswear(), target);
  }

  // optional int32 iUnitIndex = 3;
  if (has_iunitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iunitindex(), target);
  }

  // optional int32 iEquipSubType = 4;
  if (has_iequipsubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iequipsubtype(), target);
  }

  // optional .OneSlotInfo stSlotInfo = 5;
  if (has_stslotinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stslotinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_WearEquip_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional bool bIsWear = 2;
    if (has_biswear()) {
      total_size += 1 + 1;
    }

    // optional int32 iUnitIndex = 3;
    if (has_iunitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitindex());
    }

    // optional int32 iEquipSubType = 4;
    if (has_iequipsubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iequipsubtype());
    }

    // optional .OneSlotInfo stSlotInfo = 5;
    if (has_stslotinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stslotinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_WearEquip_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_WearEquip_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_WearEquip_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_WearEquip_Response::MergeFrom(const Zone_WearEquip_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_biswear()) {
      set_biswear(from.biswear());
    }
    if (from.has_iunitindex()) {
      set_iunitindex(from.iunitindex());
    }
    if (from.has_iequipsubtype()) {
      set_iequipsubtype(from.iequipsubtype());
    }
    if (from.has_stslotinfo()) {
      mutable_stslotinfo()->::OneSlotInfo::MergeFrom(from.stslotinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_WearEquip_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_WearEquip_Response::CopyFrom(const Zone_WearEquip_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_WearEquip_Response::IsInitialized() const {

  return true;
}

void Zone_WearEquip_Response::Swap(Zone_WearEquip_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(biswear_, other->biswear_);
    std::swap(iunitindex_, other->iunitindex_);
    std::swap(iequipsubtype_, other->iequipsubtype_);
    std::swap(stslotinfo_, other->stslotinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_WearEquip_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_WearEquip_Response_descriptor_;
  metadata.reflection = Zone_WearEquip_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneRepSlot::kIRepSlotFieldNumber;
const int OneRepSlot::kIChangeChannelFieldNumber;
const int OneRepSlot::kStSlotInfoFieldNumber;
#endif  // !_MSC_VER

OneRepSlot::OneRepSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneRepSlot::InitAsDefaultInstance() {
  stslotinfo_ = const_cast< ::OneSlotInfo*>(&::OneSlotInfo::default_instance());
}

OneRepSlot::OneRepSlot(const OneRepSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneRepSlot::SharedCtor() {
  _cached_size_ = 0;
  irepslot_ = 0;
  ichangechannel_ = 0;
  stslotinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneRepSlot::~OneRepSlot() {
  SharedDtor();
}

void OneRepSlot::SharedDtor() {
  if (this != default_instance_) {
    delete stslotinfo_;
  }
}

void OneRepSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneRepSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneRepSlot_descriptor_;
}

const OneRepSlot& OneRepSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

OneRepSlot* OneRepSlot::default_instance_ = NULL;

OneRepSlot* OneRepSlot::New() const {
  return new OneRepSlot;
}

void OneRepSlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    irepslot_ = 0;
    ichangechannel_ = 0;
    if (has_stslotinfo()) {
      if (stslotinfo_ != NULL) stslotinfo_->::OneSlotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneRepSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iRepSlot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irepslot_)));
          set_has_irepslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stSlotInfo;
        break;
      }

      // optional .OneSlotInfo stSlotInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stSlotInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stslotinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iChangeChannel;
        break;
      }

      // optional int32 iChangeChannel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iChangeChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ichangechannel_)));
          set_has_ichangechannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneRepSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iRepSlot = 1;
  if (has_irepslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->irepslot(), output);
  }

  // optional .OneSlotInfo stSlotInfo = 2;
  if (has_stslotinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stslotinfo(), output);
  }

  // optional int32 iChangeChannel = 3;
  if (has_ichangechannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ichangechannel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneRepSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iRepSlot = 1;
  if (has_irepslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->irepslot(), target);
  }

  // optional .OneSlotInfo stSlotInfo = 2;
  if (has_stslotinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stslotinfo(), target);
  }

  // optional int32 iChangeChannel = 3;
  if (has_ichangechannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ichangechannel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneRepSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iRepSlot = 1;
    if (has_irepslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irepslot());
    }

    // optional int32 iChangeChannel = 3;
    if (has_ichangechannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ichangechannel());
    }

    // optional .OneSlotInfo stSlotInfo = 2;
    if (has_stslotinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stslotinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneRepSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneRepSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneRepSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneRepSlot::MergeFrom(const OneRepSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_irepslot()) {
      set_irepslot(from.irepslot());
    }
    if (from.has_ichangechannel()) {
      set_ichangechannel(from.ichangechannel());
    }
    if (from.has_stslotinfo()) {
      mutable_stslotinfo()->::OneSlotInfo::MergeFrom(from.stslotinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneRepSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneRepSlot::CopyFrom(const OneRepSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneRepSlot::IsInitialized() const {

  return true;
}

void OneRepSlot::Swap(OneRepSlot* other) {
  if (other != this) {
    std::swap(irepslot_, other->irepslot_);
    std::swap(ichangechannel_, other->ichangechannel_);
    std::swap(stslotinfo_, other->stslotinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneRepSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneRepSlot_descriptor_;
  metadata.reflection = OneRepSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_RepChange_Notify::kStItemsFieldNumber;
#endif  // !_MSC_VER

Zone_RepChange_Notify::Zone_RepChange_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_RepChange_Notify::InitAsDefaultInstance() {
}

Zone_RepChange_Notify::Zone_RepChange_Notify(const Zone_RepChange_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_RepChange_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_RepChange_Notify::~Zone_RepChange_Notify() {
  SharedDtor();
}

void Zone_RepChange_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_RepChange_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_RepChange_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_RepChange_Notify_descriptor_;
}

const Zone_RepChange_Notify& Zone_RepChange_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_RepChange_Notify* Zone_RepChange_Notify::default_instance_ = NULL;

Zone_RepChange_Notify* Zone_RepChange_Notify::New() const {
  return new Zone_RepChange_Notify;
}

void Zone_RepChange_Notify::Clear() {
  stitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_RepChange_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneRepSlot stItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_RepChange_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneRepSlot stItems = 1;
  for (int i = 0; i < this->stitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_RepChange_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneRepSlot stItems = 1;
  for (int i = 0; i < this->stitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_RepChange_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .OneRepSlot stItems = 1;
  total_size += 1 * this->stitems_size();
  for (int i = 0; i < this->stitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_RepChange_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_RepChange_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_RepChange_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_RepChange_Notify::MergeFrom(const Zone_RepChange_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stitems_.MergeFrom(from.stitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_RepChange_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_RepChange_Notify::CopyFrom(const Zone_RepChange_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_RepChange_Notify::IsInitialized() const {

  return true;
}

void Zone_RepChange_Notify::Swap(Zone_RepChange_Notify* other) {
  if (other != this) {
    stitems_.Swap(&other->stitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_RepChange_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_RepChange_Notify_descriptor_;
  metadata.reflection = Zone_RepChange_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellItemInfo::kIItemSlotFieldNumber;
const int SellItemInfo::kISellNumFieldNumber;
#endif  // !_MSC_VER

SellItemInfo::SellItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellItemInfo::InitAsDefaultInstance() {
}

SellItemInfo::SellItemInfo(const SellItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellItemInfo::SharedCtor() {
  _cached_size_ = 0;
  iitemslot_ = 0;
  isellnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellItemInfo::~SellItemInfo() {
  SharedDtor();
}

void SellItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellItemInfo_descriptor_;
}

const SellItemInfo& SellItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

SellItemInfo* SellItemInfo::default_instance_ = NULL;

SellItemInfo* SellItemInfo::New() const {
  return new SellItemInfo;
}

void SellItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iitemslot_ = 0;
    isellnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iItemSlot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemslot_)));
          set_has_iitemslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iSellNum;
        break;
      }

      // optional int32 iSellNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSellNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isellnum_)));
          set_has_isellnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iItemSlot = 1;
  if (has_iitemslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iitemslot(), output);
  }

  // optional int32 iSellNum = 2;
  if (has_isellnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isellnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iItemSlot = 1;
  if (has_iitemslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iitemslot(), target);
  }

  // optional int32 iSellNum = 2;
  if (has_isellnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isellnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iItemSlot = 1;
    if (has_iitemslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemslot());
    }

    // optional int32 iSellNum = 2;
    if (has_isellnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isellnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellItemInfo::MergeFrom(const SellItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iitemslot()) {
      set_iitemslot(from.iitemslot());
    }
    if (from.has_isellnum()) {
      set_isellnum(from.isellnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellItemInfo::CopyFrom(const SellItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellItemInfo::IsInitialized() const {

  return true;
}

void SellItemInfo::Swap(SellItemInfo* other) {
  if (other != this) {
    std::swap(iitemslot_, other->iitemslot_);
    std::swap(isellnum_, other->isellnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellItemInfo_descriptor_;
  metadata.reflection = SellItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SellItem_Request::kIShopIDFieldNumber;
const int Zone_SellItem_Request::kStItemsFieldNumber;
#endif  // !_MSC_VER

Zone_SellItem_Request::Zone_SellItem_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SellItem_Request::InitAsDefaultInstance() {
}

Zone_SellItem_Request::Zone_SellItem_Request(const Zone_SellItem_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SellItem_Request::SharedCtor() {
  _cached_size_ = 0;
  ishopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SellItem_Request::~Zone_SellItem_Request() {
  SharedDtor();
}

void Zone_SellItem_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_SellItem_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SellItem_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SellItem_Request_descriptor_;
}

const Zone_SellItem_Request& Zone_SellItem_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_SellItem_Request* Zone_SellItem_Request::default_instance_ = NULL;

Zone_SellItem_Request* Zone_SellItem_Request::New() const {
  return new Zone_SellItem_Request;
}

void Zone_SellItem_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishopid_ = 0;
  }
  stitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SellItem_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iShopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishopid_)));
          set_has_ishopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stItems;
        break;
      }

      // repeated .SellItemInfo stItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SellItem_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iShopID = 1;
  if (has_ishopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ishopid(), output);
  }

  // repeated .SellItemInfo stItems = 2;
  for (int i = 0; i < this->stitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SellItem_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iShopID = 1;
  if (has_ishopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ishopid(), target);
  }

  // repeated .SellItemInfo stItems = 2;
  for (int i = 0; i < this->stitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SellItem_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iShopID = 1;
    if (has_ishopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishopid());
    }

  }
  // repeated .SellItemInfo stItems = 2;
  total_size += 1 * this->stitems_size();
  for (int i = 0; i < this->stitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SellItem_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SellItem_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SellItem_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SellItem_Request::MergeFrom(const Zone_SellItem_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  stitems_.MergeFrom(from.stitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishopid()) {
      set_ishopid(from.ishopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SellItem_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SellItem_Request::CopyFrom(const Zone_SellItem_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SellItem_Request::IsInitialized() const {

  return true;
}

void Zone_SellItem_Request::Swap(Zone_SellItem_Request* other) {
  if (other != this) {
    std::swap(ishopid_, other->ishopid_);
    stitems_.Swap(&other->stitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SellItem_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SellItem_Request_descriptor_;
  metadata.reflection = Zone_SellItem_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SellItem_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_SellItem_Response::Zone_SellItem_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SellItem_Response::InitAsDefaultInstance() {
}

Zone_SellItem_Response::Zone_SellItem_Response(const Zone_SellItem_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SellItem_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SellItem_Response::~Zone_SellItem_Response() {
  SharedDtor();
}

void Zone_SellItem_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_SellItem_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SellItem_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SellItem_Response_descriptor_;
}

const Zone_SellItem_Response& Zone_SellItem_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_SellItem_Response* Zone_SellItem_Response::default_instance_ = NULL;

Zone_SellItem_Response* Zone_SellItem_Response::New() const {
  return new Zone_SellItem_Response;
}

void Zone_SellItem_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SellItem_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SellItem_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SellItem_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SellItem_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SellItem_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SellItem_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SellItem_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SellItem_Response::MergeFrom(const Zone_SellItem_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SellItem_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SellItem_Response::CopyFrom(const Zone_SellItem_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SellItem_Response::IsInitialized() const {

  return true;
}

void Zone_SellItem_Response::Swap(Zone_SellItem_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SellItem_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SellItem_Response_descriptor_;
  metadata.reflection = Zone_SellItem_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserResourceChange::kIResTypeFieldNumber;
const int UserResourceChange::kINewResNumFieldNumber;
#endif  // !_MSC_VER

UserResourceChange::UserResourceChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserResourceChange::InitAsDefaultInstance() {
}

UserResourceChange::UserResourceChange(const UserResourceChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserResourceChange::SharedCtor() {
  _cached_size_ = 0;
  irestype_ = 0;
  inewresnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserResourceChange::~UserResourceChange() {
  SharedDtor();
}

void UserResourceChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserResourceChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserResourceChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserResourceChange_descriptor_;
}

const UserResourceChange& UserResourceChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

UserResourceChange* UserResourceChange::default_instance_ = NULL;

UserResourceChange* UserResourceChange::New() const {
  return new UserResourceChange;
}

void UserResourceChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    irestype_ = 0;
    inewresnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserResourceChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irestype_)));
          set_has_irestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNewResNum;
        break;
      }

      // optional int32 iNewResNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNewResNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inewresnum_)));
          set_has_inewresnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserResourceChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResType = 1;
  if (has_irestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->irestype(), output);
  }

  // optional int32 iNewResNum = 2;
  if (has_inewresnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inewresnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserResourceChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResType = 1;
  if (has_irestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->irestype(), target);
  }

  // optional int32 iNewResNum = 2;
  if (has_inewresnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inewresnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserResourceChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResType = 1;
    if (has_irestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irestype());
    }

    // optional int32 iNewResNum = 2;
    if (has_inewresnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inewresnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserResourceChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserResourceChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserResourceChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserResourceChange::MergeFrom(const UserResourceChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_irestype()) {
      set_irestype(from.irestype());
    }
    if (from.has_inewresnum()) {
      set_inewresnum(from.inewresnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserResourceChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserResourceChange::CopyFrom(const UserResourceChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResourceChange::IsInitialized() const {

  return true;
}

void UserResourceChange::Swap(UserResourceChange* other) {
  if (other != this) {
    std::swap(irestype_, other->irestype_);
    std::swap(inewresnum_, other->inewresnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserResourceChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserResourceChange_descriptor_;
  metadata.reflection = UserResourceChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ResourceChange_Notify::kStChangeInfosFieldNumber;
#endif  // !_MSC_VER

Zone_ResourceChange_Notify::Zone_ResourceChange_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ResourceChange_Notify::InitAsDefaultInstance() {
}

Zone_ResourceChange_Notify::Zone_ResourceChange_Notify(const Zone_ResourceChange_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ResourceChange_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ResourceChange_Notify::~Zone_ResourceChange_Notify() {
  SharedDtor();
}

void Zone_ResourceChange_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ResourceChange_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ResourceChange_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ResourceChange_Notify_descriptor_;
}

const Zone_ResourceChange_Notify& Zone_ResourceChange_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_ResourceChange_Notify* Zone_ResourceChange_Notify::default_instance_ = NULL;

Zone_ResourceChange_Notify* Zone_ResourceChange_Notify::New() const {
  return new Zone_ResourceChange_Notify;
}

void Zone_ResourceChange_Notify::Clear() {
  stchangeinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ResourceChange_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserResourceChange stChangeInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stChangeInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stchangeinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stChangeInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ResourceChange_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .UserResourceChange stChangeInfos = 1;
  for (int i = 0; i < this->stchangeinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stchangeinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ResourceChange_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .UserResourceChange stChangeInfos = 1;
  for (int i = 0; i < this->stchangeinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stchangeinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ResourceChange_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .UserResourceChange stChangeInfos = 1;
  total_size += 1 * this->stchangeinfos_size();
  for (int i = 0; i < this->stchangeinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stchangeinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ResourceChange_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ResourceChange_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ResourceChange_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ResourceChange_Notify::MergeFrom(const Zone_ResourceChange_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stchangeinfos_.MergeFrom(from.stchangeinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ResourceChange_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ResourceChange_Notify::CopyFrom(const Zone_ResourceChange_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ResourceChange_Notify::IsInitialized() const {

  return true;
}

void Zone_ResourceChange_Notify::Swap(Zone_ResourceChange_Notify* other) {
  if (other != this) {
    stchangeinfos_.Swap(&other->stchangeinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ResourceChange_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ResourceChange_Notify_descriptor_;
  metadata.reflection = Zone_ResourceChange_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_Chat_Request::kIChannelFieldNumber;
const int Zone_Chat_Request::kStTargetRoleIDFieldNumber;
const int Zone_Chat_Request::kStrMessageFieldNumber;
#endif  // !_MSC_VER

Zone_Chat_Request::Zone_Chat_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_Chat_Request::InitAsDefaultInstance() {
  sttargetroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

Zone_Chat_Request::Zone_Chat_Request(const Zone_Chat_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_Chat_Request::SharedCtor() {
  _cached_size_ = 0;
  ichannel_ = 0;
  sttargetroleid_ = NULL;
  strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_Chat_Request::~Zone_Chat_Request() {
  SharedDtor();
}

void Zone_Chat_Request::SharedDtor() {
  if (strmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete strmessage_;
  }
  if (this != default_instance_) {
    delete sttargetroleid_;
  }
}

void Zone_Chat_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_Chat_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_Chat_Request_descriptor_;
}

const Zone_Chat_Request& Zone_Chat_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_Chat_Request* Zone_Chat_Request::default_instance_ = NULL;

Zone_Chat_Request* Zone_Chat_Request::New() const {
  return new Zone_Chat_Request;
}

void Zone_Chat_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ichannel_ = 0;
    if (has_sttargetroleid()) {
      if (sttargetroleid_ != NULL) sttargetroleid_->::RoleID::Clear();
    }
    if (has_strmessage()) {
      if (strmessage_ != &::google::protobuf::internal::kEmptyString) {
        strmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_Chat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatChannelType_IsValid(value)) {
            set_ichannel(static_cast< ::ChatChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stTargetRoleID;
        break;
      }

      // optional .RoleID stTargetRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stTargetRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttargetroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strMessage;
        break;
      }

      // optional string strMessage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strmessage().data(), this->strmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_Chat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
  if (has_ichannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ichannel(), output);
  }

  // optional .RoleID stTargetRoleID = 2;
  if (has_sttargetroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sttargetroleid(), output);
  }

  // optional string strMessage = 3;
  if (has_strmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmessage().data(), this->strmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_Chat_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
  if (has_ichannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ichannel(), target);
  }

  // optional .RoleID stTargetRoleID = 2;
  if (has_sttargetroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sttargetroleid(), target);
  }

  // optional string strMessage = 3;
  if (has_strmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmessage().data(), this->strmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_Chat_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
    if (has_ichannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ichannel());
    }

    // optional .RoleID stTargetRoleID = 2;
    if (has_sttargetroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sttargetroleid());
    }

    // optional string strMessage = 3;
    if (has_strmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_Chat_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_Chat_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_Chat_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_Chat_Request::MergeFrom(const Zone_Chat_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ichannel()) {
      set_ichannel(from.ichannel());
    }
    if (from.has_sttargetroleid()) {
      mutable_sttargetroleid()->::RoleID::MergeFrom(from.sttargetroleid());
    }
    if (from.has_strmessage()) {
      set_strmessage(from.strmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_Chat_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_Chat_Request::CopyFrom(const Zone_Chat_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_Chat_Request::IsInitialized() const {

  return true;
}

void Zone_Chat_Request::Swap(Zone_Chat_Request* other) {
  if (other != this) {
    std::swap(ichannel_, other->ichannel_);
    std::swap(sttargetroleid_, other->sttargetroleid_);
    std::swap(strmessage_, other->strmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_Chat_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_Chat_Request_descriptor_;
  metadata.reflection = Zone_Chat_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_Chat_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_Chat_Response::Zone_Chat_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_Chat_Response::InitAsDefaultInstance() {
}

Zone_Chat_Response::Zone_Chat_Response(const Zone_Chat_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_Chat_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_Chat_Response::~Zone_Chat_Response() {
  SharedDtor();
}

void Zone_Chat_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_Chat_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_Chat_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_Chat_Response_descriptor_;
}

const Zone_Chat_Response& Zone_Chat_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_Chat_Response* Zone_Chat_Response::default_instance_ = NULL;

Zone_Chat_Response* Zone_Chat_Response::New() const {
  return new Zone_Chat_Response;
}

void Zone_Chat_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_Chat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_Chat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_Chat_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_Chat_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_Chat_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_Chat_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_Chat_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_Chat_Response::MergeFrom(const Zone_Chat_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_Chat_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_Chat_Response::CopyFrom(const Zone_Chat_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_Chat_Response::IsInitialized() const {

  return true;
}

void Zone_Chat_Response::Swap(Zone_Chat_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_Chat_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_Chat_Response_descriptor_;
  metadata.reflection = Zone_Chat_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FightAttr_Notify::kIUnitConfigIDFieldNumber;
const int Zone_FightAttr_Notify::kIFightUnitAttrFieldNumber;
#endif  // !_MSC_VER

Zone_FightAttr_Notify::Zone_FightAttr_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FightAttr_Notify::InitAsDefaultInstance() {
}

Zone_FightAttr_Notify::Zone_FightAttr_Notify(const Zone_FightAttr_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FightAttr_Notify::SharedCtor() {
  _cached_size_ = 0;
  iunitconfigid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FightAttr_Notify::~Zone_FightAttr_Notify() {
  SharedDtor();
}

void Zone_FightAttr_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_FightAttr_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FightAttr_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FightAttr_Notify_descriptor_;
}

const Zone_FightAttr_Notify& Zone_FightAttr_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eZone_2eproto();
  return *default_instance_;
}

Zone_FightAttr_Notify* Zone_FightAttr_Notify::default_instance_ = NULL;

Zone_FightAttr_Notify* Zone_FightAttr_Notify::New() const {
  return new Zone_FightAttr_Notify;
}

void Zone_FightAttr_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iunitconfigid_ = 0;
  }
  ifightunitattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FightAttr_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iUnitConfigID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitconfigid_)));
          set_has_iunitconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFightUnitAttr;
        break;
      }

      // repeated int32 iFightUnitAttr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFightUnitAttr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ifightunitattr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ifightunitattr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFightUnitAttr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FightAttr_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iUnitConfigID = 1;
  if (has_iunitconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iunitconfigid(), output);
  }

  // repeated int32 iFightUnitAttr = 2;
  for (int i = 0; i < this->ifightunitattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ifightunitattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FightAttr_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iUnitConfigID = 1;
  if (has_iunitconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iunitconfigid(), target);
  }

  // repeated int32 iFightUnitAttr = 2;
  for (int i = 0; i < this->ifightunitattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ifightunitattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FightAttr_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iUnitConfigID = 1;
    if (has_iunitconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitconfigid());
    }

  }
  // repeated int32 iFightUnitAttr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ifightunitattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ifightunitattr(i));
    }
    total_size += 1 * this->ifightunitattr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FightAttr_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FightAttr_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FightAttr_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FightAttr_Notify::MergeFrom(const Zone_FightAttr_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  ifightunitattr_.MergeFrom(from.ifightunitattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iunitconfigid()) {
      set_iunitconfigid(from.iunitconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FightAttr_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FightAttr_Notify::CopyFrom(const Zone_FightAttr_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FightAttr_Notify::IsInitialized() const {

  return true;
}

void Zone_FightAttr_Notify::Swap(Zone_FightAttr_Notify* other) {
  if (other != this) {
    std::swap(iunitconfigid_, other->iunitconfigid_);
    ifightunitattr_.Swap(&other->ifightunitattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FightAttr_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FightAttr_Notify_descriptor_;
  metadata.reflection = Zone_FightAttr_Notify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
