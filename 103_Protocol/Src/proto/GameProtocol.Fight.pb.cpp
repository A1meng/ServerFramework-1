// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol.Fight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol.Fight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UnitPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_DoCombat_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_DoCombat_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_DoCombat_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_DoCombat_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatCamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatCamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_Battlefield_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_Battlefield_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_CombatMove_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_CombatMove_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_CombatMove_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_CombatMove_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_CombatAction_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_CombatAction_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_CombatAction_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_CombatAction_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_CombatMove_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_CombatMove_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_CombatAction_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_CombatAction_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FinCombat_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FinCombat_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UnitDirective_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UnitDirective_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UpdatePartnerAI_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UpdatePartnerAI_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UpdatePartnerAI_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UpdatePartnerAI_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveOneBuffEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveOneBuffEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveBuffEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveBuffEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneAddBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneAddBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_CombatAddBuff_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_CombatAddBuff_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_DoBuffEffect_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_DoBuffEffect_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_RemoveBuff_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_RemoveBuff_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_AddCombatUnit_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_AddCombatUnit_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_KillCombatUnit_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_KillCombatUnit_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_AddCombatTrap_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_AddCombatTrap_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_TriggerCombatTrap_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_TriggerCombatTrap_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_DeleteCombatTrap_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_DeleteCombatTrap_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UnitAttrChange_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UnitAttrChange_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_StartPVPCombat_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_StartPVPCombat_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_StartPVPCombat_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_StartPVPCombat_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_StartPVPCombat_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_StartPVPCombat_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_AcceptPVPCombat_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_AcceptPVPCombat_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_AcceptPVPCombat_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_AcceptPVPCombat_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_RejectPVPCombat_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_RejectPVPCombat_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ChangeFightState_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ChangeFightState_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneCombatUnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneCombatUnitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatForm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatForm_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SetCombatForm_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SetCombatForm_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SetCombatForm_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SetCombatForm_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SetCombatForm_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SetCombatForm_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_DecreaseUnitBuff_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_DecreaseUnitBuff_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneActionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneActionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ActionUnitInfo_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ActionUnitInfo_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCDInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCDInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SkillCDRound_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SkillCDRound_Notify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CombatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CombatUnitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnitDirectiveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionEffectStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* COMBATUNITSTATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CombatMoveType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_2eFight_2eproto() {
  protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol.Fight.proto");
  GOOGLE_CHECK(file != NULL);
  UnitPosition_descriptor_ = file->message_type(0);
  static const int UnitPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPosition, iposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPosition, iposy_),
  };
  UnitPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitPosition_descriptor_,
      UnitPosition::default_instance_,
      UnitPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitPosition));
  UnitPath_descriptor_ = file->message_type(1);
  static const int UnitPath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPath, stposes_),
  };
  UnitPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitPath_descriptor_,
      UnitPath::default_instance_,
      UnitPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitPath));
  Zone_DoCombat_Request_descriptor_ = file->message_type(2);
  static const int Zone_DoCombat_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoCombat_Request, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoCombat_Request, ilevelid_),
  };
  Zone_DoCombat_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_DoCombat_Request_descriptor_,
      Zone_DoCombat_Request::default_instance_,
      Zone_DoCombat_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoCombat_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoCombat_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_DoCombat_Request));
  Zone_DoCombat_Response_descriptor_ = file->message_type(3);
  static const int Zone_DoCombat_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoCombat_Response, iresult_),
  };
  Zone_DoCombat_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_DoCombat_Response_descriptor_,
      Zone_DoCombat_Response::default_instance_,
      Zone_DoCombat_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoCombat_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoCombat_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_DoCombat_Response));
  CombatUnit_descriptor_ = file->message_type(4);
  static const int CombatUnit_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, iunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, iconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, stpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, idirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, iattributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, inormalskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, stitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, iunitaiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, icamp_),
  };
  CombatUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatUnit_descriptor_,
      CombatUnit::default_instance_,
      CombatUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatUnit));
  CombatCamp_descriptor_ = file->message_type(5);
  static const int CombatCamp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatCamp, uiuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatCamp, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatCamp, stunits_),
  };
  CombatCamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatCamp_descriptor_,
      CombatCamp::default_instance_,
      CombatCamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatCamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatCamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatCamp));
  Zone_Battlefield_Notify_descriptor_ = file->message_type(6);
  static const int Zone_Battlefield_Notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Battlefield_Notify, icrossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Battlefield_Notify, stcampactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Battlefield_Notify, stcamppassive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Battlefield_Notify, stactiveposes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Battlefield_Notify, stpassiveposes_),
  };
  Zone_Battlefield_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_Battlefield_Notify_descriptor_,
      Zone_Battlefield_Notify::default_instance_,
      Zone_Battlefield_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Battlefield_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Battlefield_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_Battlefield_Notify));
  Zone_CombatMove_Request_descriptor_ = file->message_type(7);
  static const int Zone_CombatMove_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Request, stpath_),
  };
  Zone_CombatMove_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_CombatMove_Request_descriptor_,
      Zone_CombatMove_Request::default_instance_,
      Zone_CombatMove_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_CombatMove_Request));
  Zone_CombatMove_Response_descriptor_ = file->message_type(8);
  static const int Zone_CombatMove_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Response, iresult_),
  };
  Zone_CombatMove_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_CombatMove_Response_descriptor_,
      Zone_CombatMove_Response::default_instance_,
      Zone_CombatMove_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_CombatMove_Response));
  Zone_CombatAction_Request_descriptor_ = file->message_type(9);
  static const int Zone_CombatAction_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Request, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Request, icastskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Request, iitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Request, stpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Request, idirection_),
  };
  Zone_CombatAction_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_CombatAction_Request_descriptor_,
      Zone_CombatAction_Request::default_instance_,
      Zone_CombatAction_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_CombatAction_Request));
  Zone_CombatAction_Response_descriptor_ = file->message_type(10);
  static const int Zone_CombatAction_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Response, etype_),
  };
  Zone_CombatAction_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_CombatAction_Response_descriptor_,
      Zone_CombatAction_Response::default_instance_,
      Zone_CombatAction_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_CombatAction_Response));
  Zone_CombatMove_Notify_descriptor_ = file->message_type(11);
  static const int Zone_CombatMove_Notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Notify, iunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Notify, stpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Notify, idirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Notify, imovetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Notify, ianimtype_),
  };
  Zone_CombatMove_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_CombatMove_Notify_descriptor_,
      Zone_CombatMove_Notify::default_instance_,
      Zone_CombatMove_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatMove_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_CombatMove_Notify));
  ActionTarget_descriptor_ = file->message_type(12);
  static const int ActionTarget_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTarget, itargetunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTarget, bisstatset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTarget, icastattreffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTarget, iattreffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTarget, stcastpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTarget, sttargetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTarget, ispecialfunctype_),
  };
  ActionTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionTarget_descriptor_,
      ActionTarget::default_instance_,
      ActionTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionTarget));
  Zone_CombatAction_Notify_descriptor_ = file->message_type(13);
  static const int Zone_CombatAction_Notify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, iactionunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, sttargetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, iuseskilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, icosttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, icostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, icastskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, iitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, sttargets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, inewtraphp_),
  };
  Zone_CombatAction_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_CombatAction_Notify_descriptor_,
      Zone_CombatAction_Notify::default_instance_,
      Zone_CombatAction_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAction_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_CombatAction_Notify));
  OneRewardInfo_descriptor_ = file->message_type(14);
  static const int OneRewardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRewardInfo, irewardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRewardInfo, iitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRewardInfo, irestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRewardInfo, idropnum_),
  };
  OneRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneRewardInfo_descriptor_,
      OneRewardInfo::default_instance_,
      OneRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneRewardInfo));
  CombatReward_descriptor_ = file->message_type(15);
  static const int CombatReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReward, strewardinfo_),
  };
  CombatReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatReward_descriptor_,
      CombatReward::default_instance_,
      CombatReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatReward));
  Zone_FinCombat_Notify_descriptor_ = file->message_type(16);
  static const int Zone_FinCombat_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinCombat_Notify, bisactivewin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinCombat_Notify, streward_),
  };
  Zone_FinCombat_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FinCombat_Notify_descriptor_,
      Zone_FinCombat_Notify::default_instance_,
      Zone_FinCombat_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinCombat_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinCombat_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FinCombat_Notify));
  Zone_UnitDirective_Notify_descriptor_ = file->message_type(17);
  static const int Zone_UnitDirective_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UnitDirective_Notify, idirective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UnitDirective_Notify, icombatunitid_),
  };
  Zone_UnitDirective_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UnitDirective_Notify_descriptor_,
      Zone_UnitDirective_Notify::default_instance_,
      Zone_UnitDirective_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UnitDirective_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UnitDirective_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UnitDirective_Notify));
  Zone_UpdatePartnerAI_Request_descriptor_ = file->message_type(18);
  static const int Zone_UpdatePartnerAI_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdatePartnerAI_Request, ipartneraiid_),
  };
  Zone_UpdatePartnerAI_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UpdatePartnerAI_Request_descriptor_,
      Zone_UpdatePartnerAI_Request::default_instance_,
      Zone_UpdatePartnerAI_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdatePartnerAI_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdatePartnerAI_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UpdatePartnerAI_Request));
  Zone_UpdatePartnerAI_Response_descriptor_ = file->message_type(19);
  static const int Zone_UpdatePartnerAI_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdatePartnerAI_Response, iresult_),
  };
  Zone_UpdatePartnerAI_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UpdatePartnerAI_Response_descriptor_,
      Zone_UpdatePartnerAI_Response::default_instance_,
      Zone_UpdatePartnerAI_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdatePartnerAI_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdatePartnerAI_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UpdatePartnerAI_Response));
  BuffEffect_descriptor_ = file->message_type(20);
  static const int BuffEffect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, ibuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, itargetunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, iattrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, iattrchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, staddbuff_),
  };
  BuffEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffEffect_descriptor_,
      BuffEffect::default_instance_,
      BuffEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffEffect));
  RemoveOneBuffEffect_descriptor_ = file->message_type(21);
  static const int RemoveOneBuffEffect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveOneBuffEffect, ibuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveOneBuffEffect, iattrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveOneBuffEffect, iattrchange_),
  };
  RemoveOneBuffEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveOneBuffEffect_descriptor_,
      RemoveOneBuffEffect::default_instance_,
      RemoveOneBuffEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveOneBuffEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveOneBuffEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveOneBuffEffect));
  RemoveBuffEffect_descriptor_ = file->message_type(22);
  static const int RemoveBuffEffect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBuffEffect, stremoveones_),
  };
  RemoveBuffEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveBuffEffect_descriptor_,
      RemoveBuffEffect::default_instance_,
      RemoveBuffEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBuffEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveBuffEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveBuffEffect));
  AddBuffInfo_descriptor_ = file->message_type(23);
  static const int AddBuffInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuffInfo, ibuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuffInfo, stremovebuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuffInfo, steffects_),
  };
  AddBuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBuffInfo_descriptor_,
      AddBuffInfo::default_instance_,
      AddBuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBuffInfo));
  OneAddBuff_descriptor_ = file->message_type(24);
  static const int OneAddBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneAddBuff, itargetunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneAddBuff, stbuffinfo_),
  };
  OneAddBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneAddBuff_descriptor_,
      OneAddBuff::default_instance_,
      OneAddBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneAddBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneAddBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneAddBuff));
  Zone_CombatAddBuff_Notify_descriptor_ = file->message_type(25);
  static const int Zone_CombatAddBuff_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAddBuff_Notify, icastunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAddBuff_Notify, staddbuffs_),
  };
  Zone_CombatAddBuff_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_CombatAddBuff_Notify_descriptor_,
      Zone_CombatAddBuff_Notify::default_instance_,
      Zone_CombatAddBuff_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAddBuff_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_CombatAddBuff_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_CombatAddBuff_Notify));
  Zone_DoBuffEffect_Notify_descriptor_ = file->message_type(26);
  static const int Zone_DoBuffEffect_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoBuffEffect_Notify, itriggerunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoBuffEffect_Notify, steffects_),
  };
  Zone_DoBuffEffect_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_DoBuffEffect_Notify_descriptor_,
      Zone_DoBuffEffect_Notify::default_instance_,
      Zone_DoBuffEffect_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoBuffEffect_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoBuffEffect_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_DoBuffEffect_Notify));
  Zone_RemoveBuff_Notify_descriptor_ = file->message_type(27);
  static const int Zone_RemoveBuff_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RemoveBuff_Notify, itargetunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RemoveBuff_Notify, steffects_),
  };
  Zone_RemoveBuff_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_RemoveBuff_Notify_descriptor_,
      Zone_RemoveBuff_Notify::default_instance_,
      Zone_RemoveBuff_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RemoveBuff_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RemoveBuff_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_RemoveBuff_Notify));
  Zone_AddCombatUnit_Notify_descriptor_ = file->message_type(28);
  static const int Zone_AddCombatUnit_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatUnit_Notify, icamptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatUnit_Notify, stunit_),
  };
  Zone_AddCombatUnit_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_AddCombatUnit_Notify_descriptor_,
      Zone_AddCombatUnit_Notify::default_instance_,
      Zone_AddCombatUnit_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatUnit_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatUnit_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_AddCombatUnit_Notify));
  Zone_KillCombatUnit_Notify_descriptor_ = file->message_type(29);
  static const int Zone_KillCombatUnit_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_KillCombatUnit_Notify, iunitid_),
  };
  Zone_KillCombatUnit_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_KillCombatUnit_Notify_descriptor_,
      Zone_KillCombatUnit_Notify::default_instance_,
      Zone_KillCombatUnit_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_KillCombatUnit_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_KillCombatUnit_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_KillCombatUnit_Notify));
  Zone_AddCombatTrap_Notify_descriptor_ = file->message_type(30);
  static const int Zone_AddCombatTrap_Notify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatTrap_Notify, iconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatTrap_Notify, itrapobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatTrap_Notify, icamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatTrap_Notify, stpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatTrap_Notify, idirection_),
  };
  Zone_AddCombatTrap_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_AddCombatTrap_Notify_descriptor_,
      Zone_AddCombatTrap_Notify::default_instance_,
      Zone_AddCombatTrap_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatTrap_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddCombatTrap_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_AddCombatTrap_Notify));
  Zone_TriggerCombatTrap_Notify_descriptor_ = file->message_type(31);
  static const int Zone_TriggerCombatTrap_Notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_TriggerCombatTrap_Notify, itrapobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_TriggerCombatTrap_Notify, itriggerobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_TriggerCombatTrap_Notify, itriggertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_TriggerCombatTrap_Notify, iinterrupttype_),
  };
  Zone_TriggerCombatTrap_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_TriggerCombatTrap_Notify_descriptor_,
      Zone_TriggerCombatTrap_Notify::default_instance_,
      Zone_TriggerCombatTrap_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_TriggerCombatTrap_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_TriggerCombatTrap_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_TriggerCombatTrap_Notify));
  Zone_DeleteCombatTrap_Notify_descriptor_ = file->message_type(32);
  static const int Zone_DeleteCombatTrap_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DeleteCombatTrap_Notify, itrapobjid_),
  };
  Zone_DeleteCombatTrap_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_DeleteCombatTrap_Notify_descriptor_,
      Zone_DeleteCombatTrap_Notify::default_instance_,
      Zone_DeleteCombatTrap_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DeleteCombatTrap_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DeleteCombatTrap_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_DeleteCombatTrap_Notify));
  Zone_UnitAttrChange_Notify_descriptor_ = file->message_type(33);
  static const int Zone_UnitAttrChange_Notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UnitAttrChange_Notify, iunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UnitAttrChange_Notify, iattrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UnitAttrChange_Notify, iattrchange_),
  };
  Zone_UnitAttrChange_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UnitAttrChange_Notify_descriptor_,
      Zone_UnitAttrChange_Notify::default_instance_,
      Zone_UnitAttrChange_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UnitAttrChange_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UnitAttrChange_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UnitAttrChange_Notify));
  Zone_StartPVPCombat_Request_descriptor_ = file->message_type(34);
  static const int Zone_StartPVPCombat_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Request, uipassiveuin_),
  };
  Zone_StartPVPCombat_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_StartPVPCombat_Request_descriptor_,
      Zone_StartPVPCombat_Request::default_instance_,
      Zone_StartPVPCombat_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_StartPVPCombat_Request));
  Zone_StartPVPCombat_Response_descriptor_ = file->message_type(35);
  static const int Zone_StartPVPCombat_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Response, iresult_),
  };
  Zone_StartPVPCombat_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_StartPVPCombat_Response_descriptor_,
      Zone_StartPVPCombat_Response::default_instance_,
      Zone_StartPVPCombat_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_StartPVPCombat_Response));
  Zone_StartPVPCombat_Notify_descriptor_ = file->message_type(36);
  static const int Zone_StartPVPCombat_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Notify, uiactiveuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Notify, stractivename_),
  };
  Zone_StartPVPCombat_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_StartPVPCombat_Notify_descriptor_,
      Zone_StartPVPCombat_Notify::default_instance_,
      Zone_StartPVPCombat_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_StartPVPCombat_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_StartPVPCombat_Notify));
  Zone_AcceptPVPCombat_Request_descriptor_ = file->message_type(37);
  static const int Zone_AcceptPVPCombat_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AcceptPVPCombat_Request, uiactiveuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AcceptPVPCombat_Request, bisaccept_),
  };
  Zone_AcceptPVPCombat_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_AcceptPVPCombat_Request_descriptor_,
      Zone_AcceptPVPCombat_Request::default_instance_,
      Zone_AcceptPVPCombat_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AcceptPVPCombat_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AcceptPVPCombat_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_AcceptPVPCombat_Request));
  Zone_AcceptPVPCombat_Response_descriptor_ = file->message_type(38);
  static const int Zone_AcceptPVPCombat_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AcceptPVPCombat_Response, iresult_),
  };
  Zone_AcceptPVPCombat_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_AcceptPVPCombat_Response_descriptor_,
      Zone_AcceptPVPCombat_Response::default_instance_,
      Zone_AcceptPVPCombat_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AcceptPVPCombat_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AcceptPVPCombat_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_AcceptPVPCombat_Response));
  Zone_RejectPVPCombat_Notify_descriptor_ = file->message_type(39);
  static const int Zone_RejectPVPCombat_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RejectPVPCombat_Notify, ipassiveuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RejectPVPCombat_Notify, strpassivename_),
  };
  Zone_RejectPVPCombat_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_RejectPVPCombat_Notify_descriptor_,
      Zone_RejectPVPCombat_Notify::default_instance_,
      Zone_RejectPVPCombat_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RejectPVPCombat_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RejectPVPCombat_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_RejectPVPCombat_Notify));
  Zone_ChangeFightState_Notify_descriptor_ = file->message_type(40);
  static const int Zone_ChangeFightState_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeFightState_Notify, iunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeFightState_Notify, bisinfight_),
  };
  Zone_ChangeFightState_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ChangeFightState_Notify_descriptor_,
      Zone_ChangeFightState_Notify::default_instance_,
      Zone_ChangeFightState_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeFightState_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeFightState_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ChangeFightState_Notify));
  OneCombatUnitInfo_descriptor_ = file->message_type(41);
  static const int OneCombatUnitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCombatUnitInfo, iunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCombatUnitInfo, stpos_),
  };
  OneCombatUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneCombatUnitInfo_descriptor_,
      OneCombatUnitInfo::default_instance_,
      OneCombatUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCombatUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneCombatUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneCombatUnitInfo));
  CombatForm_descriptor_ = file->message_type(42);
  static const int CombatForm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatForm, stunitinfos_),
  };
  CombatForm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatForm_descriptor_,
      CombatForm::default_instance_,
      CombatForm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatForm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatForm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatForm));
  Zone_SetCombatForm_Request_descriptor_ = file->message_type(43);
  static const int Zone_SetCombatForm_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Request, stform_),
  };
  Zone_SetCombatForm_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SetCombatForm_Request_descriptor_,
      Zone_SetCombatForm_Request::default_instance_,
      Zone_SetCombatForm_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SetCombatForm_Request));
  Zone_SetCombatForm_Response_descriptor_ = file->message_type(44);
  static const int Zone_SetCombatForm_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Response, iresult_),
  };
  Zone_SetCombatForm_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SetCombatForm_Response_descriptor_,
      Zone_SetCombatForm_Response::default_instance_,
      Zone_SetCombatForm_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SetCombatForm_Response));
  Zone_SetCombatForm_Notify_descriptor_ = file->message_type(45);
  static const int Zone_SetCombatForm_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Notify, stactiveform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Notify, stpassiveform_),
  };
  Zone_SetCombatForm_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SetCombatForm_Notify_descriptor_,
      Zone_SetCombatForm_Notify::default_instance_,
      Zone_SetCombatForm_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetCombatForm_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SetCombatForm_Notify));
  Zone_DecreaseUnitBuff_Notify_descriptor_ = file->message_type(46);
  static const int Zone_DecreaseUnitBuff_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DecreaseUnitBuff_Notify, icombatunitid_),
  };
  Zone_DecreaseUnitBuff_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_DecreaseUnitBuff_Notify_descriptor_,
      Zone_DecreaseUnitBuff_Notify::default_instance_,
      Zone_DecreaseUnitBuff_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DecreaseUnitBuff_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DecreaseUnitBuff_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_DecreaseUnitBuff_Notify));
  OneActionInfo_descriptor_ = file->message_type(47);
  static const int OneActionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneActionInfo, iunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneActionInfo, ixiangong_),
  };
  OneActionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneActionInfo_descriptor_,
      OneActionInfo::default_instance_,
      OneActionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneActionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneActionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneActionInfo));
  Zone_ActionUnitInfo_Notify_descriptor_ = file->message_type(48);
  static const int Zone_ActionUnitInfo_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ActionUnitInfo_Notify, stinactioninfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ActionUnitInfo_Notify, stactiondoneinfos_),
  };
  Zone_ActionUnitInfo_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ActionUnitInfo_Notify_descriptor_,
      Zone_ActionUnitInfo_Notify::default_instance_,
      Zone_ActionUnitInfo_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ActionUnitInfo_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ActionUnitInfo_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ActionUnitInfo_Notify));
  SkillCDInfo_descriptor_ = file->message_type(49);
  static const int SkillCDInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCDInfo, iskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCDInfo, icdround_),
  };
  SkillCDInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCDInfo_descriptor_,
      SkillCDInfo::default_instance_,
      SkillCDInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCDInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCDInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCDInfo));
  Zone_SkillCDRound_Notify_descriptor_ = file->message_type(50);
  static const int Zone_SkillCDRound_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SkillCDRound_Notify, iunitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SkillCDRound_Notify, stcdinfos_),
  };
  Zone_SkillCDRound_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SkillCDRound_Notify_descriptor_,
      Zone_SkillCDRound_Notify::default_instance_,
      Zone_SkillCDRound_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SkillCDRound_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SkillCDRound_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SkillCDRound_Notify));
  CombatType_descriptor_ = file->enum_type(0);
  CombatUnitType_descriptor_ = file->enum_type(1);
  UnitDirectiveType_descriptor_ = file->enum_type(2);
  ActionType_descriptor_ = file->enum_type(3);
  ActionEffectStatus_descriptor_ = file->enum_type(4);
  COMBATUNITSTATUS_descriptor_ = file->enum_type(5);
  CombatMoveType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_2eFight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitPosition_descriptor_, &UnitPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitPath_descriptor_, &UnitPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_DoCombat_Request_descriptor_, &Zone_DoCombat_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_DoCombat_Response_descriptor_, &Zone_DoCombat_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatUnit_descriptor_, &CombatUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatCamp_descriptor_, &CombatCamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_Battlefield_Notify_descriptor_, &Zone_Battlefield_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_CombatMove_Request_descriptor_, &Zone_CombatMove_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_CombatMove_Response_descriptor_, &Zone_CombatMove_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_CombatAction_Request_descriptor_, &Zone_CombatAction_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_CombatAction_Response_descriptor_, &Zone_CombatAction_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_CombatMove_Notify_descriptor_, &Zone_CombatMove_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionTarget_descriptor_, &ActionTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_CombatAction_Notify_descriptor_, &Zone_CombatAction_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneRewardInfo_descriptor_, &OneRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatReward_descriptor_, &CombatReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FinCombat_Notify_descriptor_, &Zone_FinCombat_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UnitDirective_Notify_descriptor_, &Zone_UnitDirective_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UpdatePartnerAI_Request_descriptor_, &Zone_UpdatePartnerAI_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UpdatePartnerAI_Response_descriptor_, &Zone_UpdatePartnerAI_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffEffect_descriptor_, &BuffEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveOneBuffEffect_descriptor_, &RemoveOneBuffEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveBuffEffect_descriptor_, &RemoveBuffEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBuffInfo_descriptor_, &AddBuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneAddBuff_descriptor_, &OneAddBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_CombatAddBuff_Notify_descriptor_, &Zone_CombatAddBuff_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_DoBuffEffect_Notify_descriptor_, &Zone_DoBuffEffect_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_RemoveBuff_Notify_descriptor_, &Zone_RemoveBuff_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_AddCombatUnit_Notify_descriptor_, &Zone_AddCombatUnit_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_KillCombatUnit_Notify_descriptor_, &Zone_KillCombatUnit_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_AddCombatTrap_Notify_descriptor_, &Zone_AddCombatTrap_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_TriggerCombatTrap_Notify_descriptor_, &Zone_TriggerCombatTrap_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_DeleteCombatTrap_Notify_descriptor_, &Zone_DeleteCombatTrap_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UnitAttrChange_Notify_descriptor_, &Zone_UnitAttrChange_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_StartPVPCombat_Request_descriptor_, &Zone_StartPVPCombat_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_StartPVPCombat_Response_descriptor_, &Zone_StartPVPCombat_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_StartPVPCombat_Notify_descriptor_, &Zone_StartPVPCombat_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_AcceptPVPCombat_Request_descriptor_, &Zone_AcceptPVPCombat_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_AcceptPVPCombat_Response_descriptor_, &Zone_AcceptPVPCombat_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_RejectPVPCombat_Notify_descriptor_, &Zone_RejectPVPCombat_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ChangeFightState_Notify_descriptor_, &Zone_ChangeFightState_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneCombatUnitInfo_descriptor_, &OneCombatUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatForm_descriptor_, &CombatForm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SetCombatForm_Request_descriptor_, &Zone_SetCombatForm_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SetCombatForm_Response_descriptor_, &Zone_SetCombatForm_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SetCombatForm_Notify_descriptor_, &Zone_SetCombatForm_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_DecreaseUnitBuff_Notify_descriptor_, &Zone_DecreaseUnitBuff_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneActionInfo_descriptor_, &OneActionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ActionUnitInfo_Notify_descriptor_, &Zone_ActionUnitInfo_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCDInfo_descriptor_, &SkillCDInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SkillCDRound_Notify_descriptor_, &Zone_SkillCDRound_Notify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_2eFight_2eproto() {
  delete UnitPosition::default_instance_;
  delete UnitPosition_reflection_;
  delete UnitPath::default_instance_;
  delete UnitPath_reflection_;
  delete Zone_DoCombat_Request::default_instance_;
  delete Zone_DoCombat_Request_reflection_;
  delete Zone_DoCombat_Response::default_instance_;
  delete Zone_DoCombat_Response_reflection_;
  delete CombatUnit::default_instance_;
  delete CombatUnit_reflection_;
  delete CombatCamp::default_instance_;
  delete CombatCamp_reflection_;
  delete Zone_Battlefield_Notify::default_instance_;
  delete Zone_Battlefield_Notify_reflection_;
  delete Zone_CombatMove_Request::default_instance_;
  delete Zone_CombatMove_Request_reflection_;
  delete Zone_CombatMove_Response::default_instance_;
  delete Zone_CombatMove_Response_reflection_;
  delete Zone_CombatAction_Request::default_instance_;
  delete Zone_CombatAction_Request_reflection_;
  delete Zone_CombatAction_Response::default_instance_;
  delete Zone_CombatAction_Response_reflection_;
  delete Zone_CombatMove_Notify::default_instance_;
  delete Zone_CombatMove_Notify_reflection_;
  delete ActionTarget::default_instance_;
  delete ActionTarget_reflection_;
  delete Zone_CombatAction_Notify::default_instance_;
  delete Zone_CombatAction_Notify_reflection_;
  delete OneRewardInfo::default_instance_;
  delete OneRewardInfo_reflection_;
  delete CombatReward::default_instance_;
  delete CombatReward_reflection_;
  delete Zone_FinCombat_Notify::default_instance_;
  delete Zone_FinCombat_Notify_reflection_;
  delete Zone_UnitDirective_Notify::default_instance_;
  delete Zone_UnitDirective_Notify_reflection_;
  delete Zone_UpdatePartnerAI_Request::default_instance_;
  delete Zone_UpdatePartnerAI_Request_reflection_;
  delete Zone_UpdatePartnerAI_Response::default_instance_;
  delete Zone_UpdatePartnerAI_Response_reflection_;
  delete BuffEffect::default_instance_;
  delete BuffEffect_reflection_;
  delete RemoveOneBuffEffect::default_instance_;
  delete RemoveOneBuffEffect_reflection_;
  delete RemoveBuffEffect::default_instance_;
  delete RemoveBuffEffect_reflection_;
  delete AddBuffInfo::default_instance_;
  delete AddBuffInfo_reflection_;
  delete OneAddBuff::default_instance_;
  delete OneAddBuff_reflection_;
  delete Zone_CombatAddBuff_Notify::default_instance_;
  delete Zone_CombatAddBuff_Notify_reflection_;
  delete Zone_DoBuffEffect_Notify::default_instance_;
  delete Zone_DoBuffEffect_Notify_reflection_;
  delete Zone_RemoveBuff_Notify::default_instance_;
  delete Zone_RemoveBuff_Notify_reflection_;
  delete Zone_AddCombatUnit_Notify::default_instance_;
  delete Zone_AddCombatUnit_Notify_reflection_;
  delete Zone_KillCombatUnit_Notify::default_instance_;
  delete Zone_KillCombatUnit_Notify_reflection_;
  delete Zone_AddCombatTrap_Notify::default_instance_;
  delete Zone_AddCombatTrap_Notify_reflection_;
  delete Zone_TriggerCombatTrap_Notify::default_instance_;
  delete Zone_TriggerCombatTrap_Notify_reflection_;
  delete Zone_DeleteCombatTrap_Notify::default_instance_;
  delete Zone_DeleteCombatTrap_Notify_reflection_;
  delete Zone_UnitAttrChange_Notify::default_instance_;
  delete Zone_UnitAttrChange_Notify_reflection_;
  delete Zone_StartPVPCombat_Request::default_instance_;
  delete Zone_StartPVPCombat_Request_reflection_;
  delete Zone_StartPVPCombat_Response::default_instance_;
  delete Zone_StartPVPCombat_Response_reflection_;
  delete Zone_StartPVPCombat_Notify::default_instance_;
  delete Zone_StartPVPCombat_Notify_reflection_;
  delete Zone_AcceptPVPCombat_Request::default_instance_;
  delete Zone_AcceptPVPCombat_Request_reflection_;
  delete Zone_AcceptPVPCombat_Response::default_instance_;
  delete Zone_AcceptPVPCombat_Response_reflection_;
  delete Zone_RejectPVPCombat_Notify::default_instance_;
  delete Zone_RejectPVPCombat_Notify_reflection_;
  delete Zone_ChangeFightState_Notify::default_instance_;
  delete Zone_ChangeFightState_Notify_reflection_;
  delete OneCombatUnitInfo::default_instance_;
  delete OneCombatUnitInfo_reflection_;
  delete CombatForm::default_instance_;
  delete CombatForm_reflection_;
  delete Zone_SetCombatForm_Request::default_instance_;
  delete Zone_SetCombatForm_Request_reflection_;
  delete Zone_SetCombatForm_Response::default_instance_;
  delete Zone_SetCombatForm_Response_reflection_;
  delete Zone_SetCombatForm_Notify::default_instance_;
  delete Zone_SetCombatForm_Notify_reflection_;
  delete Zone_DecreaseUnitBuff_Notify::default_instance_;
  delete Zone_DecreaseUnitBuff_Notify_reflection_;
  delete OneActionInfo::default_instance_;
  delete OneActionInfo_reflection_;
  delete Zone_ActionUnitInfo_Notify::default_instance_;
  delete Zone_ActionUnitInfo_Notify_reflection_;
  delete SkillCDInfo::default_instance_;
  delete SkillCDInfo_reflection_;
  delete Zone_SkillCDRound_Notify::default_instance_;
  delete Zone_SkillCDRound_Notify_reflection_;
}

void protobuf_AddDesc_GameProtocol_2eFight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_2eCommon_2eproto();
  ::protobuf_AddDesc_GameProtocol_2eUSERDB_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030GameProtocol.Fight.proto\032\031GameProtocol"
    ".Common.proto\032\031GameProtocol.USERDB.proto"
    "\",\n\014UnitPosition\022\r\n\005iPosX\030\001 \001(\005\022\r\n\005iPosY"
    "\030\002 \001(\005\"*\n\010UnitPath\022\036\n\007stPoses\030\001 \003(\0132\r.Un"
    "itPosition\"Z\n\025Zone_DoCombat_Request\022/\n\005e"
    "Type\030\001 \001(\0162\013.CombatType:\023COMBAT_TYPE_INV"
    "ALID\022\020\n\010iLevelID\030\002 \001(\005\")\n\026Zone_DoCombat_"
    "Response\022\017\n\007iResult\030\001 \001(\005\"\356\001\n\nCombatUnit"
    "\022\036\n\005eType\030\001 \001(\0162\017.CombatUnitType\022\017\n\007iUni"
    "tID\030\002 \001(\005\022\021\n\tiConfigID\030\003 \001(\005\022\034\n\005stPos\030\004 "
    "\001(\0132\r.UnitPosition\022\022\n\niDirection\030\005 \001(\005\022\023"
    "\n\013iAttributes\030\006 \003(\005\022\024\n\014iNormalSkill\030\007 \001("
    "\005\022\035\n\007stItems\030\010 \003(\0132\014.OneSlotInfo\022\021\n\tiUni"
    "tAIID\030\t \001(\005\022\r\n\005iCamp\030\n \001(\005\"N\n\nCombatCamp"
    "\022\r\n\005uiUin\030\001 \001(\r\022\023\n\013strNickName\030\003 \001(\t\022\034\n\007"
    "stUnits\030\002 \003(\0132\013.CombatUnit\"\277\001\n\027Zone_Batt"
    "lefield_Notify\022\020\n\010iCrossID\030\001 \001(\005\022!\n\014stCa"
    "mpActive\030\002 \001(\0132\013.CombatCamp\022\"\n\rstCampPas"
    "sive\030\003 \001(\0132\013.CombatCamp\022$\n\rstActiveposes"
    "\030\005 \003(\0132\r.UnitPosition\022%\n\016stPassivePoses\030"
    "\006 \003(\0132\r.UnitPosition\"4\n\027Zone_CombatMove_"
    "Request\022\031\n\006stPath\030\001 \001(\0132\t.UnitPath\"+\n\030Zo"
    "ne_CombatMove_Response\022\017\n\007iResult\030\001 \001(\005\""
    "\247\001\n\031Zone_CombatAction_Request\0221\n\005eType\030\001"
    " \001(\0162\013.ActionType:\025COMBAT_ACTION_INVALID"
    "\022\024\n\014iCastSkillID\030\002 \001(\005\022\017\n\007iItemID\030\003 \001(\005\022"
    "\034\n\005stPos\030\004 \001(\0132\r.UnitPosition\022\022\n\niDirect"
    "ion\030\005 \001(\005\"`\n\032Zone_CombatAction_Response\022"
    "\017\n\007iResult\030\001 \001(\005\0221\n\005eType\030\002 \001(\0162\013.Action"
    "Type:\025COMBAT_ACTION_INVALID\"~\n\026Zone_Comb"
    "atMove_Notify\022\017\n\007iUnitID\030\001 \001(\005\022\031\n\006stPath"
    "\030\002 \001(\0132\t.UnitPath\022\022\n\niDirection\030\003 \001(\005\022\021\n"
    "\tiMoveType\030\004 \001(\005\022\021\n\tiAnimType\030\005 \001(\005\"\307\001\n\014"
    "ActionTarget\022\025\n\riTargetUnitID\030\001 \001(\005\022\022\n\nb"
    "IsStatSet\030\002 \003(\010\022\027\n\017iCastAttrEffect\030\005 \003(\005"
    "\022\023\n\013iAttrEffect\030\003 \003(\005\022 \n\tstCastPos\030\004 \001(\013"
    "2\r.UnitPosition\022\"\n\013stTargetPos\030\006 \001(\0132\r.U"
    "nitPosition\022\030\n\020iSpecialFuncType\030\007 \001(\005\"\241\002"
    "\n\030Zone_CombatAction_Notify\022\025\n\riActionUni"
    "tID\030\001 \001(\005\022\"\n\013stTargetPos\030\t \001(\0132\r.UnitPos"
    "ition\0221\n\005eType\030\002 \001(\0162\013.ActionType:\025COMBA"
    "T_ACTION_INVALID\022\025\n\riUseSkillType\030\010 \001(\005\022"
    "\021\n\tiCostType\030\006 \001(\005\022\020\n\010iCostNum\030\007 \001(\005\022\024\n\014"
    "iCastSkillID\030\003 \001(\005\022\017\n\007iItemID\030\004 \001(\005\022 \n\ts"
    "tTargets\030\005 \003(\0132\r.ActionTarget\022\022\n\niNewTra"
    "pHP\030\n \001(\005\"Y\n\rOneRewardInfo\022\023\n\013iRewardTyp"
    "e\030\001 \001(\005\022\017\n\007iItemID\030\002 \001(\005\022\020\n\010iResType\030\003 \001"
    "(\005\022\020\n\010iDropNum\030\004 \001(\005\"4\n\014CombatReward\022$\n\014"
    "stRewardInfo\030\001 \003(\0132\016.OneRewardInfo\"N\n\025Zo"
    "ne_FinCombat_Notify\022\024\n\014bIsActiveWin\030\001 \001("
    "\010\022\037\n\010stReward\030\002 \001(\0132\r.CombatReward\"Z\n\031Zo"
    "ne_UnitDirective_Notify\022&\n\niDirective\030\001 "
    "\001(\0162\022.UnitDirectiveType\022\025\n\riCombatUnitID"
    "\030\002 \001(\005\"4\n\034Zone_UpdatePartnerAI_Request\022\024"
    "\n\014iPartnerAIID\030\001 \001(\005\"0\n\035Zone_UpdatePartn"
    "erAI_Response\022\017\n\007iResult\030\001 \001(\005\"\213\001\n\nBuffE"
    "ffect\022\017\n\007iBuffID\030\001 \001(\005\022\025\n\riTargetUnitID\030"
    "\004 \001(\005\022\021\n\tiAttrType\030\002 \001(\005\022\023\n\013iAttrChange\030"
    "\003 \001(\005\022-\n\tstAddBuff\030\005 \001(\0132\032.Zone_CombatAd"
    "dBuff_Notify\"N\n\023RemoveOneBuffEffect\022\017\n\007i"
    "BuffID\030\001 \001(\005\022\021\n\tiAttrType\030\002 \001(\005\022\023\n\013iAttr"
    "Change\030\003 \001(\005\">\n\020RemoveBuffEffect\022*\n\014stRe"
    "moveOnes\030\001 \003(\0132\024.RemoveOneBuffEffect\"g\n\013"
    "AddBuffInfo\022\017\n\007iBuffID\030\001 \001(\005\022\'\n\014stRemove"
    "Buff\030\002 \001(\0132\021.RemoveBuffEffect\022\036\n\tstEffec"
    "ts\030\003 \001(\0132\013.BuffEffect\"E\n\nOneAddBuff\022\025\n\ri"
    "TargetUnitID\030\001 \001(\005\022 \n\nstBuffInfo\030\002 \003(\0132\014"
    ".AddBuffInfo\"Q\n\031Zone_CombatAddBuff_Notif"
    "y\022\023\n\013iCastUnitID\030\001 \001(\005\022\037\n\nstAddBuffs\030\002 \003"
    "(\0132\013.OneAddBuff\"R\n\030Zone_DoBuffEffect_Not"
    "ify\022\026\n\016iTriggerUnitID\030\002 \001(\005\022\036\n\tstEffects"
    "\030\003 \003(\0132\013.BuffEffect\"U\n\026Zone_RemoveBuff_N"
    "otify\022\025\n\riTargetUnitID\030\001 \001(\005\022$\n\tstEffect"
    "s\030\002 \003(\0132\021.RemoveBuffEffect\"K\n\031Zone_AddCo"
    "mbatUnit_Notify\022\021\n\tiCampType\030\001 \001(\005\022\033\n\006st"
    "Unit\030\002 \001(\0132\013.CombatUnit\"-\n\032Zone_KillComb"
    "atUnit_Notify\022\017\n\007iUnitID\030\001 \001(\005\"\203\001\n\031Zone_"
    "AddCombatTrap_Notify\022\021\n\tiConfigID\030\001 \001(\005\022"
    "\022\n\niTrapObjID\030\002 \001(\005\022\r\n\005iCamp\030\003 \001(\005\022\034\n\005st"
    "Pos\030\004 \001(\0132\r.UnitPosition\022\022\n\niDirection\030\005"
    " \001(\005\"x\n\035Zone_TriggerCombatTrap_Notify\022\022\n"
    "\niTrapObjID\030\001 \001(\005\022\025\n\riTriggerObjID\030\002 \001(\005"
    "\022\024\n\014iTriggerType\030\003 \001(\005\022\026\n\016iInterruptType"
    "\030\004 \001(\005\"2\n\034Zone_DeleteCombatTrap_Notify\022\022"
    "\n\niTrapObjID\030\001 \001(\005\"U\n\032Zone_UnitAttrChang"
    "e_Notify\022\017\n\007iUnitID\030\001 \001(\005\022\021\n\tiAttrType\030\002"
    " \001(\005\022\023\n\013iAttrChange\030\003 \001(\005\"3\n\033Zone_StartP"
    "VPCombat_Request\022\024\n\014uiPassiveUin\030\001 \001(\r\"/"
    "\n\034Zone_StartPVPCombat_Response\022\017\n\007iResul"
    "t\030\001 \001(\005\"H\n\032Zone_StartPVPCombat_Notify\022\023\n"
    "\013uiActiveUin\030\001 \001(\r\022\025\n\rstrActiveName\030\002 \001("
    "\t\"F\n\034Zone_AcceptPVPCombat_Request\022\023\n\013uiA"
    "ctiveUin\030\001 \001(\r\022\021\n\tbIsAccept\030\002 \001(\010\"0\n\035Zon"
    "e_AcceptPVPCombat_Response\022\017\n\007iResult\030\001 "
    "\001(\005\"J\n\033Zone_RejectPVPCombat_Notify\022\023\n\013iP"
    "assiveUin\030\001 \001(\005\022\026\n\016strPassiveName\030\002 \001(\t\""
    "C\n\034Zone_ChangeFightState_Notify\022\017\n\007iUnit"
    "ID\030\001 \001(\005\022\022\n\nbIsInFight\030\002 \001(\010\"B\n\021OneComba"
    "tUnitInfo\022\017\n\007iUnitID\030\001 \001(\005\022\034\n\005stPos\030\002 \001("
    "\0132\r.UnitPosition\"5\n\nCombatForm\022\'\n\013stUnit"
    "Infos\030\001 \003(\0132\022.OneCombatUnitInfo\"9\n\032Zone_"
    "SetCombatForm_Request\022\033\n\006stForm\030\001 \001(\0132\013."
    "CombatForm\".\n\033Zone_SetCombatForm_Respons"
    "e\022\017\n\007iResult\030\001 \001(\005\"b\n\031Zone_SetCombatForm"
    "_Notify\022!\n\014stActiveForm\030\001 \001(\0132\013.CombatFo"
    "rm\022\"\n\rstPassiveForm\030\002 \001(\0132\013.CombatForm\"5"
    "\n\034Zone_DecreaseUnitBuff_Notify\022\025\n\riComba"
    "tUnitID\030\001 \001(\005\"3\n\rOneActionInfo\022\017\n\007iUnitI"
    "D\030\001 \001(\005\022\021\n\tiXianGong\030\002 \001(\005\"p\n\032Zone_Actio"
    "nUnitInfo_Notify\022\'\n\017stInActionInfos\030\001 \003("
    "\0132\016.OneActionInfo\022)\n\021stActionDoneInfos\030\002"
    " \003(\0132\016.OneActionInfo\"1\n\013SkillCDInfo\022\020\n\010i"
    "SkillID\030\001 \001(\005\022\020\n\010iCDRound\030\002 \001(\005\"L\n\030Zone_"
    "SkillCDRound_Notify\022\017\n\007iUnitID\030\001 \001(\005\022\037\n\t"
    "stCDInfos\030\002 \003(\0132\014.SkillCDInfo*O\n\nCombatT"
    "ype\022\027\n\023COMBAT_TYPE_INVALID\020\000\022\023\n\017COMBAT_T"
    "YPE_PVE\020\001\022\023\n\017COMBAT_TYPE_PVP\020\002*\205\001\n\016Comba"
    "tUnitType\022\034\n\030COMBAT_UNIT_TYPE_INVALID\020\000\022"
    "\031\n\025COMBAT_UNIT_TYPE_ROLE\020\001\022\034\n\030COMBAT_UNI"
    "T_TYPE_PARTNER\020\002\022\034\n\030COMBAT_UNIT_TYPE_MON"
    "STER\020\003*\235\001\n\021UnitDirectiveType\022\032\n\026UNIT_DIR"
    "ECTIVE_INVALID\020\000\022\034\n\030UNIT_DIRECTIVE_PARTN"
    "ERAI\020\001\022\027\n\023UNIT_DIRECTIVE_MOVE\020\002\022\031\n\025UNIT_"
    "DIRECTIVE_ACTION\020\003\022\032\n\026UNIT_DIRECTIVE_SET"
    "FORM\020\004*\266\001\n\nActionType\022\031\n\025COMBAT_ACTION_I"
    "NVALID\020\000\022\033\n\027COMBAT_ACTION_CASTSKILL\020\001\022\031\n"
    "\025COMBAT_ACTION_USEITEM\020\002\022\026\n\022COMBAT_ACTIO"
    "N_IDLE\020\003\022\036\n\032COMBAT_ACTION_TRIGGER_TRAP\020\004"
    "\022\035\n\031COMBAT_ACTION_ATTACK_TRAP\020\005*\267\001\n\022Acti"
    "onEffectStatus\022!\n\035ACTION_EFFECT_STATUS_M"
    "INZHONG\020\000\022\037\n\033ACTION_EFFECT_STATUS_GEDANG"
    "\020\001\022\036\n\032ACTION_EFFECT_STATUS_BAOJI\020\002\022\037\n\033AC"
    "TION_EFFECT_STATUS_SHANBI\020\003\022\034\n\030ACTION_EF"
    "FECT_STATUS_MAX\020\004*\273\001\n\020COMBATUNITSTATUS\022\036"
    "\n\032COMBAT_UNIT_STATUS_NOTMOVE\020\001\022 \n\034COMBAT"
    "_UNIT_STATUS_NOTACTION\020\002\022\037\n\033COMBAT_UNIT_"
    "STATUS_NOTROUND\020\003\022\"\n\036COMBAT_UNIT_STATUS_"
    "IGNOREJOINT\020\004\022 \n\034COMBAT_UNIT_STATUS_UNBE"
    "NDING\020\005*\207\001\n\016CombatMoveType\022\027\n\023COMBAT_MOV"
    "E_INVALID\020\000\022\026\n\022COMBAT_MOVE_NORMAL\020\001\022\030\n\024C"
    "OMBAT_MOVE_TELEPORT\020\002\022\024\n\020COMBAT_MOVE_JUM"
    "P\020\003\022\024\n\020COMBAT_MOVE_RUSH\020\004", 5665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol.Fight.proto", &protobuf_RegisterTypes);
  UnitPosition::default_instance_ = new UnitPosition();
  UnitPath::default_instance_ = new UnitPath();
  Zone_DoCombat_Request::default_instance_ = new Zone_DoCombat_Request();
  Zone_DoCombat_Response::default_instance_ = new Zone_DoCombat_Response();
  CombatUnit::default_instance_ = new CombatUnit();
  CombatCamp::default_instance_ = new CombatCamp();
  Zone_Battlefield_Notify::default_instance_ = new Zone_Battlefield_Notify();
  Zone_CombatMove_Request::default_instance_ = new Zone_CombatMove_Request();
  Zone_CombatMove_Response::default_instance_ = new Zone_CombatMove_Response();
  Zone_CombatAction_Request::default_instance_ = new Zone_CombatAction_Request();
  Zone_CombatAction_Response::default_instance_ = new Zone_CombatAction_Response();
  Zone_CombatMove_Notify::default_instance_ = new Zone_CombatMove_Notify();
  ActionTarget::default_instance_ = new ActionTarget();
  Zone_CombatAction_Notify::default_instance_ = new Zone_CombatAction_Notify();
  OneRewardInfo::default_instance_ = new OneRewardInfo();
  CombatReward::default_instance_ = new CombatReward();
  Zone_FinCombat_Notify::default_instance_ = new Zone_FinCombat_Notify();
  Zone_UnitDirective_Notify::default_instance_ = new Zone_UnitDirective_Notify();
  Zone_UpdatePartnerAI_Request::default_instance_ = new Zone_UpdatePartnerAI_Request();
  Zone_UpdatePartnerAI_Response::default_instance_ = new Zone_UpdatePartnerAI_Response();
  BuffEffect::default_instance_ = new BuffEffect();
  RemoveOneBuffEffect::default_instance_ = new RemoveOneBuffEffect();
  RemoveBuffEffect::default_instance_ = new RemoveBuffEffect();
  AddBuffInfo::default_instance_ = new AddBuffInfo();
  OneAddBuff::default_instance_ = new OneAddBuff();
  Zone_CombatAddBuff_Notify::default_instance_ = new Zone_CombatAddBuff_Notify();
  Zone_DoBuffEffect_Notify::default_instance_ = new Zone_DoBuffEffect_Notify();
  Zone_RemoveBuff_Notify::default_instance_ = new Zone_RemoveBuff_Notify();
  Zone_AddCombatUnit_Notify::default_instance_ = new Zone_AddCombatUnit_Notify();
  Zone_KillCombatUnit_Notify::default_instance_ = new Zone_KillCombatUnit_Notify();
  Zone_AddCombatTrap_Notify::default_instance_ = new Zone_AddCombatTrap_Notify();
  Zone_TriggerCombatTrap_Notify::default_instance_ = new Zone_TriggerCombatTrap_Notify();
  Zone_DeleteCombatTrap_Notify::default_instance_ = new Zone_DeleteCombatTrap_Notify();
  Zone_UnitAttrChange_Notify::default_instance_ = new Zone_UnitAttrChange_Notify();
  Zone_StartPVPCombat_Request::default_instance_ = new Zone_StartPVPCombat_Request();
  Zone_StartPVPCombat_Response::default_instance_ = new Zone_StartPVPCombat_Response();
  Zone_StartPVPCombat_Notify::default_instance_ = new Zone_StartPVPCombat_Notify();
  Zone_AcceptPVPCombat_Request::default_instance_ = new Zone_AcceptPVPCombat_Request();
  Zone_AcceptPVPCombat_Response::default_instance_ = new Zone_AcceptPVPCombat_Response();
  Zone_RejectPVPCombat_Notify::default_instance_ = new Zone_RejectPVPCombat_Notify();
  Zone_ChangeFightState_Notify::default_instance_ = new Zone_ChangeFightState_Notify();
  OneCombatUnitInfo::default_instance_ = new OneCombatUnitInfo();
  CombatForm::default_instance_ = new CombatForm();
  Zone_SetCombatForm_Request::default_instance_ = new Zone_SetCombatForm_Request();
  Zone_SetCombatForm_Response::default_instance_ = new Zone_SetCombatForm_Response();
  Zone_SetCombatForm_Notify::default_instance_ = new Zone_SetCombatForm_Notify();
  Zone_DecreaseUnitBuff_Notify::default_instance_ = new Zone_DecreaseUnitBuff_Notify();
  OneActionInfo::default_instance_ = new OneActionInfo();
  Zone_ActionUnitInfo_Notify::default_instance_ = new Zone_ActionUnitInfo_Notify();
  SkillCDInfo::default_instance_ = new SkillCDInfo();
  Zone_SkillCDRound_Notify::default_instance_ = new Zone_SkillCDRound_Notify();
  UnitPosition::default_instance_->InitAsDefaultInstance();
  UnitPath::default_instance_->InitAsDefaultInstance();
  Zone_DoCombat_Request::default_instance_->InitAsDefaultInstance();
  Zone_DoCombat_Response::default_instance_->InitAsDefaultInstance();
  CombatUnit::default_instance_->InitAsDefaultInstance();
  CombatCamp::default_instance_->InitAsDefaultInstance();
  Zone_Battlefield_Notify::default_instance_->InitAsDefaultInstance();
  Zone_CombatMove_Request::default_instance_->InitAsDefaultInstance();
  Zone_CombatMove_Response::default_instance_->InitAsDefaultInstance();
  Zone_CombatAction_Request::default_instance_->InitAsDefaultInstance();
  Zone_CombatAction_Response::default_instance_->InitAsDefaultInstance();
  Zone_CombatMove_Notify::default_instance_->InitAsDefaultInstance();
  ActionTarget::default_instance_->InitAsDefaultInstance();
  Zone_CombatAction_Notify::default_instance_->InitAsDefaultInstance();
  OneRewardInfo::default_instance_->InitAsDefaultInstance();
  CombatReward::default_instance_->InitAsDefaultInstance();
  Zone_FinCombat_Notify::default_instance_->InitAsDefaultInstance();
  Zone_UnitDirective_Notify::default_instance_->InitAsDefaultInstance();
  Zone_UpdatePartnerAI_Request::default_instance_->InitAsDefaultInstance();
  Zone_UpdatePartnerAI_Response::default_instance_->InitAsDefaultInstance();
  BuffEffect::default_instance_->InitAsDefaultInstance();
  RemoveOneBuffEffect::default_instance_->InitAsDefaultInstance();
  RemoveBuffEffect::default_instance_->InitAsDefaultInstance();
  AddBuffInfo::default_instance_->InitAsDefaultInstance();
  OneAddBuff::default_instance_->InitAsDefaultInstance();
  Zone_CombatAddBuff_Notify::default_instance_->InitAsDefaultInstance();
  Zone_DoBuffEffect_Notify::default_instance_->InitAsDefaultInstance();
  Zone_RemoveBuff_Notify::default_instance_->InitAsDefaultInstance();
  Zone_AddCombatUnit_Notify::default_instance_->InitAsDefaultInstance();
  Zone_KillCombatUnit_Notify::default_instance_->InitAsDefaultInstance();
  Zone_AddCombatTrap_Notify::default_instance_->InitAsDefaultInstance();
  Zone_TriggerCombatTrap_Notify::default_instance_->InitAsDefaultInstance();
  Zone_DeleteCombatTrap_Notify::default_instance_->InitAsDefaultInstance();
  Zone_UnitAttrChange_Notify::default_instance_->InitAsDefaultInstance();
  Zone_StartPVPCombat_Request::default_instance_->InitAsDefaultInstance();
  Zone_StartPVPCombat_Response::default_instance_->InitAsDefaultInstance();
  Zone_StartPVPCombat_Notify::default_instance_->InitAsDefaultInstance();
  Zone_AcceptPVPCombat_Request::default_instance_->InitAsDefaultInstance();
  Zone_AcceptPVPCombat_Response::default_instance_->InitAsDefaultInstance();
  Zone_RejectPVPCombat_Notify::default_instance_->InitAsDefaultInstance();
  Zone_ChangeFightState_Notify::default_instance_->InitAsDefaultInstance();
  OneCombatUnitInfo::default_instance_->InitAsDefaultInstance();
  CombatForm::default_instance_->InitAsDefaultInstance();
  Zone_SetCombatForm_Request::default_instance_->InitAsDefaultInstance();
  Zone_SetCombatForm_Response::default_instance_->InitAsDefaultInstance();
  Zone_SetCombatForm_Notify::default_instance_->InitAsDefaultInstance();
  Zone_DecreaseUnitBuff_Notify::default_instance_->InitAsDefaultInstance();
  OneActionInfo::default_instance_->InitAsDefaultInstance();
  Zone_ActionUnitInfo_Notify::default_instance_->InitAsDefaultInstance();
  SkillCDInfo::default_instance_->InitAsDefaultInstance();
  Zone_SkillCDRound_Notify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_2eFight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_2eFight_2eproto {
  StaticDescriptorInitializer_GameProtocol_2eFight_2eproto() {
    protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  }
} static_descriptor_initializer_GameProtocol_2eFight_2eproto_;
const ::google::protobuf::EnumDescriptor* CombatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatType_descriptor_;
}
bool CombatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CombatUnitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatUnitType_descriptor_;
}
bool CombatUnitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnitDirectiveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitDirectiveType_descriptor_;
}
bool UnitDirectiveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionType_descriptor_;
}
bool ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionEffectStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionEffectStatus_descriptor_;
}
bool ActionEffectStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* COMBATUNITSTATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COMBATUNITSTATUS_descriptor_;
}
bool COMBATUNITSTATUS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CombatMoveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatMoveType_descriptor_;
}
bool CombatMoveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UnitPosition::kIPosXFieldNumber;
const int UnitPosition::kIPosYFieldNumber;
#endif  // !_MSC_VER

UnitPosition::UnitPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitPosition::InitAsDefaultInstance() {
}

UnitPosition::UnitPosition(const UnitPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitPosition::SharedCtor() {
  _cached_size_ = 0;
  iposx_ = 0;
  iposy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitPosition::~UnitPosition() {
  SharedDtor();
}

void UnitPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitPosition_descriptor_;
}

const UnitPosition& UnitPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

UnitPosition* UnitPosition::default_instance_ = NULL;

UnitPosition* UnitPosition::New() const {
  return new UnitPosition;
}

void UnitPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iposx_ = 0;
    iposy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iPosX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iposx_)));
          set_has_iposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iPosY;
        break;
      }

      // optional int32 iPosY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iposy_)));
          set_has_iposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iPosX = 1;
  if (has_iposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iposx(), output);
  }

  // optional int32 iPosY = 2;
  if (has_iposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iposy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iPosX = 1;
  if (has_iposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iposx(), target);
  }

  // optional int32 iPosY = 2;
  if (has_iposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iposy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iPosX = 1;
    if (has_iposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iposx());
    }

    // optional int32 iPosY = 2;
    if (has_iposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iposy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitPosition::MergeFrom(const UnitPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iposx()) {
      set_iposx(from.iposx());
    }
    if (from.has_iposy()) {
      set_iposy(from.iposy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitPosition::CopyFrom(const UnitPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitPosition::IsInitialized() const {

  return true;
}

void UnitPosition::Swap(UnitPosition* other) {
  if (other != this) {
    std::swap(iposx_, other->iposx_);
    std::swap(iposy_, other->iposy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitPosition_descriptor_;
  metadata.reflection = UnitPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitPath::kStPosesFieldNumber;
#endif  // !_MSC_VER

UnitPath::UnitPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitPath::InitAsDefaultInstance() {
}

UnitPath::UnitPath(const UnitPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitPath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitPath::~UnitPath() {
  SharedDtor();
}

void UnitPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitPath_descriptor_;
}

const UnitPath& UnitPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

UnitPath* UnitPath::default_instance_ = NULL;

UnitPath* UnitPath::New() const {
  return new UnitPath;
}

void UnitPath::Clear() {
  stposes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UnitPosition stPoses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPoses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stposes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stPoses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .UnitPosition stPoses = 1;
  for (int i = 0; i < this->stposes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stposes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .UnitPosition stPoses = 1;
  for (int i = 0; i < this->stposes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stposes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitPath::ByteSize() const {
  int total_size = 0;

  // repeated .UnitPosition stPoses = 1;
  total_size += 1 * this->stposes_size();
  for (int i = 0; i < this->stposes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stposes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitPath::MergeFrom(const UnitPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  stposes_.MergeFrom(from.stposes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitPath::CopyFrom(const UnitPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitPath::IsInitialized() const {

  return true;
}

void UnitPath::Swap(UnitPath* other) {
  if (other != this) {
    stposes_.Swap(&other->stposes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitPath_descriptor_;
  metadata.reflection = UnitPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_DoCombat_Request::kETypeFieldNumber;
const int Zone_DoCombat_Request::kILevelIDFieldNumber;
#endif  // !_MSC_VER

Zone_DoCombat_Request::Zone_DoCombat_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_DoCombat_Request::InitAsDefaultInstance() {
}

Zone_DoCombat_Request::Zone_DoCombat_Request(const Zone_DoCombat_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_DoCombat_Request::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  ilevelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_DoCombat_Request::~Zone_DoCombat_Request() {
  SharedDtor();
}

void Zone_DoCombat_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_DoCombat_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_DoCombat_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_DoCombat_Request_descriptor_;
}

const Zone_DoCombat_Request& Zone_DoCombat_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_DoCombat_Request* Zone_DoCombat_Request::default_instance_ = NULL;

Zone_DoCombat_Request* Zone_DoCombat_Request::New() const {
  return new Zone_DoCombat_Request;
}

void Zone_DoCombat_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 0;
    ilevelid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_DoCombat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CombatType eType = 1 [default = COMBAT_TYPE_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CombatType_IsValid(value)) {
            set_etype(static_cast< ::CombatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iLevelID;
        break;
      }

      // optional int32 iLevelID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLevelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilevelid_)));
          set_has_ilevelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_DoCombat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CombatType eType = 1 [default = COMBAT_TYPE_INVALID];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional int32 iLevelID = 2;
  if (has_ilevelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ilevelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_DoCombat_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CombatType eType = 1 [default = COMBAT_TYPE_INVALID];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional int32 iLevelID = 2;
  if (has_ilevelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ilevelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_DoCombat_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CombatType eType = 1 [default = COMBAT_TYPE_INVALID];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional int32 iLevelID = 2;
    if (has_ilevelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilevelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_DoCombat_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_DoCombat_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_DoCombat_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_DoCombat_Request::MergeFrom(const Zone_DoCombat_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_ilevelid()) {
      set_ilevelid(from.ilevelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_DoCombat_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_DoCombat_Request::CopyFrom(const Zone_DoCombat_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_DoCombat_Request::IsInitialized() const {

  return true;
}

void Zone_DoCombat_Request::Swap(Zone_DoCombat_Request* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(ilevelid_, other->ilevelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_DoCombat_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_DoCombat_Request_descriptor_;
  metadata.reflection = Zone_DoCombat_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_DoCombat_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_DoCombat_Response::Zone_DoCombat_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_DoCombat_Response::InitAsDefaultInstance() {
}

Zone_DoCombat_Response::Zone_DoCombat_Response(const Zone_DoCombat_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_DoCombat_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_DoCombat_Response::~Zone_DoCombat_Response() {
  SharedDtor();
}

void Zone_DoCombat_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_DoCombat_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_DoCombat_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_DoCombat_Response_descriptor_;
}

const Zone_DoCombat_Response& Zone_DoCombat_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_DoCombat_Response* Zone_DoCombat_Response::default_instance_ = NULL;

Zone_DoCombat_Response* Zone_DoCombat_Response::New() const {
  return new Zone_DoCombat_Response;
}

void Zone_DoCombat_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_DoCombat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_DoCombat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_DoCombat_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_DoCombat_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_DoCombat_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_DoCombat_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_DoCombat_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_DoCombat_Response::MergeFrom(const Zone_DoCombat_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_DoCombat_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_DoCombat_Response::CopyFrom(const Zone_DoCombat_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_DoCombat_Response::IsInitialized() const {

  return true;
}

void Zone_DoCombat_Response::Swap(Zone_DoCombat_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_DoCombat_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_DoCombat_Response_descriptor_;
  metadata.reflection = Zone_DoCombat_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombatUnit::kETypeFieldNumber;
const int CombatUnit::kIUnitIDFieldNumber;
const int CombatUnit::kIConfigIDFieldNumber;
const int CombatUnit::kStPosFieldNumber;
const int CombatUnit::kIDirectionFieldNumber;
const int CombatUnit::kIAttributesFieldNumber;
const int CombatUnit::kINormalSkillFieldNumber;
const int CombatUnit::kStItemsFieldNumber;
const int CombatUnit::kIUnitAIIDFieldNumber;
const int CombatUnit::kICampFieldNumber;
#endif  // !_MSC_VER

CombatUnit::CombatUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatUnit::InitAsDefaultInstance() {
  stpos_ = const_cast< ::UnitPosition*>(&::UnitPosition::default_instance());
}

CombatUnit::CombatUnit(const CombatUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatUnit::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  iunitid_ = 0;
  iconfigid_ = 0;
  stpos_ = NULL;
  idirection_ = 0;
  inormalskill_ = 0;
  iunitaiid_ = 0;
  icamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatUnit::~CombatUnit() {
  SharedDtor();
}

void CombatUnit::SharedDtor() {
  if (this != default_instance_) {
    delete stpos_;
  }
}

void CombatUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatUnit_descriptor_;
}

const CombatUnit& CombatUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

CombatUnit* CombatUnit::default_instance_ = NULL;

CombatUnit* CombatUnit::New() const {
  return new CombatUnit;
}

void CombatUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 0;
    iunitid_ = 0;
    iconfigid_ = 0;
    if (has_stpos()) {
      if (stpos_ != NULL) stpos_->::UnitPosition::Clear();
    }
    idirection_ = 0;
    inormalskill_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    iunitaiid_ = 0;
    icamp_ = 0;
  }
  iattributes_.Clear();
  stitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CombatUnitType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CombatUnitType_IsValid(value)) {
            set_etype(static_cast< ::CombatUnitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iUnitID;
        break;
      }

      // optional int32 iUnitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iUnitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitid_)));
          set_has_iunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iConfigID;
        break;
      }

      // optional int32 iConfigID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconfigid_)));
          set_has_iconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stPos;
        break;
      }

      // optional .UnitPosition stPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iDirection;
        break;
      }

      // optional int32 iDirection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idirection_)));
          set_has_idirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iAttributes;
        break;
      }

      // repeated int32 iAttributes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAttributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_iattributes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_iattributes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iAttributes;
        if (input->ExpectTag(56)) goto parse_iNormalSkill;
        break;
      }

      // optional int32 iNormalSkill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNormalSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inormalskill_)));
          set_has_inormalskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_stItems;
        break;
      }

      // repeated .OneSlotInfo stItems = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_stItems;
        if (input->ExpectTag(72)) goto parse_iUnitAIID;
        break;
      }

      // optional int32 iUnitAIID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iUnitAIID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitaiid_)));
          set_has_iunitaiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_iCamp;
        break;
      }

      // optional int32 iCamp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icamp_)));
          set_has_icamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CombatUnitType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional int32 iUnitID = 2;
  if (has_iunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iunitid(), output);
  }

  // optional int32 iConfigID = 3;
  if (has_iconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iconfigid(), output);
  }

  // optional .UnitPosition stPos = 4;
  if (has_stpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stpos(), output);
  }

  // optional int32 iDirection = 5;
  if (has_idirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->idirection(), output);
  }

  // repeated int32 iAttributes = 6;
  for (int i = 0; i < this->iattributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->iattributes(i), output);
  }

  // optional int32 iNormalSkill = 7;
  if (has_inormalskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->inormalskill(), output);
  }

  // repeated .OneSlotInfo stItems = 8;
  for (int i = 0; i < this->stitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stitems(i), output);
  }

  // optional int32 iUnitAIID = 9;
  if (has_iunitaiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->iunitaiid(), output);
  }

  // optional int32 iCamp = 10;
  if (has_icamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->icamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CombatUnitType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional int32 iUnitID = 2;
  if (has_iunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iunitid(), target);
  }

  // optional int32 iConfigID = 3;
  if (has_iconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iconfigid(), target);
  }

  // optional .UnitPosition stPos = 4;
  if (has_stpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stpos(), target);
  }

  // optional int32 iDirection = 5;
  if (has_idirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->idirection(), target);
  }

  // repeated int32 iAttributes = 6;
  for (int i = 0; i < this->iattributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->iattributes(i), target);
  }

  // optional int32 iNormalSkill = 7;
  if (has_inormalskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->inormalskill(), target);
  }

  // repeated .OneSlotInfo stItems = 8;
  for (int i = 0; i < this->stitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->stitems(i), target);
  }

  // optional int32 iUnitAIID = 9;
  if (has_iunitaiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->iunitaiid(), target);
  }

  // optional int32 iCamp = 10;
  if (has_icamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->icamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CombatUnitType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional int32 iUnitID = 2;
    if (has_iunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitid());
    }

    // optional int32 iConfigID = 3;
    if (has_iconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconfigid());
    }

    // optional .UnitPosition stPos = 4;
    if (has_stpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpos());
    }

    // optional int32 iDirection = 5;
    if (has_idirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idirection());
    }

    // optional int32 iNormalSkill = 7;
    if (has_inormalskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inormalskill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 iUnitAIID = 9;
    if (has_iunitaiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitaiid());
    }

    // optional int32 iCamp = 10;
    if (has_icamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icamp());
    }

  }
  // repeated int32 iAttributes = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->iattributes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->iattributes(i));
    }
    total_size += 1 * this->iattributes_size() + data_size;
  }

  // repeated .OneSlotInfo stItems = 8;
  total_size += 1 * this->stitems_size();
  for (int i = 0; i < this->stitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatUnit::MergeFrom(const CombatUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  iattributes_.MergeFrom(from.iattributes_);
  stitems_.MergeFrom(from.stitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_iunitid()) {
      set_iunitid(from.iunitid());
    }
    if (from.has_iconfigid()) {
      set_iconfigid(from.iconfigid());
    }
    if (from.has_stpos()) {
      mutable_stpos()->::UnitPosition::MergeFrom(from.stpos());
    }
    if (from.has_idirection()) {
      set_idirection(from.idirection());
    }
    if (from.has_inormalskill()) {
      set_inormalskill(from.inormalskill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iunitaiid()) {
      set_iunitaiid(from.iunitaiid());
    }
    if (from.has_icamp()) {
      set_icamp(from.icamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatUnit::CopyFrom(const CombatUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatUnit::IsInitialized() const {

  return true;
}

void CombatUnit::Swap(CombatUnit* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(iunitid_, other->iunitid_);
    std::swap(iconfigid_, other->iconfigid_);
    std::swap(stpos_, other->stpos_);
    std::swap(idirection_, other->idirection_);
    iattributes_.Swap(&other->iattributes_);
    std::swap(inormalskill_, other->inormalskill_);
    stitems_.Swap(&other->stitems_);
    std::swap(iunitaiid_, other->iunitaiid_);
    std::swap(icamp_, other->icamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatUnit_descriptor_;
  metadata.reflection = CombatUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombatCamp::kUiUinFieldNumber;
const int CombatCamp::kStrNickNameFieldNumber;
const int CombatCamp::kStUnitsFieldNumber;
#endif  // !_MSC_VER

CombatCamp::CombatCamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatCamp::InitAsDefaultInstance() {
}

CombatCamp::CombatCamp(const CombatCamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatCamp::SharedCtor() {
  _cached_size_ = 0;
  uiuin_ = 0u;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatCamp::~CombatCamp() {
  SharedDtor();
}

void CombatCamp::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void CombatCamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatCamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatCamp_descriptor_;
}

const CombatCamp& CombatCamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

CombatCamp* CombatCamp::default_instance_ = NULL;

CombatCamp* CombatCamp::New() const {
  return new CombatCamp;
}

void CombatCamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiuin_ = 0u;
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
  }
  stunits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatCamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuin_)));
          set_has_uiuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stUnits;
        break;
      }

      // repeated .CombatUnit stUnits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUnits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stunits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stUnits;
        if (input->ExpectTag(26)) goto parse_strNickName;
        break;
      }

      // optional string strNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatCamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiUin = 1;
  if (has_uiuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuin(), output);
  }

  // repeated .CombatUnit stUnits = 2;
  for (int i = 0; i < this->stunits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stunits(i), output);
  }

  // optional string strNickName = 3;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatCamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiUin = 1;
  if (has_uiuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuin(), target);
  }

  // repeated .CombatUnit stUnits = 2;
  for (int i = 0; i < this->stunits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stunits(i), target);
  }

  // optional string strNickName = 3;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatCamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiUin = 1;
    if (has_uiuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiuin());
    }

    // optional string strNickName = 3;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

  }
  // repeated .CombatUnit stUnits = 2;
  total_size += 1 * this->stunits_size();
  for (int i = 0; i < this->stunits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stunits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatCamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatCamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatCamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatCamp::MergeFrom(const CombatCamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  stunits_.MergeFrom(from.stunits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiuin()) {
      set_uiuin(from.uiuin());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatCamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatCamp::CopyFrom(const CombatCamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatCamp::IsInitialized() const {

  return true;
}

void CombatCamp::Swap(CombatCamp* other) {
  if (other != this) {
    std::swap(uiuin_, other->uiuin_);
    std::swap(strnickname_, other->strnickname_);
    stunits_.Swap(&other->stunits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatCamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatCamp_descriptor_;
  metadata.reflection = CombatCamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_Battlefield_Notify::kICrossIDFieldNumber;
const int Zone_Battlefield_Notify::kStCampActiveFieldNumber;
const int Zone_Battlefield_Notify::kStCampPassiveFieldNumber;
const int Zone_Battlefield_Notify::kStActiveposesFieldNumber;
const int Zone_Battlefield_Notify::kStPassivePosesFieldNumber;
#endif  // !_MSC_VER

Zone_Battlefield_Notify::Zone_Battlefield_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_Battlefield_Notify::InitAsDefaultInstance() {
  stcampactive_ = const_cast< ::CombatCamp*>(&::CombatCamp::default_instance());
  stcamppassive_ = const_cast< ::CombatCamp*>(&::CombatCamp::default_instance());
}

Zone_Battlefield_Notify::Zone_Battlefield_Notify(const Zone_Battlefield_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_Battlefield_Notify::SharedCtor() {
  _cached_size_ = 0;
  icrossid_ = 0;
  stcampactive_ = NULL;
  stcamppassive_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_Battlefield_Notify::~Zone_Battlefield_Notify() {
  SharedDtor();
}

void Zone_Battlefield_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stcampactive_;
    delete stcamppassive_;
  }
}

void Zone_Battlefield_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_Battlefield_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_Battlefield_Notify_descriptor_;
}

const Zone_Battlefield_Notify& Zone_Battlefield_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_Battlefield_Notify* Zone_Battlefield_Notify::default_instance_ = NULL;

Zone_Battlefield_Notify* Zone_Battlefield_Notify::New() const {
  return new Zone_Battlefield_Notify;
}

void Zone_Battlefield_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icrossid_ = 0;
    if (has_stcampactive()) {
      if (stcampactive_ != NULL) stcampactive_->::CombatCamp::Clear();
    }
    if (has_stcamppassive()) {
      if (stcamppassive_ != NULL) stcamppassive_->::CombatCamp::Clear();
    }
  }
  stactiveposes_.Clear();
  stpassiveposes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_Battlefield_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iCrossID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icrossid_)));
          set_has_icrossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stCampActive;
        break;
      }

      // optional .CombatCamp stCampActive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stCampActive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stcampactive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stCampPassive;
        break;
      }

      // optional .CombatCamp stCampPassive = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stCampPassive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stcamppassive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stActiveposes;
        break;
      }

      // repeated .UnitPosition stActiveposes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stActiveposes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stactiveposes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stActiveposes;
        if (input->ExpectTag(50)) goto parse_stPassivePoses;
        break;
      }

      // repeated .UnitPosition stPassivePoses = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPassivePoses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stpassiveposes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stPassivePoses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_Battlefield_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iCrossID = 1;
  if (has_icrossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icrossid(), output);
  }

  // optional .CombatCamp stCampActive = 2;
  if (has_stcampactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stcampactive(), output);
  }

  // optional .CombatCamp stCampPassive = 3;
  if (has_stcamppassive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stcamppassive(), output);
  }

  // repeated .UnitPosition stActiveposes = 5;
  for (int i = 0; i < this->stactiveposes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stactiveposes(i), output);
  }

  // repeated .UnitPosition stPassivePoses = 6;
  for (int i = 0; i < this->stpassiveposes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stpassiveposes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_Battlefield_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iCrossID = 1;
  if (has_icrossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icrossid(), target);
  }

  // optional .CombatCamp stCampActive = 2;
  if (has_stcampactive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stcampactive(), target);
  }

  // optional .CombatCamp stCampPassive = 3;
  if (has_stcamppassive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stcamppassive(), target);
  }

  // repeated .UnitPosition stActiveposes = 5;
  for (int i = 0; i < this->stactiveposes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stactiveposes(i), target);
  }

  // repeated .UnitPosition stPassivePoses = 6;
  for (int i = 0; i < this->stpassiveposes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stpassiveposes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_Battlefield_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iCrossID = 1;
    if (has_icrossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icrossid());
    }

    // optional .CombatCamp stCampActive = 2;
    if (has_stcampactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stcampactive());
    }

    // optional .CombatCamp stCampPassive = 3;
    if (has_stcamppassive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stcamppassive());
    }

  }
  // repeated .UnitPosition stActiveposes = 5;
  total_size += 1 * this->stactiveposes_size();
  for (int i = 0; i < this->stactiveposes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stactiveposes(i));
  }

  // repeated .UnitPosition stPassivePoses = 6;
  total_size += 1 * this->stpassiveposes_size();
  for (int i = 0; i < this->stpassiveposes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stpassiveposes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_Battlefield_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_Battlefield_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_Battlefield_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_Battlefield_Notify::MergeFrom(const Zone_Battlefield_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stactiveposes_.MergeFrom(from.stactiveposes_);
  stpassiveposes_.MergeFrom(from.stpassiveposes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icrossid()) {
      set_icrossid(from.icrossid());
    }
    if (from.has_stcampactive()) {
      mutable_stcampactive()->::CombatCamp::MergeFrom(from.stcampactive());
    }
    if (from.has_stcamppassive()) {
      mutable_stcamppassive()->::CombatCamp::MergeFrom(from.stcamppassive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_Battlefield_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_Battlefield_Notify::CopyFrom(const Zone_Battlefield_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_Battlefield_Notify::IsInitialized() const {

  return true;
}

void Zone_Battlefield_Notify::Swap(Zone_Battlefield_Notify* other) {
  if (other != this) {
    std::swap(icrossid_, other->icrossid_);
    std::swap(stcampactive_, other->stcampactive_);
    std::swap(stcamppassive_, other->stcamppassive_);
    stactiveposes_.Swap(&other->stactiveposes_);
    stpassiveposes_.Swap(&other->stpassiveposes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_Battlefield_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_Battlefield_Notify_descriptor_;
  metadata.reflection = Zone_Battlefield_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_CombatMove_Request::kStPathFieldNumber;
#endif  // !_MSC_VER

Zone_CombatMove_Request::Zone_CombatMove_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_CombatMove_Request::InitAsDefaultInstance() {
  stpath_ = const_cast< ::UnitPath*>(&::UnitPath::default_instance());
}

Zone_CombatMove_Request::Zone_CombatMove_Request(const Zone_CombatMove_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_CombatMove_Request::SharedCtor() {
  _cached_size_ = 0;
  stpath_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_CombatMove_Request::~Zone_CombatMove_Request() {
  SharedDtor();
}

void Zone_CombatMove_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stpath_;
  }
}

void Zone_CombatMove_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_CombatMove_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_CombatMove_Request_descriptor_;
}

const Zone_CombatMove_Request& Zone_CombatMove_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_CombatMove_Request* Zone_CombatMove_Request::default_instance_ = NULL;

Zone_CombatMove_Request* Zone_CombatMove_Request::New() const {
  return new Zone_CombatMove_Request;
}

void Zone_CombatMove_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stpath()) {
      if (stpath_ != NULL) stpath_->::UnitPath::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_CombatMove_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UnitPath stPath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_CombatMove_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .UnitPath stPath = 1;
  if (has_stpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_CombatMove_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .UnitPath stPath = 1;
  if (has_stpath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_CombatMove_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UnitPath stPath = 1;
    if (has_stpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_CombatMove_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_CombatMove_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_CombatMove_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_CombatMove_Request::MergeFrom(const Zone_CombatMove_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stpath()) {
      mutable_stpath()->::UnitPath::MergeFrom(from.stpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_CombatMove_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_CombatMove_Request::CopyFrom(const Zone_CombatMove_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_CombatMove_Request::IsInitialized() const {

  return true;
}

void Zone_CombatMove_Request::Swap(Zone_CombatMove_Request* other) {
  if (other != this) {
    std::swap(stpath_, other->stpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_CombatMove_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_CombatMove_Request_descriptor_;
  metadata.reflection = Zone_CombatMove_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_CombatMove_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_CombatMove_Response::Zone_CombatMove_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_CombatMove_Response::InitAsDefaultInstance() {
}

Zone_CombatMove_Response::Zone_CombatMove_Response(const Zone_CombatMove_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_CombatMove_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_CombatMove_Response::~Zone_CombatMove_Response() {
  SharedDtor();
}

void Zone_CombatMove_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_CombatMove_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_CombatMove_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_CombatMove_Response_descriptor_;
}

const Zone_CombatMove_Response& Zone_CombatMove_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_CombatMove_Response* Zone_CombatMove_Response::default_instance_ = NULL;

Zone_CombatMove_Response* Zone_CombatMove_Response::New() const {
  return new Zone_CombatMove_Response;
}

void Zone_CombatMove_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_CombatMove_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_CombatMove_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_CombatMove_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_CombatMove_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_CombatMove_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_CombatMove_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_CombatMove_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_CombatMove_Response::MergeFrom(const Zone_CombatMove_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_CombatMove_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_CombatMove_Response::CopyFrom(const Zone_CombatMove_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_CombatMove_Response::IsInitialized() const {

  return true;
}

void Zone_CombatMove_Response::Swap(Zone_CombatMove_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_CombatMove_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_CombatMove_Response_descriptor_;
  metadata.reflection = Zone_CombatMove_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_CombatAction_Request::kETypeFieldNumber;
const int Zone_CombatAction_Request::kICastSkillIDFieldNumber;
const int Zone_CombatAction_Request::kIItemIDFieldNumber;
const int Zone_CombatAction_Request::kStPosFieldNumber;
const int Zone_CombatAction_Request::kIDirectionFieldNumber;
#endif  // !_MSC_VER

Zone_CombatAction_Request::Zone_CombatAction_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_CombatAction_Request::InitAsDefaultInstance() {
  stpos_ = const_cast< ::UnitPosition*>(&::UnitPosition::default_instance());
}

Zone_CombatAction_Request::Zone_CombatAction_Request(const Zone_CombatAction_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_CombatAction_Request::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  icastskillid_ = 0;
  iitemid_ = 0;
  stpos_ = NULL;
  idirection_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_CombatAction_Request::~Zone_CombatAction_Request() {
  SharedDtor();
}

void Zone_CombatAction_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stpos_;
  }
}

void Zone_CombatAction_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_CombatAction_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_CombatAction_Request_descriptor_;
}

const Zone_CombatAction_Request& Zone_CombatAction_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_CombatAction_Request* Zone_CombatAction_Request::default_instance_ = NULL;

Zone_CombatAction_Request* Zone_CombatAction_Request::New() const {
  return new Zone_CombatAction_Request;
}

void Zone_CombatAction_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 0;
    icastskillid_ = 0;
    iitemid_ = 0;
    if (has_stpos()) {
      if (stpos_ != NULL) stpos_->::UnitPosition::Clear();
    }
    idirection_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_CombatAction_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ActionType eType = 1 [default = COMBAT_ACTION_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ActionType_IsValid(value)) {
            set_etype(static_cast< ::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iCastSkillID;
        break;
      }

      // optional int32 iCastSkillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCastSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icastskillid_)));
          set_has_icastskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iItemID;
        break;
      }

      // optional int32 iItemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemid_)));
          set_has_iitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stPos;
        break;
      }

      // optional .UnitPosition stPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iDirection;
        break;
      }

      // optional int32 iDirection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idirection_)));
          set_has_idirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_CombatAction_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ActionType eType = 1 [default = COMBAT_ACTION_INVALID];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional int32 iCastSkillID = 2;
  if (has_icastskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->icastskillid(), output);
  }

  // optional int32 iItemID = 3;
  if (has_iitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iitemid(), output);
  }

  // optional .UnitPosition stPos = 4;
  if (has_stpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stpos(), output);
  }

  // optional int32 iDirection = 5;
  if (has_idirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->idirection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_CombatAction_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ActionType eType = 1 [default = COMBAT_ACTION_INVALID];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional int32 iCastSkillID = 2;
  if (has_icastskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->icastskillid(), target);
  }

  // optional int32 iItemID = 3;
  if (has_iitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iitemid(), target);
  }

  // optional .UnitPosition stPos = 4;
  if (has_stpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stpos(), target);
  }

  // optional int32 iDirection = 5;
  if (has_idirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->idirection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_CombatAction_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ActionType eType = 1 [default = COMBAT_ACTION_INVALID];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional int32 iCastSkillID = 2;
    if (has_icastskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icastskillid());
    }

    // optional int32 iItemID = 3;
    if (has_iitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemid());
    }

    // optional .UnitPosition stPos = 4;
    if (has_stpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpos());
    }

    // optional int32 iDirection = 5;
    if (has_idirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idirection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_CombatAction_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_CombatAction_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_CombatAction_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_CombatAction_Request::MergeFrom(const Zone_CombatAction_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_icastskillid()) {
      set_icastskillid(from.icastskillid());
    }
    if (from.has_iitemid()) {
      set_iitemid(from.iitemid());
    }
    if (from.has_stpos()) {
      mutable_stpos()->::UnitPosition::MergeFrom(from.stpos());
    }
    if (from.has_idirection()) {
      set_idirection(from.idirection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_CombatAction_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_CombatAction_Request::CopyFrom(const Zone_CombatAction_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_CombatAction_Request::IsInitialized() const {

  return true;
}

void Zone_CombatAction_Request::Swap(Zone_CombatAction_Request* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(icastskillid_, other->icastskillid_);
    std::swap(iitemid_, other->iitemid_);
    std::swap(stpos_, other->stpos_);
    std::swap(idirection_, other->idirection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_CombatAction_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_CombatAction_Request_descriptor_;
  metadata.reflection = Zone_CombatAction_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_CombatAction_Response::kIResultFieldNumber;
const int Zone_CombatAction_Response::kETypeFieldNumber;
#endif  // !_MSC_VER

Zone_CombatAction_Response::Zone_CombatAction_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_CombatAction_Response::InitAsDefaultInstance() {
}

Zone_CombatAction_Response::Zone_CombatAction_Response(const Zone_CombatAction_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_CombatAction_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_CombatAction_Response::~Zone_CombatAction_Response() {
  SharedDtor();
}

void Zone_CombatAction_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_CombatAction_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_CombatAction_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_CombatAction_Response_descriptor_;
}

const Zone_CombatAction_Response& Zone_CombatAction_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_CombatAction_Response* Zone_CombatAction_Response::default_instance_ = NULL;

Zone_CombatAction_Response* Zone_CombatAction_Response::New() const {
  return new Zone_CombatAction_Response;
}

void Zone_CombatAction_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    etype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_CombatAction_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eType;
        break;
      }

      // optional .ActionType eType = 2 [default = COMBAT_ACTION_INVALID];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ActionType_IsValid(value)) {
            set_etype(static_cast< ::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_CombatAction_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .ActionType eType = 2 [default = COMBAT_ACTION_INVALID];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_CombatAction_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .ActionType eType = 2 [default = COMBAT_ACTION_INVALID];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_CombatAction_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .ActionType eType = 2 [default = COMBAT_ACTION_INVALID];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_CombatAction_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_CombatAction_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_CombatAction_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_CombatAction_Response::MergeFrom(const Zone_CombatAction_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_CombatAction_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_CombatAction_Response::CopyFrom(const Zone_CombatAction_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_CombatAction_Response::IsInitialized() const {

  return true;
}

void Zone_CombatAction_Response::Swap(Zone_CombatAction_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_CombatAction_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_CombatAction_Response_descriptor_;
  metadata.reflection = Zone_CombatAction_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_CombatMove_Notify::kIUnitIDFieldNumber;
const int Zone_CombatMove_Notify::kStPathFieldNumber;
const int Zone_CombatMove_Notify::kIDirectionFieldNumber;
const int Zone_CombatMove_Notify::kIMoveTypeFieldNumber;
const int Zone_CombatMove_Notify::kIAnimTypeFieldNumber;
#endif  // !_MSC_VER

Zone_CombatMove_Notify::Zone_CombatMove_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_CombatMove_Notify::InitAsDefaultInstance() {
  stpath_ = const_cast< ::UnitPath*>(&::UnitPath::default_instance());
}

Zone_CombatMove_Notify::Zone_CombatMove_Notify(const Zone_CombatMove_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_CombatMove_Notify::SharedCtor() {
  _cached_size_ = 0;
  iunitid_ = 0;
  stpath_ = NULL;
  idirection_ = 0;
  imovetype_ = 0;
  ianimtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_CombatMove_Notify::~Zone_CombatMove_Notify() {
  SharedDtor();
}

void Zone_CombatMove_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stpath_;
  }
}

void Zone_CombatMove_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_CombatMove_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_CombatMove_Notify_descriptor_;
}

const Zone_CombatMove_Notify& Zone_CombatMove_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_CombatMove_Notify* Zone_CombatMove_Notify::default_instance_ = NULL;

Zone_CombatMove_Notify* Zone_CombatMove_Notify::New() const {
  return new Zone_CombatMove_Notify;
}

void Zone_CombatMove_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iunitid_ = 0;
    if (has_stpath()) {
      if (stpath_ != NULL) stpath_->::UnitPath::Clear();
    }
    idirection_ = 0;
    imovetype_ = 0;
    ianimtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_CombatMove_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitid_)));
          set_has_iunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stPath;
        break;
      }

      // optional .UnitPath stPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iDirection;
        break;
      }

      // optional int32 iDirection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idirection_)));
          set_has_idirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iMoveType;
        break;
      }

      // optional int32 iMoveType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMoveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imovetype_)));
          set_has_imovetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iAnimType;
        break;
      }

      // optional int32 iAnimType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAnimType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ianimtype_)));
          set_has_ianimtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_CombatMove_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iunitid(), output);
  }

  // optional .UnitPath stPath = 2;
  if (has_stpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stpath(), output);
  }

  // optional int32 iDirection = 3;
  if (has_idirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idirection(), output);
  }

  // optional int32 iMoveType = 4;
  if (has_imovetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->imovetype(), output);
  }

  // optional int32 iAnimType = 5;
  if (has_ianimtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ianimtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_CombatMove_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iunitid(), target);
  }

  // optional .UnitPath stPath = 2;
  if (has_stpath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stpath(), target);
  }

  // optional int32 iDirection = 3;
  if (has_idirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idirection(), target);
  }

  // optional int32 iMoveType = 4;
  if (has_imovetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->imovetype(), target);
  }

  // optional int32 iAnimType = 5;
  if (has_ianimtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ianimtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_CombatMove_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iUnitID = 1;
    if (has_iunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitid());
    }

    // optional .UnitPath stPath = 2;
    if (has_stpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpath());
    }

    // optional int32 iDirection = 3;
    if (has_idirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idirection());
    }

    // optional int32 iMoveType = 4;
    if (has_imovetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imovetype());
    }

    // optional int32 iAnimType = 5;
    if (has_ianimtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ianimtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_CombatMove_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_CombatMove_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_CombatMove_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_CombatMove_Notify::MergeFrom(const Zone_CombatMove_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iunitid()) {
      set_iunitid(from.iunitid());
    }
    if (from.has_stpath()) {
      mutable_stpath()->::UnitPath::MergeFrom(from.stpath());
    }
    if (from.has_idirection()) {
      set_idirection(from.idirection());
    }
    if (from.has_imovetype()) {
      set_imovetype(from.imovetype());
    }
    if (from.has_ianimtype()) {
      set_ianimtype(from.ianimtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_CombatMove_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_CombatMove_Notify::CopyFrom(const Zone_CombatMove_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_CombatMove_Notify::IsInitialized() const {

  return true;
}

void Zone_CombatMove_Notify::Swap(Zone_CombatMove_Notify* other) {
  if (other != this) {
    std::swap(iunitid_, other->iunitid_);
    std::swap(stpath_, other->stpath_);
    std::swap(idirection_, other->idirection_);
    std::swap(imovetype_, other->imovetype_);
    std::swap(ianimtype_, other->ianimtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_CombatMove_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_CombatMove_Notify_descriptor_;
  metadata.reflection = Zone_CombatMove_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionTarget::kITargetUnitIDFieldNumber;
const int ActionTarget::kBIsStatSetFieldNumber;
const int ActionTarget::kICastAttrEffectFieldNumber;
const int ActionTarget::kIAttrEffectFieldNumber;
const int ActionTarget::kStCastPosFieldNumber;
const int ActionTarget::kStTargetPosFieldNumber;
const int ActionTarget::kISpecialFuncTypeFieldNumber;
#endif  // !_MSC_VER

ActionTarget::ActionTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionTarget::InitAsDefaultInstance() {
  stcastpos_ = const_cast< ::UnitPosition*>(&::UnitPosition::default_instance());
  sttargetpos_ = const_cast< ::UnitPosition*>(&::UnitPosition::default_instance());
}

ActionTarget::ActionTarget(const ActionTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionTarget::SharedCtor() {
  _cached_size_ = 0;
  itargetunitid_ = 0;
  stcastpos_ = NULL;
  sttargetpos_ = NULL;
  ispecialfunctype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionTarget::~ActionTarget() {
  SharedDtor();
}

void ActionTarget::SharedDtor() {
  if (this != default_instance_) {
    delete stcastpos_;
    delete sttargetpos_;
  }
}

void ActionTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionTarget_descriptor_;
}

const ActionTarget& ActionTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

ActionTarget* ActionTarget::default_instance_ = NULL;

ActionTarget* ActionTarget::New() const {
  return new ActionTarget;
}

void ActionTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itargetunitid_ = 0;
    if (has_stcastpos()) {
      if (stcastpos_ != NULL) stcastpos_->::UnitPosition::Clear();
    }
    if (has_sttargetpos()) {
      if (sttargetpos_ != NULL) sttargetpos_->::UnitPosition::Clear();
    }
    ispecialfunctype_ = 0;
  }
  bisstatset_.Clear();
  icastattreffect_.Clear();
  iattreffect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iTargetUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itargetunitid_)));
          set_has_itargetunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsStatSet;
        break;
      }

      // repeated bool bIsStatSet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsStatSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_bisstatset())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bisstatset())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsStatSet;
        if (input->ExpectTag(24)) goto parse_iAttrEffect;
        break;
      }

      // repeated int32 iAttrEffect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAttrEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_iattreffect())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_iattreffect())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAttrEffect;
        if (input->ExpectTag(34)) goto parse_stCastPos;
        break;
      }

      // optional .UnitPosition stCastPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stCastPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stcastpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iCastAttrEffect;
        break;
      }

      // repeated int32 iCastAttrEffect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCastAttrEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_icastattreffect())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_icastattreffect())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iCastAttrEffect;
        if (input->ExpectTag(50)) goto parse_stTargetPos;
        break;
      }

      // optional .UnitPosition stTargetPos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stTargetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttargetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iSpecialFuncType;
        break;
      }

      // optional int32 iSpecialFuncType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSpecialFuncType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispecialfunctype_)));
          set_has_ispecialfunctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iTargetUnitID = 1;
  if (has_itargetunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itargetunitid(), output);
  }

  // repeated bool bIsStatSet = 2;
  for (int i = 0; i < this->bisstatset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->bisstatset(i), output);
  }

  // repeated int32 iAttrEffect = 3;
  for (int i = 0; i < this->iattreffect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->iattreffect(i), output);
  }

  // optional .UnitPosition stCastPos = 4;
  if (has_stcastpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stcastpos(), output);
  }

  // repeated int32 iCastAttrEffect = 5;
  for (int i = 0; i < this->icastattreffect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->icastattreffect(i), output);
  }

  // optional .UnitPosition stTargetPos = 6;
  if (has_sttargetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sttargetpos(), output);
  }

  // optional int32 iSpecialFuncType = 7;
  if (has_ispecialfunctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ispecialfunctype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iTargetUnitID = 1;
  if (has_itargetunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itargetunitid(), target);
  }

  // repeated bool bIsStatSet = 2;
  for (int i = 0; i < this->bisstatset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->bisstatset(i), target);
  }

  // repeated int32 iAttrEffect = 3;
  for (int i = 0; i < this->iattreffect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->iattreffect(i), target);
  }

  // optional .UnitPosition stCastPos = 4;
  if (has_stcastpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stcastpos(), target);
  }

  // repeated int32 iCastAttrEffect = 5;
  for (int i = 0; i < this->icastattreffect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->icastattreffect(i), target);
  }

  // optional .UnitPosition stTargetPos = 6;
  if (has_sttargetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sttargetpos(), target);
  }

  // optional int32 iSpecialFuncType = 7;
  if (has_ispecialfunctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ispecialfunctype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iTargetUnitID = 1;
    if (has_itargetunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itargetunitid());
    }

    // optional .UnitPosition stCastPos = 4;
    if (has_stcastpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stcastpos());
    }

    // optional .UnitPosition stTargetPos = 6;
    if (has_sttargetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sttargetpos());
    }

    // optional int32 iSpecialFuncType = 7;
    if (has_ispecialfunctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispecialfunctype());
    }

  }
  // repeated bool bIsStatSet = 2;
  {
    int data_size = 0;
    data_size = 1 * this->bisstatset_size();
    total_size += 1 * this->bisstatset_size() + data_size;
  }

  // repeated int32 iCastAttrEffect = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->icastattreffect_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->icastattreffect(i));
    }
    total_size += 1 * this->icastattreffect_size() + data_size;
  }

  // repeated int32 iAttrEffect = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->iattreffect_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->iattreffect(i));
    }
    total_size += 1 * this->iattreffect_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionTarget::MergeFrom(const ActionTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  bisstatset_.MergeFrom(from.bisstatset_);
  icastattreffect_.MergeFrom(from.icastattreffect_);
  iattreffect_.MergeFrom(from.iattreffect_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itargetunitid()) {
      set_itargetunitid(from.itargetunitid());
    }
    if (from.has_stcastpos()) {
      mutable_stcastpos()->::UnitPosition::MergeFrom(from.stcastpos());
    }
    if (from.has_sttargetpos()) {
      mutable_sttargetpos()->::UnitPosition::MergeFrom(from.sttargetpos());
    }
    if (from.has_ispecialfunctype()) {
      set_ispecialfunctype(from.ispecialfunctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionTarget::CopyFrom(const ActionTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionTarget::IsInitialized() const {

  return true;
}

void ActionTarget::Swap(ActionTarget* other) {
  if (other != this) {
    std::swap(itargetunitid_, other->itargetunitid_);
    bisstatset_.Swap(&other->bisstatset_);
    icastattreffect_.Swap(&other->icastattreffect_);
    iattreffect_.Swap(&other->iattreffect_);
    std::swap(stcastpos_, other->stcastpos_);
    std::swap(sttargetpos_, other->sttargetpos_);
    std::swap(ispecialfunctype_, other->ispecialfunctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionTarget_descriptor_;
  metadata.reflection = ActionTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_CombatAction_Notify::kIActionUnitIDFieldNumber;
const int Zone_CombatAction_Notify::kStTargetPosFieldNumber;
const int Zone_CombatAction_Notify::kETypeFieldNumber;
const int Zone_CombatAction_Notify::kIUseSkillTypeFieldNumber;
const int Zone_CombatAction_Notify::kICostTypeFieldNumber;
const int Zone_CombatAction_Notify::kICostNumFieldNumber;
const int Zone_CombatAction_Notify::kICastSkillIDFieldNumber;
const int Zone_CombatAction_Notify::kIItemIDFieldNumber;
const int Zone_CombatAction_Notify::kStTargetsFieldNumber;
const int Zone_CombatAction_Notify::kINewTrapHPFieldNumber;
#endif  // !_MSC_VER

Zone_CombatAction_Notify::Zone_CombatAction_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_CombatAction_Notify::InitAsDefaultInstance() {
  sttargetpos_ = const_cast< ::UnitPosition*>(&::UnitPosition::default_instance());
}

Zone_CombatAction_Notify::Zone_CombatAction_Notify(const Zone_CombatAction_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_CombatAction_Notify::SharedCtor() {
  _cached_size_ = 0;
  iactionunitid_ = 0;
  sttargetpos_ = NULL;
  etype_ = 0;
  iuseskilltype_ = 0;
  icosttype_ = 0;
  icostnum_ = 0;
  icastskillid_ = 0;
  iitemid_ = 0;
  inewtraphp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_CombatAction_Notify::~Zone_CombatAction_Notify() {
  SharedDtor();
}

void Zone_CombatAction_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete sttargetpos_;
  }
}

void Zone_CombatAction_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_CombatAction_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_CombatAction_Notify_descriptor_;
}

const Zone_CombatAction_Notify& Zone_CombatAction_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_CombatAction_Notify* Zone_CombatAction_Notify::default_instance_ = NULL;

Zone_CombatAction_Notify* Zone_CombatAction_Notify::New() const {
  return new Zone_CombatAction_Notify;
}

void Zone_CombatAction_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iactionunitid_ = 0;
    if (has_sttargetpos()) {
      if (sttargetpos_ != NULL) sttargetpos_->::UnitPosition::Clear();
    }
    etype_ = 0;
    iuseskilltype_ = 0;
    icosttype_ = 0;
    icostnum_ = 0;
    icastskillid_ = 0;
    iitemid_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    inewtraphp_ = 0;
  }
  sttargets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_CombatAction_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iActionUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iactionunitid_)));
          set_has_iactionunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eType;
        break;
      }

      // optional .ActionType eType = 2 [default = COMBAT_ACTION_INVALID];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ActionType_IsValid(value)) {
            set_etype(static_cast< ::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iCastSkillID;
        break;
      }

      // optional int32 iCastSkillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCastSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icastskillid_)));
          set_has_icastskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iItemID;
        break;
      }

      // optional int32 iItemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemid_)));
          set_has_iitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stTargets;
        break;
      }

      // repeated .ActionTarget stTargets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stTargets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sttargets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stTargets;
        if (input->ExpectTag(48)) goto parse_iCostType;
        break;
      }

      // optional int32 iCostType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCostType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icosttype_)));
          set_has_icosttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iCostNum;
        break;
      }

      // optional int32 iCostNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCostNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icostnum_)));
          set_has_icostnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iUseSkillType;
        break;
      }

      // optional int32 iUseSkillType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iUseSkillType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iuseskilltype_)));
          set_has_iuseskilltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stTargetPos;
        break;
      }

      // optional .UnitPosition stTargetPos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stTargetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttargetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_iNewTrapHP;
        break;
      }

      // optional int32 iNewTrapHP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNewTrapHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inewtraphp_)));
          set_has_inewtraphp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_CombatAction_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iActionUnitID = 1;
  if (has_iactionunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iactionunitid(), output);
  }

  // optional .ActionType eType = 2 [default = COMBAT_ACTION_INVALID];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etype(), output);
  }

  // optional int32 iCastSkillID = 3;
  if (has_icastskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icastskillid(), output);
  }

  // optional int32 iItemID = 4;
  if (has_iitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iitemid(), output);
  }

  // repeated .ActionTarget stTargets = 5;
  for (int i = 0; i < this->sttargets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sttargets(i), output);
  }

  // optional int32 iCostType = 6;
  if (has_icosttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->icosttype(), output);
  }

  // optional int32 iCostNum = 7;
  if (has_icostnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->icostnum(), output);
  }

  // optional int32 iUseSkillType = 8;
  if (has_iuseskilltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->iuseskilltype(), output);
  }

  // optional .UnitPosition stTargetPos = 9;
  if (has_sttargetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sttargetpos(), output);
  }

  // optional int32 iNewTrapHP = 10;
  if (has_inewtraphp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->inewtraphp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_CombatAction_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iActionUnitID = 1;
  if (has_iactionunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iactionunitid(), target);
  }

  // optional .ActionType eType = 2 [default = COMBAT_ACTION_INVALID];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etype(), target);
  }

  // optional int32 iCastSkillID = 3;
  if (has_icastskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icastskillid(), target);
  }

  // optional int32 iItemID = 4;
  if (has_iitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iitemid(), target);
  }

  // repeated .ActionTarget stTargets = 5;
  for (int i = 0; i < this->sttargets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sttargets(i), target);
  }

  // optional int32 iCostType = 6;
  if (has_icosttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->icosttype(), target);
  }

  // optional int32 iCostNum = 7;
  if (has_icostnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->icostnum(), target);
  }

  // optional int32 iUseSkillType = 8;
  if (has_iuseskilltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->iuseskilltype(), target);
  }

  // optional .UnitPosition stTargetPos = 9;
  if (has_sttargetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->sttargetpos(), target);
  }

  // optional int32 iNewTrapHP = 10;
  if (has_inewtraphp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->inewtraphp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_CombatAction_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iActionUnitID = 1;
    if (has_iactionunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iactionunitid());
    }

    // optional .UnitPosition stTargetPos = 9;
    if (has_sttargetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sttargetpos());
    }

    // optional .ActionType eType = 2 [default = COMBAT_ACTION_INVALID];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional int32 iUseSkillType = 8;
    if (has_iuseskilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iuseskilltype());
    }

    // optional int32 iCostType = 6;
    if (has_icosttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icosttype());
    }

    // optional int32 iCostNum = 7;
    if (has_icostnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icostnum());
    }

    // optional int32 iCastSkillID = 3;
    if (has_icastskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icastskillid());
    }

    // optional int32 iItemID = 4;
    if (has_iitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemid());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 iNewTrapHP = 10;
    if (has_inewtraphp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inewtraphp());
    }

  }
  // repeated .ActionTarget stTargets = 5;
  total_size += 1 * this->sttargets_size();
  for (int i = 0; i < this->sttargets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sttargets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_CombatAction_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_CombatAction_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_CombatAction_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_CombatAction_Notify::MergeFrom(const Zone_CombatAction_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  sttargets_.MergeFrom(from.sttargets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iactionunitid()) {
      set_iactionunitid(from.iactionunitid());
    }
    if (from.has_sttargetpos()) {
      mutable_sttargetpos()->::UnitPosition::MergeFrom(from.sttargetpos());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_iuseskilltype()) {
      set_iuseskilltype(from.iuseskilltype());
    }
    if (from.has_icosttype()) {
      set_icosttype(from.icosttype());
    }
    if (from.has_icostnum()) {
      set_icostnum(from.icostnum());
    }
    if (from.has_icastskillid()) {
      set_icastskillid(from.icastskillid());
    }
    if (from.has_iitemid()) {
      set_iitemid(from.iitemid());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_inewtraphp()) {
      set_inewtraphp(from.inewtraphp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_CombatAction_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_CombatAction_Notify::CopyFrom(const Zone_CombatAction_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_CombatAction_Notify::IsInitialized() const {

  return true;
}

void Zone_CombatAction_Notify::Swap(Zone_CombatAction_Notify* other) {
  if (other != this) {
    std::swap(iactionunitid_, other->iactionunitid_);
    std::swap(sttargetpos_, other->sttargetpos_);
    std::swap(etype_, other->etype_);
    std::swap(iuseskilltype_, other->iuseskilltype_);
    std::swap(icosttype_, other->icosttype_);
    std::swap(icostnum_, other->icostnum_);
    std::swap(icastskillid_, other->icastskillid_);
    std::swap(iitemid_, other->iitemid_);
    sttargets_.Swap(&other->sttargets_);
    std::swap(inewtraphp_, other->inewtraphp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_CombatAction_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_CombatAction_Notify_descriptor_;
  metadata.reflection = Zone_CombatAction_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneRewardInfo::kIRewardTypeFieldNumber;
const int OneRewardInfo::kIItemIDFieldNumber;
const int OneRewardInfo::kIResTypeFieldNumber;
const int OneRewardInfo::kIDropNumFieldNumber;
#endif  // !_MSC_VER

OneRewardInfo::OneRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneRewardInfo::InitAsDefaultInstance() {
}

OneRewardInfo::OneRewardInfo(const OneRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  irewardtype_ = 0;
  iitemid_ = 0;
  irestype_ = 0;
  idropnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneRewardInfo::~OneRewardInfo() {
  SharedDtor();
}

void OneRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneRewardInfo_descriptor_;
}

const OneRewardInfo& OneRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

OneRewardInfo* OneRewardInfo::default_instance_ = NULL;

OneRewardInfo* OneRewardInfo::New() const {
  return new OneRewardInfo;
}

void OneRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    irewardtype_ = 0;
    iitemid_ = 0;
    irestype_ = 0;
    idropnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iRewardType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irewardtype_)));
          set_has_irewardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iItemID;
        break;
      }

      // optional int32 iItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemid_)));
          set_has_iitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iResType;
        break;
      }

      // optional int32 iResType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iResType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irestype_)));
          set_has_irestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iDropNum;
        break;
      }

      // optional int32 iDropNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDropNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idropnum_)));
          set_has_idropnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iRewardType = 1;
  if (has_irewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->irewardtype(), output);
  }

  // optional int32 iItemID = 2;
  if (has_iitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iitemid(), output);
  }

  // optional int32 iResType = 3;
  if (has_irestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->irestype(), output);
  }

  // optional int32 iDropNum = 4;
  if (has_idropnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->idropnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iRewardType = 1;
  if (has_irewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->irewardtype(), target);
  }

  // optional int32 iItemID = 2;
  if (has_iitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iitemid(), target);
  }

  // optional int32 iResType = 3;
  if (has_irestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->irestype(), target);
  }

  // optional int32 iDropNum = 4;
  if (has_idropnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->idropnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iRewardType = 1;
    if (has_irewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irewardtype());
    }

    // optional int32 iItemID = 2;
    if (has_iitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemid());
    }

    // optional int32 iResType = 3;
    if (has_irestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irestype());
    }

    // optional int32 iDropNum = 4;
    if (has_idropnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idropnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneRewardInfo::MergeFrom(const OneRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_irewardtype()) {
      set_irewardtype(from.irewardtype());
    }
    if (from.has_iitemid()) {
      set_iitemid(from.iitemid());
    }
    if (from.has_irestype()) {
      set_irestype(from.irestype());
    }
    if (from.has_idropnum()) {
      set_idropnum(from.idropnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneRewardInfo::CopyFrom(const OneRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneRewardInfo::IsInitialized() const {

  return true;
}

void OneRewardInfo::Swap(OneRewardInfo* other) {
  if (other != this) {
    std::swap(irewardtype_, other->irewardtype_);
    std::swap(iitemid_, other->iitemid_);
    std::swap(irestype_, other->irestype_);
    std::swap(idropnum_, other->idropnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneRewardInfo_descriptor_;
  metadata.reflection = OneRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombatReward::kStRewardInfoFieldNumber;
#endif  // !_MSC_VER

CombatReward::CombatReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatReward::InitAsDefaultInstance() {
}

CombatReward::CombatReward(const CombatReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatReward::~CombatReward() {
  SharedDtor();
}

void CombatReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatReward_descriptor_;
}

const CombatReward& CombatReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

CombatReward* CombatReward::default_instance_ = NULL;

CombatReward* CombatReward::New() const {
  return new CombatReward;
}

void CombatReward::Clear() {
  strewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneRewardInfo stRewardInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strewardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stRewardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneRewardInfo stRewardInfo = 1;
  for (int i = 0; i < this->strewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneRewardInfo stRewardInfo = 1;
  for (int i = 0; i < this->strewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatReward::ByteSize() const {
  int total_size = 0;

  // repeated .OneRewardInfo stRewardInfo = 1;
  total_size += 1 * this->strewardinfo_size();
  for (int i = 0; i < this->strewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatReward::MergeFrom(const CombatReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  strewardinfo_.MergeFrom(from.strewardinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatReward::CopyFrom(const CombatReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatReward::IsInitialized() const {

  return true;
}

void CombatReward::Swap(CombatReward* other) {
  if (other != this) {
    strewardinfo_.Swap(&other->strewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatReward_descriptor_;
  metadata.reflection = CombatReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FinCombat_Notify::kBIsActiveWinFieldNumber;
const int Zone_FinCombat_Notify::kStRewardFieldNumber;
#endif  // !_MSC_VER

Zone_FinCombat_Notify::Zone_FinCombat_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FinCombat_Notify::InitAsDefaultInstance() {
  streward_ = const_cast< ::CombatReward*>(&::CombatReward::default_instance());
}

Zone_FinCombat_Notify::Zone_FinCombat_Notify(const Zone_FinCombat_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FinCombat_Notify::SharedCtor() {
  _cached_size_ = 0;
  bisactivewin_ = false;
  streward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FinCombat_Notify::~Zone_FinCombat_Notify() {
  SharedDtor();
}

void Zone_FinCombat_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete streward_;
  }
}

void Zone_FinCombat_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FinCombat_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FinCombat_Notify_descriptor_;
}

const Zone_FinCombat_Notify& Zone_FinCombat_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_FinCombat_Notify* Zone_FinCombat_Notify::default_instance_ = NULL;

Zone_FinCombat_Notify* Zone_FinCombat_Notify::New() const {
  return new Zone_FinCombat_Notify;
}

void Zone_FinCombat_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bisactivewin_ = false;
    if (has_streward()) {
      if (streward_ != NULL) streward_->::CombatReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FinCombat_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsActiveWin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisactivewin_)));
          set_has_bisactivewin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stReward;
        break;
      }

      // optional .CombatReward stReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FinCombat_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bIsActiveWin = 1;
  if (has_bisactivewin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bisactivewin(), output);
  }

  // optional .CombatReward stReward = 2;
  if (has_streward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->streward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FinCombat_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bIsActiveWin = 1;
  if (has_bisactivewin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bisactivewin(), target);
  }

  // optional .CombatReward stReward = 2;
  if (has_streward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->streward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FinCombat_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bIsActiveWin = 1;
    if (has_bisactivewin()) {
      total_size += 1 + 1;
    }

    // optional .CombatReward stReward = 2;
    if (has_streward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FinCombat_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FinCombat_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FinCombat_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FinCombat_Notify::MergeFrom(const Zone_FinCombat_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bisactivewin()) {
      set_bisactivewin(from.bisactivewin());
    }
    if (from.has_streward()) {
      mutable_streward()->::CombatReward::MergeFrom(from.streward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FinCombat_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FinCombat_Notify::CopyFrom(const Zone_FinCombat_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FinCombat_Notify::IsInitialized() const {

  return true;
}

void Zone_FinCombat_Notify::Swap(Zone_FinCombat_Notify* other) {
  if (other != this) {
    std::swap(bisactivewin_, other->bisactivewin_);
    std::swap(streward_, other->streward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FinCombat_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FinCombat_Notify_descriptor_;
  metadata.reflection = Zone_FinCombat_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UnitDirective_Notify::kIDirectiveFieldNumber;
const int Zone_UnitDirective_Notify::kICombatUnitIDFieldNumber;
#endif  // !_MSC_VER

Zone_UnitDirective_Notify::Zone_UnitDirective_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UnitDirective_Notify::InitAsDefaultInstance() {
}

Zone_UnitDirective_Notify::Zone_UnitDirective_Notify(const Zone_UnitDirective_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UnitDirective_Notify::SharedCtor() {
  _cached_size_ = 0;
  idirective_ = 0;
  icombatunitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UnitDirective_Notify::~Zone_UnitDirective_Notify() {
  SharedDtor();
}

void Zone_UnitDirective_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UnitDirective_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UnitDirective_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UnitDirective_Notify_descriptor_;
}

const Zone_UnitDirective_Notify& Zone_UnitDirective_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_UnitDirective_Notify* Zone_UnitDirective_Notify::default_instance_ = NULL;

Zone_UnitDirective_Notify* Zone_UnitDirective_Notify::New() const {
  return new Zone_UnitDirective_Notify;
}

void Zone_UnitDirective_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idirective_ = 0;
    icombatunitid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UnitDirective_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UnitDirectiveType iDirective = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UnitDirectiveType_IsValid(value)) {
            set_idirective(static_cast< ::UnitDirectiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iCombatUnitID;
        break;
      }

      // optional int32 iCombatUnitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCombatUnitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icombatunitid_)));
          set_has_icombatunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UnitDirective_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .UnitDirectiveType iDirective = 1;
  if (has_idirective()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->idirective(), output);
  }

  // optional int32 iCombatUnitID = 2;
  if (has_icombatunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->icombatunitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UnitDirective_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .UnitDirectiveType iDirective = 1;
  if (has_idirective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->idirective(), target);
  }

  // optional int32 iCombatUnitID = 2;
  if (has_icombatunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->icombatunitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UnitDirective_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UnitDirectiveType iDirective = 1;
    if (has_idirective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->idirective());
    }

    // optional int32 iCombatUnitID = 2;
    if (has_icombatunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icombatunitid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UnitDirective_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UnitDirective_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UnitDirective_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UnitDirective_Notify::MergeFrom(const Zone_UnitDirective_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idirective()) {
      set_idirective(from.idirective());
    }
    if (from.has_icombatunitid()) {
      set_icombatunitid(from.icombatunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UnitDirective_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UnitDirective_Notify::CopyFrom(const Zone_UnitDirective_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UnitDirective_Notify::IsInitialized() const {

  return true;
}

void Zone_UnitDirective_Notify::Swap(Zone_UnitDirective_Notify* other) {
  if (other != this) {
    std::swap(idirective_, other->idirective_);
    std::swap(icombatunitid_, other->icombatunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UnitDirective_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UnitDirective_Notify_descriptor_;
  metadata.reflection = Zone_UnitDirective_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UpdatePartnerAI_Request::kIPartnerAIIDFieldNumber;
#endif  // !_MSC_VER

Zone_UpdatePartnerAI_Request::Zone_UpdatePartnerAI_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UpdatePartnerAI_Request::InitAsDefaultInstance() {
}

Zone_UpdatePartnerAI_Request::Zone_UpdatePartnerAI_Request(const Zone_UpdatePartnerAI_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UpdatePartnerAI_Request::SharedCtor() {
  _cached_size_ = 0;
  ipartneraiid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UpdatePartnerAI_Request::~Zone_UpdatePartnerAI_Request() {
  SharedDtor();
}

void Zone_UpdatePartnerAI_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UpdatePartnerAI_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UpdatePartnerAI_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UpdatePartnerAI_Request_descriptor_;
}

const Zone_UpdatePartnerAI_Request& Zone_UpdatePartnerAI_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_UpdatePartnerAI_Request* Zone_UpdatePartnerAI_Request::default_instance_ = NULL;

Zone_UpdatePartnerAI_Request* Zone_UpdatePartnerAI_Request::New() const {
  return new Zone_UpdatePartnerAI_Request;
}

void Zone_UpdatePartnerAI_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ipartneraiid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UpdatePartnerAI_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iPartnerAIID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipartneraiid_)));
          set_has_ipartneraiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UpdatePartnerAI_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iPartnerAIID = 1;
  if (has_ipartneraiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ipartneraiid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UpdatePartnerAI_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iPartnerAIID = 1;
  if (has_ipartneraiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ipartneraiid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UpdatePartnerAI_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iPartnerAIID = 1;
    if (has_ipartneraiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipartneraiid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UpdatePartnerAI_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UpdatePartnerAI_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UpdatePartnerAI_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UpdatePartnerAI_Request::MergeFrom(const Zone_UpdatePartnerAI_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipartneraiid()) {
      set_ipartneraiid(from.ipartneraiid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UpdatePartnerAI_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UpdatePartnerAI_Request::CopyFrom(const Zone_UpdatePartnerAI_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UpdatePartnerAI_Request::IsInitialized() const {

  return true;
}

void Zone_UpdatePartnerAI_Request::Swap(Zone_UpdatePartnerAI_Request* other) {
  if (other != this) {
    std::swap(ipartneraiid_, other->ipartneraiid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UpdatePartnerAI_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UpdatePartnerAI_Request_descriptor_;
  metadata.reflection = Zone_UpdatePartnerAI_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UpdatePartnerAI_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_UpdatePartnerAI_Response::Zone_UpdatePartnerAI_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UpdatePartnerAI_Response::InitAsDefaultInstance() {
}

Zone_UpdatePartnerAI_Response::Zone_UpdatePartnerAI_Response(const Zone_UpdatePartnerAI_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UpdatePartnerAI_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UpdatePartnerAI_Response::~Zone_UpdatePartnerAI_Response() {
  SharedDtor();
}

void Zone_UpdatePartnerAI_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UpdatePartnerAI_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UpdatePartnerAI_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UpdatePartnerAI_Response_descriptor_;
}

const Zone_UpdatePartnerAI_Response& Zone_UpdatePartnerAI_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_UpdatePartnerAI_Response* Zone_UpdatePartnerAI_Response::default_instance_ = NULL;

Zone_UpdatePartnerAI_Response* Zone_UpdatePartnerAI_Response::New() const {
  return new Zone_UpdatePartnerAI_Response;
}

void Zone_UpdatePartnerAI_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UpdatePartnerAI_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UpdatePartnerAI_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UpdatePartnerAI_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UpdatePartnerAI_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UpdatePartnerAI_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UpdatePartnerAI_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UpdatePartnerAI_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UpdatePartnerAI_Response::MergeFrom(const Zone_UpdatePartnerAI_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UpdatePartnerAI_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UpdatePartnerAI_Response::CopyFrom(const Zone_UpdatePartnerAI_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UpdatePartnerAI_Response::IsInitialized() const {

  return true;
}

void Zone_UpdatePartnerAI_Response::Swap(Zone_UpdatePartnerAI_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UpdatePartnerAI_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UpdatePartnerAI_Response_descriptor_;
  metadata.reflection = Zone_UpdatePartnerAI_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffEffect::kIBuffIDFieldNumber;
const int BuffEffect::kITargetUnitIDFieldNumber;
const int BuffEffect::kIAttrTypeFieldNumber;
const int BuffEffect::kIAttrChangeFieldNumber;
const int BuffEffect::kStAddBuffFieldNumber;
#endif  // !_MSC_VER

BuffEffect::BuffEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffEffect::InitAsDefaultInstance() {
  staddbuff_ = const_cast< ::Zone_CombatAddBuff_Notify*>(&::Zone_CombatAddBuff_Notify::default_instance());
}

BuffEffect::BuffEffect(const BuffEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffEffect::SharedCtor() {
  _cached_size_ = 0;
  ibuffid_ = 0;
  itargetunitid_ = 0;
  iattrtype_ = 0;
  iattrchange_ = 0;
  staddbuff_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffEffect::~BuffEffect() {
  SharedDtor();
}

void BuffEffect::SharedDtor() {
  if (this != default_instance_) {
    delete staddbuff_;
  }
}

void BuffEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffEffect_descriptor_;
}

const BuffEffect& BuffEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

BuffEffect* BuffEffect::default_instance_ = NULL;

BuffEffect* BuffEffect::New() const {
  return new BuffEffect;
}

void BuffEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ibuffid_ = 0;
    itargetunitid_ = 0;
    iattrtype_ = 0;
    iattrchange_ = 0;
    if (has_staddbuff()) {
      if (staddbuff_ != NULL) staddbuff_->::Zone_CombatAddBuff_Notify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iBuffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ibuffid_)));
          set_has_ibuffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iAttrType;
        break;
      }

      // optional int32 iAttrType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAttrType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iattrtype_)));
          set_has_iattrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAttrChange;
        break;
      }

      // optional int32 iAttrChange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAttrChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iattrchange_)));
          set_has_iattrchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iTargetUnitID;
        break;
      }

      // optional int32 iTargetUnitID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTargetUnitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itargetunitid_)));
          set_has_itargetunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stAddBuff;
        break;
      }

      // optional .Zone_CombatAddBuff_Notify stAddBuff = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stAddBuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staddbuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iBuffID = 1;
  if (has_ibuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ibuffid(), output);
  }

  // optional int32 iAttrType = 2;
  if (has_iattrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iattrtype(), output);
  }

  // optional int32 iAttrChange = 3;
  if (has_iattrchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iattrchange(), output);
  }

  // optional int32 iTargetUnitID = 4;
  if (has_itargetunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itargetunitid(), output);
  }

  // optional .Zone_CombatAddBuff_Notify stAddBuff = 5;
  if (has_staddbuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->staddbuff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iBuffID = 1;
  if (has_ibuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ibuffid(), target);
  }

  // optional int32 iAttrType = 2;
  if (has_iattrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iattrtype(), target);
  }

  // optional int32 iAttrChange = 3;
  if (has_iattrchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iattrchange(), target);
  }

  // optional int32 iTargetUnitID = 4;
  if (has_itargetunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itargetunitid(), target);
  }

  // optional .Zone_CombatAddBuff_Notify stAddBuff = 5;
  if (has_staddbuff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->staddbuff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iBuffID = 1;
    if (has_ibuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ibuffid());
    }

    // optional int32 iTargetUnitID = 4;
    if (has_itargetunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itargetunitid());
    }

    // optional int32 iAttrType = 2;
    if (has_iattrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iattrtype());
    }

    // optional int32 iAttrChange = 3;
    if (has_iattrchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iattrchange());
    }

    // optional .Zone_CombatAddBuff_Notify stAddBuff = 5;
    if (has_staddbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staddbuff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffEffect::MergeFrom(const BuffEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ibuffid()) {
      set_ibuffid(from.ibuffid());
    }
    if (from.has_itargetunitid()) {
      set_itargetunitid(from.itargetunitid());
    }
    if (from.has_iattrtype()) {
      set_iattrtype(from.iattrtype());
    }
    if (from.has_iattrchange()) {
      set_iattrchange(from.iattrchange());
    }
    if (from.has_staddbuff()) {
      mutable_staddbuff()->::Zone_CombatAddBuff_Notify::MergeFrom(from.staddbuff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffEffect::CopyFrom(const BuffEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffEffect::IsInitialized() const {

  return true;
}

void BuffEffect::Swap(BuffEffect* other) {
  if (other != this) {
    std::swap(ibuffid_, other->ibuffid_);
    std::swap(itargetunitid_, other->itargetunitid_);
    std::swap(iattrtype_, other->iattrtype_);
    std::swap(iattrchange_, other->iattrchange_);
    std::swap(staddbuff_, other->staddbuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffEffect_descriptor_;
  metadata.reflection = BuffEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveOneBuffEffect::kIBuffIDFieldNumber;
const int RemoveOneBuffEffect::kIAttrTypeFieldNumber;
const int RemoveOneBuffEffect::kIAttrChangeFieldNumber;
#endif  // !_MSC_VER

RemoveOneBuffEffect::RemoveOneBuffEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveOneBuffEffect::InitAsDefaultInstance() {
}

RemoveOneBuffEffect::RemoveOneBuffEffect(const RemoveOneBuffEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveOneBuffEffect::SharedCtor() {
  _cached_size_ = 0;
  ibuffid_ = 0;
  iattrtype_ = 0;
  iattrchange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveOneBuffEffect::~RemoveOneBuffEffect() {
  SharedDtor();
}

void RemoveOneBuffEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveOneBuffEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveOneBuffEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveOneBuffEffect_descriptor_;
}

const RemoveOneBuffEffect& RemoveOneBuffEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

RemoveOneBuffEffect* RemoveOneBuffEffect::default_instance_ = NULL;

RemoveOneBuffEffect* RemoveOneBuffEffect::New() const {
  return new RemoveOneBuffEffect;
}

void RemoveOneBuffEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ibuffid_ = 0;
    iattrtype_ = 0;
    iattrchange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveOneBuffEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iBuffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ibuffid_)));
          set_has_ibuffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iAttrType;
        break;
      }

      // optional int32 iAttrType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAttrType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iattrtype_)));
          set_has_iattrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAttrChange;
        break;
      }

      // optional int32 iAttrChange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAttrChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iattrchange_)));
          set_has_iattrchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveOneBuffEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iBuffID = 1;
  if (has_ibuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ibuffid(), output);
  }

  // optional int32 iAttrType = 2;
  if (has_iattrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iattrtype(), output);
  }

  // optional int32 iAttrChange = 3;
  if (has_iattrchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iattrchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveOneBuffEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iBuffID = 1;
  if (has_ibuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ibuffid(), target);
  }

  // optional int32 iAttrType = 2;
  if (has_iattrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iattrtype(), target);
  }

  // optional int32 iAttrChange = 3;
  if (has_iattrchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iattrchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveOneBuffEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iBuffID = 1;
    if (has_ibuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ibuffid());
    }

    // optional int32 iAttrType = 2;
    if (has_iattrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iattrtype());
    }

    // optional int32 iAttrChange = 3;
    if (has_iattrchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iattrchange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveOneBuffEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveOneBuffEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveOneBuffEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveOneBuffEffect::MergeFrom(const RemoveOneBuffEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ibuffid()) {
      set_ibuffid(from.ibuffid());
    }
    if (from.has_iattrtype()) {
      set_iattrtype(from.iattrtype());
    }
    if (from.has_iattrchange()) {
      set_iattrchange(from.iattrchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveOneBuffEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveOneBuffEffect::CopyFrom(const RemoveOneBuffEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveOneBuffEffect::IsInitialized() const {

  return true;
}

void RemoveOneBuffEffect::Swap(RemoveOneBuffEffect* other) {
  if (other != this) {
    std::swap(ibuffid_, other->ibuffid_);
    std::swap(iattrtype_, other->iattrtype_);
    std::swap(iattrchange_, other->iattrchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveOneBuffEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveOneBuffEffect_descriptor_;
  metadata.reflection = RemoveOneBuffEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveBuffEffect::kStRemoveOnesFieldNumber;
#endif  // !_MSC_VER

RemoveBuffEffect::RemoveBuffEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveBuffEffect::InitAsDefaultInstance() {
}

RemoveBuffEffect::RemoveBuffEffect(const RemoveBuffEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveBuffEffect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveBuffEffect::~RemoveBuffEffect() {
  SharedDtor();
}

void RemoveBuffEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveBuffEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveBuffEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveBuffEffect_descriptor_;
}

const RemoveBuffEffect& RemoveBuffEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

RemoveBuffEffect* RemoveBuffEffect::default_instance_ = NULL;

RemoveBuffEffect* RemoveBuffEffect::New() const {
  return new RemoveBuffEffect;
}

void RemoveBuffEffect::Clear() {
  stremoveones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveBuffEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RemoveOneBuffEffect stRemoveOnes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRemoveOnes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stremoveones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stRemoveOnes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveBuffEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RemoveOneBuffEffect stRemoveOnes = 1;
  for (int i = 0; i < this->stremoveones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stremoveones(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveBuffEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RemoveOneBuffEffect stRemoveOnes = 1;
  for (int i = 0; i < this->stremoveones_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stremoveones(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveBuffEffect::ByteSize() const {
  int total_size = 0;

  // repeated .RemoveOneBuffEffect stRemoveOnes = 1;
  total_size += 1 * this->stremoveones_size();
  for (int i = 0; i < this->stremoveones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stremoveones(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveBuffEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveBuffEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveBuffEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveBuffEffect::MergeFrom(const RemoveBuffEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  stremoveones_.MergeFrom(from.stremoveones_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveBuffEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveBuffEffect::CopyFrom(const RemoveBuffEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveBuffEffect::IsInitialized() const {

  return true;
}

void RemoveBuffEffect::Swap(RemoveBuffEffect* other) {
  if (other != this) {
    stremoveones_.Swap(&other->stremoveones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveBuffEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveBuffEffect_descriptor_;
  metadata.reflection = RemoveBuffEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBuffInfo::kIBuffIDFieldNumber;
const int AddBuffInfo::kStRemoveBuffFieldNumber;
const int AddBuffInfo::kStEffectsFieldNumber;
#endif  // !_MSC_VER

AddBuffInfo::AddBuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddBuffInfo::InitAsDefaultInstance() {
  stremovebuff_ = const_cast< ::RemoveBuffEffect*>(&::RemoveBuffEffect::default_instance());
  steffects_ = const_cast< ::BuffEffect*>(&::BuffEffect::default_instance());
}

AddBuffInfo::AddBuffInfo(const AddBuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddBuffInfo::SharedCtor() {
  _cached_size_ = 0;
  ibuffid_ = 0;
  stremovebuff_ = NULL;
  steffects_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBuffInfo::~AddBuffInfo() {
  SharedDtor();
}

void AddBuffInfo::SharedDtor() {
  if (this != default_instance_) {
    delete stremovebuff_;
    delete steffects_;
  }
}

void AddBuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBuffInfo_descriptor_;
}

const AddBuffInfo& AddBuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

AddBuffInfo* AddBuffInfo::default_instance_ = NULL;

AddBuffInfo* AddBuffInfo::New() const {
  return new AddBuffInfo;
}

void AddBuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ibuffid_ = 0;
    if (has_stremovebuff()) {
      if (stremovebuff_ != NULL) stremovebuff_->::RemoveBuffEffect::Clear();
    }
    if (has_steffects()) {
      if (steffects_ != NULL) steffects_->::BuffEffect::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iBuffID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ibuffid_)));
          set_has_ibuffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRemoveBuff;
        break;
      }

      // optional .RemoveBuffEffect stRemoveBuff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRemoveBuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stremovebuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stEffects;
        break;
      }

      // optional .BuffEffect stEffects = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stEffects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steffects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iBuffID = 1;
  if (has_ibuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ibuffid(), output);
  }

  // optional .RemoveBuffEffect stRemoveBuff = 2;
  if (has_stremovebuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stremovebuff(), output);
  }

  // optional .BuffEffect stEffects = 3;
  if (has_steffects()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->steffects(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iBuffID = 1;
  if (has_ibuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ibuffid(), target);
  }

  // optional .RemoveBuffEffect stRemoveBuff = 2;
  if (has_stremovebuff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stremovebuff(), target);
  }

  // optional .BuffEffect stEffects = 3;
  if (has_steffects()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->steffects(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBuffInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iBuffID = 1;
    if (has_ibuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ibuffid());
    }

    // optional .RemoveBuffEffect stRemoveBuff = 2;
    if (has_stremovebuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stremovebuff());
    }

    // optional .BuffEffect stEffects = 3;
    if (has_steffects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->steffects());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBuffInfo::MergeFrom(const AddBuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ibuffid()) {
      set_ibuffid(from.ibuffid());
    }
    if (from.has_stremovebuff()) {
      mutable_stremovebuff()->::RemoveBuffEffect::MergeFrom(from.stremovebuff());
    }
    if (from.has_steffects()) {
      mutable_steffects()->::BuffEffect::MergeFrom(from.steffects());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBuffInfo::CopyFrom(const AddBuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBuffInfo::IsInitialized() const {

  return true;
}

void AddBuffInfo::Swap(AddBuffInfo* other) {
  if (other != this) {
    std::swap(ibuffid_, other->ibuffid_);
    std::swap(stremovebuff_, other->stremovebuff_);
    std::swap(steffects_, other->steffects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBuffInfo_descriptor_;
  metadata.reflection = AddBuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneAddBuff::kITargetUnitIDFieldNumber;
const int OneAddBuff::kStBuffInfoFieldNumber;
#endif  // !_MSC_VER

OneAddBuff::OneAddBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneAddBuff::InitAsDefaultInstance() {
}

OneAddBuff::OneAddBuff(const OneAddBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneAddBuff::SharedCtor() {
  _cached_size_ = 0;
  itargetunitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneAddBuff::~OneAddBuff() {
  SharedDtor();
}

void OneAddBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneAddBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneAddBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneAddBuff_descriptor_;
}

const OneAddBuff& OneAddBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

OneAddBuff* OneAddBuff::default_instance_ = NULL;

OneAddBuff* OneAddBuff::New() const {
  return new OneAddBuff;
}

void OneAddBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itargetunitid_ = 0;
  }
  stbuffinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneAddBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iTargetUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itargetunitid_)));
          set_has_itargetunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stBuffInfo;
        break;
      }

      // repeated .AddBuffInfo stBuffInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stBuffInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stbuffinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stBuffInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneAddBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iTargetUnitID = 1;
  if (has_itargetunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itargetunitid(), output);
  }

  // repeated .AddBuffInfo stBuffInfo = 2;
  for (int i = 0; i < this->stbuffinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stbuffinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneAddBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iTargetUnitID = 1;
  if (has_itargetunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itargetunitid(), target);
  }

  // repeated .AddBuffInfo stBuffInfo = 2;
  for (int i = 0; i < this->stbuffinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stbuffinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneAddBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iTargetUnitID = 1;
    if (has_itargetunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itargetunitid());
    }

  }
  // repeated .AddBuffInfo stBuffInfo = 2;
  total_size += 1 * this->stbuffinfo_size();
  for (int i = 0; i < this->stbuffinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stbuffinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneAddBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneAddBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneAddBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneAddBuff::MergeFrom(const OneAddBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  stbuffinfo_.MergeFrom(from.stbuffinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itargetunitid()) {
      set_itargetunitid(from.itargetunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneAddBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneAddBuff::CopyFrom(const OneAddBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneAddBuff::IsInitialized() const {

  return true;
}

void OneAddBuff::Swap(OneAddBuff* other) {
  if (other != this) {
    std::swap(itargetunitid_, other->itargetunitid_);
    stbuffinfo_.Swap(&other->stbuffinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneAddBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneAddBuff_descriptor_;
  metadata.reflection = OneAddBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_CombatAddBuff_Notify::kICastUnitIDFieldNumber;
const int Zone_CombatAddBuff_Notify::kStAddBuffsFieldNumber;
#endif  // !_MSC_VER

Zone_CombatAddBuff_Notify::Zone_CombatAddBuff_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_CombatAddBuff_Notify::InitAsDefaultInstance() {
}

Zone_CombatAddBuff_Notify::Zone_CombatAddBuff_Notify(const Zone_CombatAddBuff_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_CombatAddBuff_Notify::SharedCtor() {
  _cached_size_ = 0;
  icastunitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_CombatAddBuff_Notify::~Zone_CombatAddBuff_Notify() {
  SharedDtor();
}

void Zone_CombatAddBuff_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_CombatAddBuff_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_CombatAddBuff_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_CombatAddBuff_Notify_descriptor_;
}

const Zone_CombatAddBuff_Notify& Zone_CombatAddBuff_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_CombatAddBuff_Notify* Zone_CombatAddBuff_Notify::default_instance_ = NULL;

Zone_CombatAddBuff_Notify* Zone_CombatAddBuff_Notify::New() const {
  return new Zone_CombatAddBuff_Notify;
}

void Zone_CombatAddBuff_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icastunitid_ = 0;
  }
  staddbuffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_CombatAddBuff_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iCastUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icastunitid_)));
          set_has_icastunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stAddBuffs;
        break;
      }

      // repeated .OneAddBuff stAddBuffs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stAddBuffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_staddbuffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stAddBuffs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_CombatAddBuff_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iCastUnitID = 1;
  if (has_icastunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icastunitid(), output);
  }

  // repeated .OneAddBuff stAddBuffs = 2;
  for (int i = 0; i < this->staddbuffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->staddbuffs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_CombatAddBuff_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iCastUnitID = 1;
  if (has_icastunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icastunitid(), target);
  }

  // repeated .OneAddBuff stAddBuffs = 2;
  for (int i = 0; i < this->staddbuffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->staddbuffs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_CombatAddBuff_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iCastUnitID = 1;
    if (has_icastunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icastunitid());
    }

  }
  // repeated .OneAddBuff stAddBuffs = 2;
  total_size += 1 * this->staddbuffs_size();
  for (int i = 0; i < this->staddbuffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->staddbuffs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_CombatAddBuff_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_CombatAddBuff_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_CombatAddBuff_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_CombatAddBuff_Notify::MergeFrom(const Zone_CombatAddBuff_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  staddbuffs_.MergeFrom(from.staddbuffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icastunitid()) {
      set_icastunitid(from.icastunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_CombatAddBuff_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_CombatAddBuff_Notify::CopyFrom(const Zone_CombatAddBuff_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_CombatAddBuff_Notify::IsInitialized() const {

  return true;
}

void Zone_CombatAddBuff_Notify::Swap(Zone_CombatAddBuff_Notify* other) {
  if (other != this) {
    std::swap(icastunitid_, other->icastunitid_);
    staddbuffs_.Swap(&other->staddbuffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_CombatAddBuff_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_CombatAddBuff_Notify_descriptor_;
  metadata.reflection = Zone_CombatAddBuff_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_DoBuffEffect_Notify::kITriggerUnitIDFieldNumber;
const int Zone_DoBuffEffect_Notify::kStEffectsFieldNumber;
#endif  // !_MSC_VER

Zone_DoBuffEffect_Notify::Zone_DoBuffEffect_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_DoBuffEffect_Notify::InitAsDefaultInstance() {
}

Zone_DoBuffEffect_Notify::Zone_DoBuffEffect_Notify(const Zone_DoBuffEffect_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_DoBuffEffect_Notify::SharedCtor() {
  _cached_size_ = 0;
  itriggerunitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_DoBuffEffect_Notify::~Zone_DoBuffEffect_Notify() {
  SharedDtor();
}

void Zone_DoBuffEffect_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_DoBuffEffect_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_DoBuffEffect_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_DoBuffEffect_Notify_descriptor_;
}

const Zone_DoBuffEffect_Notify& Zone_DoBuffEffect_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_DoBuffEffect_Notify* Zone_DoBuffEffect_Notify::default_instance_ = NULL;

Zone_DoBuffEffect_Notify* Zone_DoBuffEffect_Notify::New() const {
  return new Zone_DoBuffEffect_Notify;
}

void Zone_DoBuffEffect_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itriggerunitid_ = 0;
  }
  steffects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_DoBuffEffect_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iTriggerUnitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itriggerunitid_)));
          set_has_itriggerunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stEffects;
        break;
      }

      // repeated .BuffEffect stEffects = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stEffects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_steffects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stEffects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_DoBuffEffect_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iTriggerUnitID = 2;
  if (has_itriggerunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itriggerunitid(), output);
  }

  // repeated .BuffEffect stEffects = 3;
  for (int i = 0; i < this->steffects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->steffects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_DoBuffEffect_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iTriggerUnitID = 2;
  if (has_itriggerunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itriggerunitid(), target);
  }

  // repeated .BuffEffect stEffects = 3;
  for (int i = 0; i < this->steffects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->steffects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_DoBuffEffect_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iTriggerUnitID = 2;
    if (has_itriggerunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itriggerunitid());
    }

  }
  // repeated .BuffEffect stEffects = 3;
  total_size += 1 * this->steffects_size();
  for (int i = 0; i < this->steffects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steffects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_DoBuffEffect_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_DoBuffEffect_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_DoBuffEffect_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_DoBuffEffect_Notify::MergeFrom(const Zone_DoBuffEffect_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  steffects_.MergeFrom(from.steffects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itriggerunitid()) {
      set_itriggerunitid(from.itriggerunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_DoBuffEffect_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_DoBuffEffect_Notify::CopyFrom(const Zone_DoBuffEffect_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_DoBuffEffect_Notify::IsInitialized() const {

  return true;
}

void Zone_DoBuffEffect_Notify::Swap(Zone_DoBuffEffect_Notify* other) {
  if (other != this) {
    std::swap(itriggerunitid_, other->itriggerunitid_);
    steffects_.Swap(&other->steffects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_DoBuffEffect_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_DoBuffEffect_Notify_descriptor_;
  metadata.reflection = Zone_DoBuffEffect_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_RemoveBuff_Notify::kITargetUnitIDFieldNumber;
const int Zone_RemoveBuff_Notify::kStEffectsFieldNumber;
#endif  // !_MSC_VER

Zone_RemoveBuff_Notify::Zone_RemoveBuff_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_RemoveBuff_Notify::InitAsDefaultInstance() {
}

Zone_RemoveBuff_Notify::Zone_RemoveBuff_Notify(const Zone_RemoveBuff_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_RemoveBuff_Notify::SharedCtor() {
  _cached_size_ = 0;
  itargetunitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_RemoveBuff_Notify::~Zone_RemoveBuff_Notify() {
  SharedDtor();
}

void Zone_RemoveBuff_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_RemoveBuff_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_RemoveBuff_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_RemoveBuff_Notify_descriptor_;
}

const Zone_RemoveBuff_Notify& Zone_RemoveBuff_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_RemoveBuff_Notify* Zone_RemoveBuff_Notify::default_instance_ = NULL;

Zone_RemoveBuff_Notify* Zone_RemoveBuff_Notify::New() const {
  return new Zone_RemoveBuff_Notify;
}

void Zone_RemoveBuff_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itargetunitid_ = 0;
  }
  steffects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_RemoveBuff_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iTargetUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itargetunitid_)));
          set_has_itargetunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stEffects;
        break;
      }

      // repeated .RemoveBuffEffect stEffects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stEffects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_steffects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stEffects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_RemoveBuff_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iTargetUnitID = 1;
  if (has_itargetunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itargetunitid(), output);
  }

  // repeated .RemoveBuffEffect stEffects = 2;
  for (int i = 0; i < this->steffects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->steffects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_RemoveBuff_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iTargetUnitID = 1;
  if (has_itargetunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itargetunitid(), target);
  }

  // repeated .RemoveBuffEffect stEffects = 2;
  for (int i = 0; i < this->steffects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->steffects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_RemoveBuff_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iTargetUnitID = 1;
    if (has_itargetunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itargetunitid());
    }

  }
  // repeated .RemoveBuffEffect stEffects = 2;
  total_size += 1 * this->steffects_size();
  for (int i = 0; i < this->steffects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steffects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_RemoveBuff_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_RemoveBuff_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_RemoveBuff_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_RemoveBuff_Notify::MergeFrom(const Zone_RemoveBuff_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  steffects_.MergeFrom(from.steffects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itargetunitid()) {
      set_itargetunitid(from.itargetunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_RemoveBuff_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_RemoveBuff_Notify::CopyFrom(const Zone_RemoveBuff_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_RemoveBuff_Notify::IsInitialized() const {

  return true;
}

void Zone_RemoveBuff_Notify::Swap(Zone_RemoveBuff_Notify* other) {
  if (other != this) {
    std::swap(itargetunitid_, other->itargetunitid_);
    steffects_.Swap(&other->steffects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_RemoveBuff_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_RemoveBuff_Notify_descriptor_;
  metadata.reflection = Zone_RemoveBuff_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_AddCombatUnit_Notify::kICampTypeFieldNumber;
const int Zone_AddCombatUnit_Notify::kStUnitFieldNumber;
#endif  // !_MSC_VER

Zone_AddCombatUnit_Notify::Zone_AddCombatUnit_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_AddCombatUnit_Notify::InitAsDefaultInstance() {
  stunit_ = const_cast< ::CombatUnit*>(&::CombatUnit::default_instance());
}

Zone_AddCombatUnit_Notify::Zone_AddCombatUnit_Notify(const Zone_AddCombatUnit_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_AddCombatUnit_Notify::SharedCtor() {
  _cached_size_ = 0;
  icamptype_ = 0;
  stunit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_AddCombatUnit_Notify::~Zone_AddCombatUnit_Notify() {
  SharedDtor();
}

void Zone_AddCombatUnit_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stunit_;
  }
}

void Zone_AddCombatUnit_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_AddCombatUnit_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_AddCombatUnit_Notify_descriptor_;
}

const Zone_AddCombatUnit_Notify& Zone_AddCombatUnit_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_AddCombatUnit_Notify* Zone_AddCombatUnit_Notify::default_instance_ = NULL;

Zone_AddCombatUnit_Notify* Zone_AddCombatUnit_Notify::New() const {
  return new Zone_AddCombatUnit_Notify;
}

void Zone_AddCombatUnit_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icamptype_ = 0;
    if (has_stunit()) {
      if (stunit_ != NULL) stunit_->::CombatUnit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_AddCombatUnit_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iCampType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icamptype_)));
          set_has_icamptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stUnit;
        break;
      }

      // optional .CombatUnit stUnit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stunit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_AddCombatUnit_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iCampType = 1;
  if (has_icamptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icamptype(), output);
  }

  // optional .CombatUnit stUnit = 2;
  if (has_stunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stunit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_AddCombatUnit_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iCampType = 1;
  if (has_icamptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icamptype(), target);
  }

  // optional .CombatUnit stUnit = 2;
  if (has_stunit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stunit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_AddCombatUnit_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iCampType = 1;
    if (has_icamptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icamptype());
    }

    // optional .CombatUnit stUnit = 2;
    if (has_stunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stunit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_AddCombatUnit_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_AddCombatUnit_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_AddCombatUnit_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_AddCombatUnit_Notify::MergeFrom(const Zone_AddCombatUnit_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icamptype()) {
      set_icamptype(from.icamptype());
    }
    if (from.has_stunit()) {
      mutable_stunit()->::CombatUnit::MergeFrom(from.stunit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_AddCombatUnit_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_AddCombatUnit_Notify::CopyFrom(const Zone_AddCombatUnit_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_AddCombatUnit_Notify::IsInitialized() const {

  return true;
}

void Zone_AddCombatUnit_Notify::Swap(Zone_AddCombatUnit_Notify* other) {
  if (other != this) {
    std::swap(icamptype_, other->icamptype_);
    std::swap(stunit_, other->stunit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_AddCombatUnit_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_AddCombatUnit_Notify_descriptor_;
  metadata.reflection = Zone_AddCombatUnit_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_KillCombatUnit_Notify::kIUnitIDFieldNumber;
#endif  // !_MSC_VER

Zone_KillCombatUnit_Notify::Zone_KillCombatUnit_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_KillCombatUnit_Notify::InitAsDefaultInstance() {
}

Zone_KillCombatUnit_Notify::Zone_KillCombatUnit_Notify(const Zone_KillCombatUnit_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_KillCombatUnit_Notify::SharedCtor() {
  _cached_size_ = 0;
  iunitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_KillCombatUnit_Notify::~Zone_KillCombatUnit_Notify() {
  SharedDtor();
}

void Zone_KillCombatUnit_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_KillCombatUnit_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_KillCombatUnit_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_KillCombatUnit_Notify_descriptor_;
}

const Zone_KillCombatUnit_Notify& Zone_KillCombatUnit_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_KillCombatUnit_Notify* Zone_KillCombatUnit_Notify::default_instance_ = NULL;

Zone_KillCombatUnit_Notify* Zone_KillCombatUnit_Notify::New() const {
  return new Zone_KillCombatUnit_Notify;
}

void Zone_KillCombatUnit_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iunitid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_KillCombatUnit_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitid_)));
          set_has_iunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_KillCombatUnit_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iunitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_KillCombatUnit_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iunitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_KillCombatUnit_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iUnitID = 1;
    if (has_iunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_KillCombatUnit_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_KillCombatUnit_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_KillCombatUnit_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_KillCombatUnit_Notify::MergeFrom(const Zone_KillCombatUnit_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iunitid()) {
      set_iunitid(from.iunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_KillCombatUnit_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_KillCombatUnit_Notify::CopyFrom(const Zone_KillCombatUnit_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_KillCombatUnit_Notify::IsInitialized() const {

  return true;
}

void Zone_KillCombatUnit_Notify::Swap(Zone_KillCombatUnit_Notify* other) {
  if (other != this) {
    std::swap(iunitid_, other->iunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_KillCombatUnit_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_KillCombatUnit_Notify_descriptor_;
  metadata.reflection = Zone_KillCombatUnit_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_AddCombatTrap_Notify::kIConfigIDFieldNumber;
const int Zone_AddCombatTrap_Notify::kITrapObjIDFieldNumber;
const int Zone_AddCombatTrap_Notify::kICampFieldNumber;
const int Zone_AddCombatTrap_Notify::kStPosFieldNumber;
const int Zone_AddCombatTrap_Notify::kIDirectionFieldNumber;
#endif  // !_MSC_VER

Zone_AddCombatTrap_Notify::Zone_AddCombatTrap_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_AddCombatTrap_Notify::InitAsDefaultInstance() {
  stpos_ = const_cast< ::UnitPosition*>(&::UnitPosition::default_instance());
}

Zone_AddCombatTrap_Notify::Zone_AddCombatTrap_Notify(const Zone_AddCombatTrap_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_AddCombatTrap_Notify::SharedCtor() {
  _cached_size_ = 0;
  iconfigid_ = 0;
  itrapobjid_ = 0;
  icamp_ = 0;
  stpos_ = NULL;
  idirection_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_AddCombatTrap_Notify::~Zone_AddCombatTrap_Notify() {
  SharedDtor();
}

void Zone_AddCombatTrap_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stpos_;
  }
}

void Zone_AddCombatTrap_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_AddCombatTrap_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_AddCombatTrap_Notify_descriptor_;
}

const Zone_AddCombatTrap_Notify& Zone_AddCombatTrap_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_AddCombatTrap_Notify* Zone_AddCombatTrap_Notify::default_instance_ = NULL;

Zone_AddCombatTrap_Notify* Zone_AddCombatTrap_Notify::New() const {
  return new Zone_AddCombatTrap_Notify;
}

void Zone_AddCombatTrap_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iconfigid_ = 0;
    itrapobjid_ = 0;
    icamp_ = 0;
    if (has_stpos()) {
      if (stpos_ != NULL) stpos_->::UnitPosition::Clear();
    }
    idirection_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_AddCombatTrap_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iConfigID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconfigid_)));
          set_has_iconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iTrapObjID;
        break;
      }

      // optional int32 iTrapObjID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTrapObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itrapobjid_)));
          set_has_itrapobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iCamp;
        break;
      }

      // optional int32 iCamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icamp_)));
          set_has_icamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stPos;
        break;
      }

      // optional .UnitPosition stPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iDirection;
        break;
      }

      // optional int32 iDirection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idirection_)));
          set_has_idirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_AddCombatTrap_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iConfigID = 1;
  if (has_iconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iconfigid(), output);
  }

  // optional int32 iTrapObjID = 2;
  if (has_itrapobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itrapobjid(), output);
  }

  // optional int32 iCamp = 3;
  if (has_icamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icamp(), output);
  }

  // optional .UnitPosition stPos = 4;
  if (has_stpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stpos(), output);
  }

  // optional int32 iDirection = 5;
  if (has_idirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->idirection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_AddCombatTrap_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iConfigID = 1;
  if (has_iconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iconfigid(), target);
  }

  // optional int32 iTrapObjID = 2;
  if (has_itrapobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itrapobjid(), target);
  }

  // optional int32 iCamp = 3;
  if (has_icamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icamp(), target);
  }

  // optional .UnitPosition stPos = 4;
  if (has_stpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stpos(), target);
  }

  // optional int32 iDirection = 5;
  if (has_idirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->idirection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_AddCombatTrap_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iConfigID = 1;
    if (has_iconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconfigid());
    }

    // optional int32 iTrapObjID = 2;
    if (has_itrapobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itrapobjid());
    }

    // optional int32 iCamp = 3;
    if (has_icamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icamp());
    }

    // optional .UnitPosition stPos = 4;
    if (has_stpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpos());
    }

    // optional int32 iDirection = 5;
    if (has_idirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idirection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_AddCombatTrap_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_AddCombatTrap_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_AddCombatTrap_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_AddCombatTrap_Notify::MergeFrom(const Zone_AddCombatTrap_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iconfigid()) {
      set_iconfigid(from.iconfigid());
    }
    if (from.has_itrapobjid()) {
      set_itrapobjid(from.itrapobjid());
    }
    if (from.has_icamp()) {
      set_icamp(from.icamp());
    }
    if (from.has_stpos()) {
      mutable_stpos()->::UnitPosition::MergeFrom(from.stpos());
    }
    if (from.has_idirection()) {
      set_idirection(from.idirection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_AddCombatTrap_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_AddCombatTrap_Notify::CopyFrom(const Zone_AddCombatTrap_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_AddCombatTrap_Notify::IsInitialized() const {

  return true;
}

void Zone_AddCombatTrap_Notify::Swap(Zone_AddCombatTrap_Notify* other) {
  if (other != this) {
    std::swap(iconfigid_, other->iconfigid_);
    std::swap(itrapobjid_, other->itrapobjid_);
    std::swap(icamp_, other->icamp_);
    std::swap(stpos_, other->stpos_);
    std::swap(idirection_, other->idirection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_AddCombatTrap_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_AddCombatTrap_Notify_descriptor_;
  metadata.reflection = Zone_AddCombatTrap_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_TriggerCombatTrap_Notify::kITrapObjIDFieldNumber;
const int Zone_TriggerCombatTrap_Notify::kITriggerObjIDFieldNumber;
const int Zone_TriggerCombatTrap_Notify::kITriggerTypeFieldNumber;
const int Zone_TriggerCombatTrap_Notify::kIInterruptTypeFieldNumber;
#endif  // !_MSC_VER

Zone_TriggerCombatTrap_Notify::Zone_TriggerCombatTrap_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_TriggerCombatTrap_Notify::InitAsDefaultInstance() {
}

Zone_TriggerCombatTrap_Notify::Zone_TriggerCombatTrap_Notify(const Zone_TriggerCombatTrap_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_TriggerCombatTrap_Notify::SharedCtor() {
  _cached_size_ = 0;
  itrapobjid_ = 0;
  itriggerobjid_ = 0;
  itriggertype_ = 0;
  iinterrupttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_TriggerCombatTrap_Notify::~Zone_TriggerCombatTrap_Notify() {
  SharedDtor();
}

void Zone_TriggerCombatTrap_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_TriggerCombatTrap_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_TriggerCombatTrap_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_TriggerCombatTrap_Notify_descriptor_;
}

const Zone_TriggerCombatTrap_Notify& Zone_TriggerCombatTrap_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_TriggerCombatTrap_Notify* Zone_TriggerCombatTrap_Notify::default_instance_ = NULL;

Zone_TriggerCombatTrap_Notify* Zone_TriggerCombatTrap_Notify::New() const {
  return new Zone_TriggerCombatTrap_Notify;
}

void Zone_TriggerCombatTrap_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itrapobjid_ = 0;
    itriggerobjid_ = 0;
    itriggertype_ = 0;
    iinterrupttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_TriggerCombatTrap_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iTrapObjID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itrapobjid_)));
          set_has_itrapobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iTriggerObjID;
        break;
      }

      // optional int32 iTriggerObjID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTriggerObjID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itriggerobjid_)));
          set_has_itriggerobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iTriggerType;
        break;
      }

      // optional int32 iTriggerType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itriggertype_)));
          set_has_itriggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iInterruptType;
        break;
      }

      // optional int32 iInterruptType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iInterruptType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iinterrupttype_)));
          set_has_iinterrupttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_TriggerCombatTrap_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iTrapObjID = 1;
  if (has_itrapobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itrapobjid(), output);
  }

  // optional int32 iTriggerObjID = 2;
  if (has_itriggerobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itriggerobjid(), output);
  }

  // optional int32 iTriggerType = 3;
  if (has_itriggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itriggertype(), output);
  }

  // optional int32 iInterruptType = 4;
  if (has_iinterrupttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iinterrupttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_TriggerCombatTrap_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iTrapObjID = 1;
  if (has_itrapobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itrapobjid(), target);
  }

  // optional int32 iTriggerObjID = 2;
  if (has_itriggerobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itriggerobjid(), target);
  }

  // optional int32 iTriggerType = 3;
  if (has_itriggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itriggertype(), target);
  }

  // optional int32 iInterruptType = 4;
  if (has_iinterrupttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iinterrupttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_TriggerCombatTrap_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iTrapObjID = 1;
    if (has_itrapobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itrapobjid());
    }

    // optional int32 iTriggerObjID = 2;
    if (has_itriggerobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itriggerobjid());
    }

    // optional int32 iTriggerType = 3;
    if (has_itriggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itriggertype());
    }

    // optional int32 iInterruptType = 4;
    if (has_iinterrupttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iinterrupttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_TriggerCombatTrap_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_TriggerCombatTrap_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_TriggerCombatTrap_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_TriggerCombatTrap_Notify::MergeFrom(const Zone_TriggerCombatTrap_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itrapobjid()) {
      set_itrapobjid(from.itrapobjid());
    }
    if (from.has_itriggerobjid()) {
      set_itriggerobjid(from.itriggerobjid());
    }
    if (from.has_itriggertype()) {
      set_itriggertype(from.itriggertype());
    }
    if (from.has_iinterrupttype()) {
      set_iinterrupttype(from.iinterrupttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_TriggerCombatTrap_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_TriggerCombatTrap_Notify::CopyFrom(const Zone_TriggerCombatTrap_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_TriggerCombatTrap_Notify::IsInitialized() const {

  return true;
}

void Zone_TriggerCombatTrap_Notify::Swap(Zone_TriggerCombatTrap_Notify* other) {
  if (other != this) {
    std::swap(itrapobjid_, other->itrapobjid_);
    std::swap(itriggerobjid_, other->itriggerobjid_);
    std::swap(itriggertype_, other->itriggertype_);
    std::swap(iinterrupttype_, other->iinterrupttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_TriggerCombatTrap_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_TriggerCombatTrap_Notify_descriptor_;
  metadata.reflection = Zone_TriggerCombatTrap_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_DeleteCombatTrap_Notify::kITrapObjIDFieldNumber;
#endif  // !_MSC_VER

Zone_DeleteCombatTrap_Notify::Zone_DeleteCombatTrap_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_DeleteCombatTrap_Notify::InitAsDefaultInstance() {
}

Zone_DeleteCombatTrap_Notify::Zone_DeleteCombatTrap_Notify(const Zone_DeleteCombatTrap_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_DeleteCombatTrap_Notify::SharedCtor() {
  _cached_size_ = 0;
  itrapobjid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_DeleteCombatTrap_Notify::~Zone_DeleteCombatTrap_Notify() {
  SharedDtor();
}

void Zone_DeleteCombatTrap_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_DeleteCombatTrap_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_DeleteCombatTrap_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_DeleteCombatTrap_Notify_descriptor_;
}

const Zone_DeleteCombatTrap_Notify& Zone_DeleteCombatTrap_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_DeleteCombatTrap_Notify* Zone_DeleteCombatTrap_Notify::default_instance_ = NULL;

Zone_DeleteCombatTrap_Notify* Zone_DeleteCombatTrap_Notify::New() const {
  return new Zone_DeleteCombatTrap_Notify;
}

void Zone_DeleteCombatTrap_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itrapobjid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_DeleteCombatTrap_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iTrapObjID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itrapobjid_)));
          set_has_itrapobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_DeleteCombatTrap_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iTrapObjID = 1;
  if (has_itrapobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itrapobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_DeleteCombatTrap_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iTrapObjID = 1;
  if (has_itrapobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itrapobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_DeleteCombatTrap_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iTrapObjID = 1;
    if (has_itrapobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itrapobjid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_DeleteCombatTrap_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_DeleteCombatTrap_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_DeleteCombatTrap_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_DeleteCombatTrap_Notify::MergeFrom(const Zone_DeleteCombatTrap_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itrapobjid()) {
      set_itrapobjid(from.itrapobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_DeleteCombatTrap_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_DeleteCombatTrap_Notify::CopyFrom(const Zone_DeleteCombatTrap_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_DeleteCombatTrap_Notify::IsInitialized() const {

  return true;
}

void Zone_DeleteCombatTrap_Notify::Swap(Zone_DeleteCombatTrap_Notify* other) {
  if (other != this) {
    std::swap(itrapobjid_, other->itrapobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_DeleteCombatTrap_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_DeleteCombatTrap_Notify_descriptor_;
  metadata.reflection = Zone_DeleteCombatTrap_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UnitAttrChange_Notify::kIUnitIDFieldNumber;
const int Zone_UnitAttrChange_Notify::kIAttrTypeFieldNumber;
const int Zone_UnitAttrChange_Notify::kIAttrChangeFieldNumber;
#endif  // !_MSC_VER

Zone_UnitAttrChange_Notify::Zone_UnitAttrChange_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UnitAttrChange_Notify::InitAsDefaultInstance() {
}

Zone_UnitAttrChange_Notify::Zone_UnitAttrChange_Notify(const Zone_UnitAttrChange_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UnitAttrChange_Notify::SharedCtor() {
  _cached_size_ = 0;
  iunitid_ = 0;
  iattrtype_ = 0;
  iattrchange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UnitAttrChange_Notify::~Zone_UnitAttrChange_Notify() {
  SharedDtor();
}

void Zone_UnitAttrChange_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UnitAttrChange_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UnitAttrChange_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UnitAttrChange_Notify_descriptor_;
}

const Zone_UnitAttrChange_Notify& Zone_UnitAttrChange_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_UnitAttrChange_Notify* Zone_UnitAttrChange_Notify::default_instance_ = NULL;

Zone_UnitAttrChange_Notify* Zone_UnitAttrChange_Notify::New() const {
  return new Zone_UnitAttrChange_Notify;
}

void Zone_UnitAttrChange_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iunitid_ = 0;
    iattrtype_ = 0;
    iattrchange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UnitAttrChange_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitid_)));
          set_has_iunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iAttrType;
        break;
      }

      // optional int32 iAttrType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAttrType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iattrtype_)));
          set_has_iattrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAttrChange;
        break;
      }

      // optional int32 iAttrChange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAttrChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iattrchange_)));
          set_has_iattrchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UnitAttrChange_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iunitid(), output);
  }

  // optional int32 iAttrType = 2;
  if (has_iattrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iattrtype(), output);
  }

  // optional int32 iAttrChange = 3;
  if (has_iattrchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iattrchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UnitAttrChange_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iunitid(), target);
  }

  // optional int32 iAttrType = 2;
  if (has_iattrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iattrtype(), target);
  }

  // optional int32 iAttrChange = 3;
  if (has_iattrchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iattrchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UnitAttrChange_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iUnitID = 1;
    if (has_iunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitid());
    }

    // optional int32 iAttrType = 2;
    if (has_iattrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iattrtype());
    }

    // optional int32 iAttrChange = 3;
    if (has_iattrchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iattrchange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UnitAttrChange_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UnitAttrChange_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UnitAttrChange_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UnitAttrChange_Notify::MergeFrom(const Zone_UnitAttrChange_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iunitid()) {
      set_iunitid(from.iunitid());
    }
    if (from.has_iattrtype()) {
      set_iattrtype(from.iattrtype());
    }
    if (from.has_iattrchange()) {
      set_iattrchange(from.iattrchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UnitAttrChange_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UnitAttrChange_Notify::CopyFrom(const Zone_UnitAttrChange_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UnitAttrChange_Notify::IsInitialized() const {

  return true;
}

void Zone_UnitAttrChange_Notify::Swap(Zone_UnitAttrChange_Notify* other) {
  if (other != this) {
    std::swap(iunitid_, other->iunitid_);
    std::swap(iattrtype_, other->iattrtype_);
    std::swap(iattrchange_, other->iattrchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UnitAttrChange_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UnitAttrChange_Notify_descriptor_;
  metadata.reflection = Zone_UnitAttrChange_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_StartPVPCombat_Request::kUiPassiveUinFieldNumber;
#endif  // !_MSC_VER

Zone_StartPVPCombat_Request::Zone_StartPVPCombat_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_StartPVPCombat_Request::InitAsDefaultInstance() {
}

Zone_StartPVPCombat_Request::Zone_StartPVPCombat_Request(const Zone_StartPVPCombat_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_StartPVPCombat_Request::SharedCtor() {
  _cached_size_ = 0;
  uipassiveuin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_StartPVPCombat_Request::~Zone_StartPVPCombat_Request() {
  SharedDtor();
}

void Zone_StartPVPCombat_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_StartPVPCombat_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_StartPVPCombat_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_StartPVPCombat_Request_descriptor_;
}

const Zone_StartPVPCombat_Request& Zone_StartPVPCombat_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_StartPVPCombat_Request* Zone_StartPVPCombat_Request::default_instance_ = NULL;

Zone_StartPVPCombat_Request* Zone_StartPVPCombat_Request::New() const {
  return new Zone_StartPVPCombat_Request;
}

void Zone_StartPVPCombat_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uipassiveuin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_StartPVPCombat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiPassiveUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uipassiveuin_)));
          set_has_uipassiveuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_StartPVPCombat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiPassiveUin = 1;
  if (has_uipassiveuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uipassiveuin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_StartPVPCombat_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiPassiveUin = 1;
  if (has_uipassiveuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uipassiveuin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_StartPVPCombat_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiPassiveUin = 1;
    if (has_uipassiveuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uipassiveuin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_StartPVPCombat_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_StartPVPCombat_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_StartPVPCombat_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_StartPVPCombat_Request::MergeFrom(const Zone_StartPVPCombat_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uipassiveuin()) {
      set_uipassiveuin(from.uipassiveuin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_StartPVPCombat_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_StartPVPCombat_Request::CopyFrom(const Zone_StartPVPCombat_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_StartPVPCombat_Request::IsInitialized() const {

  return true;
}

void Zone_StartPVPCombat_Request::Swap(Zone_StartPVPCombat_Request* other) {
  if (other != this) {
    std::swap(uipassiveuin_, other->uipassiveuin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_StartPVPCombat_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_StartPVPCombat_Request_descriptor_;
  metadata.reflection = Zone_StartPVPCombat_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_StartPVPCombat_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_StartPVPCombat_Response::Zone_StartPVPCombat_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_StartPVPCombat_Response::InitAsDefaultInstance() {
}

Zone_StartPVPCombat_Response::Zone_StartPVPCombat_Response(const Zone_StartPVPCombat_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_StartPVPCombat_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_StartPVPCombat_Response::~Zone_StartPVPCombat_Response() {
  SharedDtor();
}

void Zone_StartPVPCombat_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_StartPVPCombat_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_StartPVPCombat_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_StartPVPCombat_Response_descriptor_;
}

const Zone_StartPVPCombat_Response& Zone_StartPVPCombat_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_StartPVPCombat_Response* Zone_StartPVPCombat_Response::default_instance_ = NULL;

Zone_StartPVPCombat_Response* Zone_StartPVPCombat_Response::New() const {
  return new Zone_StartPVPCombat_Response;
}

void Zone_StartPVPCombat_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_StartPVPCombat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_StartPVPCombat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_StartPVPCombat_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_StartPVPCombat_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_StartPVPCombat_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_StartPVPCombat_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_StartPVPCombat_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_StartPVPCombat_Response::MergeFrom(const Zone_StartPVPCombat_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_StartPVPCombat_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_StartPVPCombat_Response::CopyFrom(const Zone_StartPVPCombat_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_StartPVPCombat_Response::IsInitialized() const {

  return true;
}

void Zone_StartPVPCombat_Response::Swap(Zone_StartPVPCombat_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_StartPVPCombat_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_StartPVPCombat_Response_descriptor_;
  metadata.reflection = Zone_StartPVPCombat_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_StartPVPCombat_Notify::kUiActiveUinFieldNumber;
const int Zone_StartPVPCombat_Notify::kStrActiveNameFieldNumber;
#endif  // !_MSC_VER

Zone_StartPVPCombat_Notify::Zone_StartPVPCombat_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_StartPVPCombat_Notify::InitAsDefaultInstance() {
}

Zone_StartPVPCombat_Notify::Zone_StartPVPCombat_Notify(const Zone_StartPVPCombat_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_StartPVPCombat_Notify::SharedCtor() {
  _cached_size_ = 0;
  uiactiveuin_ = 0u;
  stractivename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_StartPVPCombat_Notify::~Zone_StartPVPCombat_Notify() {
  SharedDtor();
}

void Zone_StartPVPCombat_Notify::SharedDtor() {
  if (stractivename_ != &::google::protobuf::internal::kEmptyString) {
    delete stractivename_;
  }
  if (this != default_instance_) {
  }
}

void Zone_StartPVPCombat_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_StartPVPCombat_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_StartPVPCombat_Notify_descriptor_;
}

const Zone_StartPVPCombat_Notify& Zone_StartPVPCombat_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_StartPVPCombat_Notify* Zone_StartPVPCombat_Notify::default_instance_ = NULL;

Zone_StartPVPCombat_Notify* Zone_StartPVPCombat_Notify::New() const {
  return new Zone_StartPVPCombat_Notify;
}

void Zone_StartPVPCombat_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiactiveuin_ = 0u;
    if (has_stractivename()) {
      if (stractivename_ != &::google::protobuf::internal::kEmptyString) {
        stractivename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_StartPVPCombat_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiActiveUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiactiveuin_)));
          set_has_uiactiveuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strActiveName;
        break;
      }

      // optional string strActiveName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strActiveName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stractivename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stractivename().data(), this->stractivename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_StartPVPCombat_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiActiveUin = 1;
  if (has_uiactiveuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiactiveuin(), output);
  }

  // optional string strActiveName = 2;
  if (has_stractivename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stractivename().data(), this->stractivename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stractivename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_StartPVPCombat_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiActiveUin = 1;
  if (has_uiactiveuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiactiveuin(), target);
  }

  // optional string strActiveName = 2;
  if (has_stractivename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stractivename().data(), this->stractivename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stractivename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_StartPVPCombat_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiActiveUin = 1;
    if (has_uiactiveuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiactiveuin());
    }

    // optional string strActiveName = 2;
    if (has_stractivename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stractivename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_StartPVPCombat_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_StartPVPCombat_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_StartPVPCombat_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_StartPVPCombat_Notify::MergeFrom(const Zone_StartPVPCombat_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiactiveuin()) {
      set_uiactiveuin(from.uiactiveuin());
    }
    if (from.has_stractivename()) {
      set_stractivename(from.stractivename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_StartPVPCombat_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_StartPVPCombat_Notify::CopyFrom(const Zone_StartPVPCombat_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_StartPVPCombat_Notify::IsInitialized() const {

  return true;
}

void Zone_StartPVPCombat_Notify::Swap(Zone_StartPVPCombat_Notify* other) {
  if (other != this) {
    std::swap(uiactiveuin_, other->uiactiveuin_);
    std::swap(stractivename_, other->stractivename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_StartPVPCombat_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_StartPVPCombat_Notify_descriptor_;
  metadata.reflection = Zone_StartPVPCombat_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_AcceptPVPCombat_Request::kUiActiveUinFieldNumber;
const int Zone_AcceptPVPCombat_Request::kBIsAcceptFieldNumber;
#endif  // !_MSC_VER

Zone_AcceptPVPCombat_Request::Zone_AcceptPVPCombat_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_AcceptPVPCombat_Request::InitAsDefaultInstance() {
}

Zone_AcceptPVPCombat_Request::Zone_AcceptPVPCombat_Request(const Zone_AcceptPVPCombat_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_AcceptPVPCombat_Request::SharedCtor() {
  _cached_size_ = 0;
  uiactiveuin_ = 0u;
  bisaccept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_AcceptPVPCombat_Request::~Zone_AcceptPVPCombat_Request() {
  SharedDtor();
}

void Zone_AcceptPVPCombat_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_AcceptPVPCombat_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_AcceptPVPCombat_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_AcceptPVPCombat_Request_descriptor_;
}

const Zone_AcceptPVPCombat_Request& Zone_AcceptPVPCombat_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_AcceptPVPCombat_Request* Zone_AcceptPVPCombat_Request::default_instance_ = NULL;

Zone_AcceptPVPCombat_Request* Zone_AcceptPVPCombat_Request::New() const {
  return new Zone_AcceptPVPCombat_Request;
}

void Zone_AcceptPVPCombat_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiactiveuin_ = 0u;
    bisaccept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_AcceptPVPCombat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiActiveUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiactiveuin_)));
          set_has_uiactiveuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsAccept;
        break;
      }

      // optional bool bIsAccept = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsAccept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisaccept_)));
          set_has_bisaccept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_AcceptPVPCombat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiActiveUin = 1;
  if (has_uiactiveuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiactiveuin(), output);
  }

  // optional bool bIsAccept = 2;
  if (has_bisaccept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisaccept(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_AcceptPVPCombat_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiActiveUin = 1;
  if (has_uiactiveuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiactiveuin(), target);
  }

  // optional bool bIsAccept = 2;
  if (has_bisaccept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisaccept(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_AcceptPVPCombat_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiActiveUin = 1;
    if (has_uiactiveuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiactiveuin());
    }

    // optional bool bIsAccept = 2;
    if (has_bisaccept()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_AcceptPVPCombat_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_AcceptPVPCombat_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_AcceptPVPCombat_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_AcceptPVPCombat_Request::MergeFrom(const Zone_AcceptPVPCombat_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiactiveuin()) {
      set_uiactiveuin(from.uiactiveuin());
    }
    if (from.has_bisaccept()) {
      set_bisaccept(from.bisaccept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_AcceptPVPCombat_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_AcceptPVPCombat_Request::CopyFrom(const Zone_AcceptPVPCombat_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_AcceptPVPCombat_Request::IsInitialized() const {

  return true;
}

void Zone_AcceptPVPCombat_Request::Swap(Zone_AcceptPVPCombat_Request* other) {
  if (other != this) {
    std::swap(uiactiveuin_, other->uiactiveuin_);
    std::swap(bisaccept_, other->bisaccept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_AcceptPVPCombat_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_AcceptPVPCombat_Request_descriptor_;
  metadata.reflection = Zone_AcceptPVPCombat_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_AcceptPVPCombat_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_AcceptPVPCombat_Response::Zone_AcceptPVPCombat_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_AcceptPVPCombat_Response::InitAsDefaultInstance() {
}

Zone_AcceptPVPCombat_Response::Zone_AcceptPVPCombat_Response(const Zone_AcceptPVPCombat_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_AcceptPVPCombat_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_AcceptPVPCombat_Response::~Zone_AcceptPVPCombat_Response() {
  SharedDtor();
}

void Zone_AcceptPVPCombat_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_AcceptPVPCombat_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_AcceptPVPCombat_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_AcceptPVPCombat_Response_descriptor_;
}

const Zone_AcceptPVPCombat_Response& Zone_AcceptPVPCombat_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_AcceptPVPCombat_Response* Zone_AcceptPVPCombat_Response::default_instance_ = NULL;

Zone_AcceptPVPCombat_Response* Zone_AcceptPVPCombat_Response::New() const {
  return new Zone_AcceptPVPCombat_Response;
}

void Zone_AcceptPVPCombat_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_AcceptPVPCombat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_AcceptPVPCombat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_AcceptPVPCombat_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_AcceptPVPCombat_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_AcceptPVPCombat_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_AcceptPVPCombat_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_AcceptPVPCombat_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_AcceptPVPCombat_Response::MergeFrom(const Zone_AcceptPVPCombat_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_AcceptPVPCombat_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_AcceptPVPCombat_Response::CopyFrom(const Zone_AcceptPVPCombat_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_AcceptPVPCombat_Response::IsInitialized() const {

  return true;
}

void Zone_AcceptPVPCombat_Response::Swap(Zone_AcceptPVPCombat_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_AcceptPVPCombat_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_AcceptPVPCombat_Response_descriptor_;
  metadata.reflection = Zone_AcceptPVPCombat_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_RejectPVPCombat_Notify::kIPassiveUinFieldNumber;
const int Zone_RejectPVPCombat_Notify::kStrPassiveNameFieldNumber;
#endif  // !_MSC_VER

Zone_RejectPVPCombat_Notify::Zone_RejectPVPCombat_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_RejectPVPCombat_Notify::InitAsDefaultInstance() {
}

Zone_RejectPVPCombat_Notify::Zone_RejectPVPCombat_Notify(const Zone_RejectPVPCombat_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_RejectPVPCombat_Notify::SharedCtor() {
  _cached_size_ = 0;
  ipassiveuin_ = 0;
  strpassivename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_RejectPVPCombat_Notify::~Zone_RejectPVPCombat_Notify() {
  SharedDtor();
}

void Zone_RejectPVPCombat_Notify::SharedDtor() {
  if (strpassivename_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassivename_;
  }
  if (this != default_instance_) {
  }
}

void Zone_RejectPVPCombat_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_RejectPVPCombat_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_RejectPVPCombat_Notify_descriptor_;
}

const Zone_RejectPVPCombat_Notify& Zone_RejectPVPCombat_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_RejectPVPCombat_Notify* Zone_RejectPVPCombat_Notify::default_instance_ = NULL;

Zone_RejectPVPCombat_Notify* Zone_RejectPVPCombat_Notify::New() const {
  return new Zone_RejectPVPCombat_Notify;
}

void Zone_RejectPVPCombat_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ipassiveuin_ = 0;
    if (has_strpassivename()) {
      if (strpassivename_ != &::google::protobuf::internal::kEmptyString) {
        strpassivename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_RejectPVPCombat_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iPassiveUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipassiveuin_)));
          set_has_ipassiveuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strPassiveName;
        break;
      }

      // optional string strPassiveName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPassiveName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpassivename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpassivename().data(), this->strpassivename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_RejectPVPCombat_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iPassiveUin = 1;
  if (has_ipassiveuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ipassiveuin(), output);
  }

  // optional string strPassiveName = 2;
  if (has_strpassivename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassivename().data(), this->strpassivename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strpassivename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_RejectPVPCombat_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iPassiveUin = 1;
  if (has_ipassiveuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ipassiveuin(), target);
  }

  // optional string strPassiveName = 2;
  if (has_strpassivename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassivename().data(), this->strpassivename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpassivename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_RejectPVPCombat_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iPassiveUin = 1;
    if (has_ipassiveuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipassiveuin());
    }

    // optional string strPassiveName = 2;
    if (has_strpassivename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpassivename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_RejectPVPCombat_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_RejectPVPCombat_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_RejectPVPCombat_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_RejectPVPCombat_Notify::MergeFrom(const Zone_RejectPVPCombat_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipassiveuin()) {
      set_ipassiveuin(from.ipassiveuin());
    }
    if (from.has_strpassivename()) {
      set_strpassivename(from.strpassivename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_RejectPVPCombat_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_RejectPVPCombat_Notify::CopyFrom(const Zone_RejectPVPCombat_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_RejectPVPCombat_Notify::IsInitialized() const {

  return true;
}

void Zone_RejectPVPCombat_Notify::Swap(Zone_RejectPVPCombat_Notify* other) {
  if (other != this) {
    std::swap(ipassiveuin_, other->ipassiveuin_);
    std::swap(strpassivename_, other->strpassivename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_RejectPVPCombat_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_RejectPVPCombat_Notify_descriptor_;
  metadata.reflection = Zone_RejectPVPCombat_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ChangeFightState_Notify::kIUnitIDFieldNumber;
const int Zone_ChangeFightState_Notify::kBIsInFightFieldNumber;
#endif  // !_MSC_VER

Zone_ChangeFightState_Notify::Zone_ChangeFightState_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ChangeFightState_Notify::InitAsDefaultInstance() {
}

Zone_ChangeFightState_Notify::Zone_ChangeFightState_Notify(const Zone_ChangeFightState_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ChangeFightState_Notify::SharedCtor() {
  _cached_size_ = 0;
  iunitid_ = 0;
  bisinfight_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ChangeFightState_Notify::~Zone_ChangeFightState_Notify() {
  SharedDtor();
}

void Zone_ChangeFightState_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ChangeFightState_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ChangeFightState_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ChangeFightState_Notify_descriptor_;
}

const Zone_ChangeFightState_Notify& Zone_ChangeFightState_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_ChangeFightState_Notify* Zone_ChangeFightState_Notify::default_instance_ = NULL;

Zone_ChangeFightState_Notify* Zone_ChangeFightState_Notify::New() const {
  return new Zone_ChangeFightState_Notify;
}

void Zone_ChangeFightState_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iunitid_ = 0;
    bisinfight_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ChangeFightState_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitid_)));
          set_has_iunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsInFight;
        break;
      }

      // optional bool bIsInFight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsInFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisinfight_)));
          set_has_bisinfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ChangeFightState_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iunitid(), output);
  }

  // optional bool bIsInFight = 2;
  if (has_bisinfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisinfight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ChangeFightState_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iunitid(), target);
  }

  // optional bool bIsInFight = 2;
  if (has_bisinfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisinfight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ChangeFightState_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iUnitID = 1;
    if (has_iunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitid());
    }

    // optional bool bIsInFight = 2;
    if (has_bisinfight()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ChangeFightState_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ChangeFightState_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ChangeFightState_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ChangeFightState_Notify::MergeFrom(const Zone_ChangeFightState_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iunitid()) {
      set_iunitid(from.iunitid());
    }
    if (from.has_bisinfight()) {
      set_bisinfight(from.bisinfight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ChangeFightState_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ChangeFightState_Notify::CopyFrom(const Zone_ChangeFightState_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ChangeFightState_Notify::IsInitialized() const {

  return true;
}

void Zone_ChangeFightState_Notify::Swap(Zone_ChangeFightState_Notify* other) {
  if (other != this) {
    std::swap(iunitid_, other->iunitid_);
    std::swap(bisinfight_, other->bisinfight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ChangeFightState_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ChangeFightState_Notify_descriptor_;
  metadata.reflection = Zone_ChangeFightState_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneCombatUnitInfo::kIUnitIDFieldNumber;
const int OneCombatUnitInfo::kStPosFieldNumber;
#endif  // !_MSC_VER

OneCombatUnitInfo::OneCombatUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneCombatUnitInfo::InitAsDefaultInstance() {
  stpos_ = const_cast< ::UnitPosition*>(&::UnitPosition::default_instance());
}

OneCombatUnitInfo::OneCombatUnitInfo(const OneCombatUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneCombatUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  iunitid_ = 0;
  stpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneCombatUnitInfo::~OneCombatUnitInfo() {
  SharedDtor();
}

void OneCombatUnitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete stpos_;
  }
}

void OneCombatUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneCombatUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneCombatUnitInfo_descriptor_;
}

const OneCombatUnitInfo& OneCombatUnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

OneCombatUnitInfo* OneCombatUnitInfo::default_instance_ = NULL;

OneCombatUnitInfo* OneCombatUnitInfo::New() const {
  return new OneCombatUnitInfo;
}

void OneCombatUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iunitid_ = 0;
    if (has_stpos()) {
      if (stpos_ != NULL) stpos_->::UnitPosition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneCombatUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitid_)));
          set_has_iunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stPos;
        break;
      }

      // optional .UnitPosition stPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneCombatUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iunitid(), output);
  }

  // optional .UnitPosition stPos = 2;
  if (has_stpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneCombatUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iunitid(), target);
  }

  // optional .UnitPosition stPos = 2;
  if (has_stpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneCombatUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iUnitID = 1;
    if (has_iunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitid());
    }

    // optional .UnitPosition stPos = 2;
    if (has_stpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneCombatUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneCombatUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneCombatUnitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneCombatUnitInfo::MergeFrom(const OneCombatUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iunitid()) {
      set_iunitid(from.iunitid());
    }
    if (from.has_stpos()) {
      mutable_stpos()->::UnitPosition::MergeFrom(from.stpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneCombatUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneCombatUnitInfo::CopyFrom(const OneCombatUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneCombatUnitInfo::IsInitialized() const {

  return true;
}

void OneCombatUnitInfo::Swap(OneCombatUnitInfo* other) {
  if (other != this) {
    std::swap(iunitid_, other->iunitid_);
    std::swap(stpos_, other->stpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneCombatUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneCombatUnitInfo_descriptor_;
  metadata.reflection = OneCombatUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombatForm::kStUnitInfosFieldNumber;
#endif  // !_MSC_VER

CombatForm::CombatForm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatForm::InitAsDefaultInstance() {
}

CombatForm::CombatForm(const CombatForm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatForm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatForm::~CombatForm() {
  SharedDtor();
}

void CombatForm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatForm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatForm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatForm_descriptor_;
}

const CombatForm& CombatForm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

CombatForm* CombatForm::default_instance_ = NULL;

CombatForm* CombatForm::New() const {
  return new CombatForm;
}

void CombatForm::Clear() {
  stunitinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatForm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneCombatUnitInfo stUnitInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUnitInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stunitinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stUnitInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatForm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneCombatUnitInfo stUnitInfos = 1;
  for (int i = 0; i < this->stunitinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stunitinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatForm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneCombatUnitInfo stUnitInfos = 1;
  for (int i = 0; i < this->stunitinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stunitinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatForm::ByteSize() const {
  int total_size = 0;

  // repeated .OneCombatUnitInfo stUnitInfos = 1;
  total_size += 1 * this->stunitinfos_size();
  for (int i = 0; i < this->stunitinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stunitinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatForm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatForm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatForm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatForm::MergeFrom(const CombatForm& from) {
  GOOGLE_CHECK_NE(&from, this);
  stunitinfos_.MergeFrom(from.stunitinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatForm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatForm::CopyFrom(const CombatForm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatForm::IsInitialized() const {

  return true;
}

void CombatForm::Swap(CombatForm* other) {
  if (other != this) {
    stunitinfos_.Swap(&other->stunitinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatForm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatForm_descriptor_;
  metadata.reflection = CombatForm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SetCombatForm_Request::kStFormFieldNumber;
#endif  // !_MSC_VER

Zone_SetCombatForm_Request::Zone_SetCombatForm_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SetCombatForm_Request::InitAsDefaultInstance() {
  stform_ = const_cast< ::CombatForm*>(&::CombatForm::default_instance());
}

Zone_SetCombatForm_Request::Zone_SetCombatForm_Request(const Zone_SetCombatForm_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SetCombatForm_Request::SharedCtor() {
  _cached_size_ = 0;
  stform_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SetCombatForm_Request::~Zone_SetCombatForm_Request() {
  SharedDtor();
}

void Zone_SetCombatForm_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stform_;
  }
}

void Zone_SetCombatForm_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SetCombatForm_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SetCombatForm_Request_descriptor_;
}

const Zone_SetCombatForm_Request& Zone_SetCombatForm_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_SetCombatForm_Request* Zone_SetCombatForm_Request::default_instance_ = NULL;

Zone_SetCombatForm_Request* Zone_SetCombatForm_Request::New() const {
  return new Zone_SetCombatForm_Request;
}

void Zone_SetCombatForm_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stform()) {
      if (stform_ != NULL) stform_->::CombatForm::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SetCombatForm_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CombatForm stForm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SetCombatForm_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CombatForm stForm = 1;
  if (has_stform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SetCombatForm_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CombatForm stForm = 1;
  if (has_stform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SetCombatForm_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CombatForm stForm = 1;
    if (has_stform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SetCombatForm_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SetCombatForm_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SetCombatForm_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SetCombatForm_Request::MergeFrom(const Zone_SetCombatForm_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stform()) {
      mutable_stform()->::CombatForm::MergeFrom(from.stform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SetCombatForm_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SetCombatForm_Request::CopyFrom(const Zone_SetCombatForm_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SetCombatForm_Request::IsInitialized() const {

  return true;
}

void Zone_SetCombatForm_Request::Swap(Zone_SetCombatForm_Request* other) {
  if (other != this) {
    std::swap(stform_, other->stform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SetCombatForm_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SetCombatForm_Request_descriptor_;
  metadata.reflection = Zone_SetCombatForm_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SetCombatForm_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_SetCombatForm_Response::Zone_SetCombatForm_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SetCombatForm_Response::InitAsDefaultInstance() {
}

Zone_SetCombatForm_Response::Zone_SetCombatForm_Response(const Zone_SetCombatForm_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SetCombatForm_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SetCombatForm_Response::~Zone_SetCombatForm_Response() {
  SharedDtor();
}

void Zone_SetCombatForm_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_SetCombatForm_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SetCombatForm_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SetCombatForm_Response_descriptor_;
}

const Zone_SetCombatForm_Response& Zone_SetCombatForm_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_SetCombatForm_Response* Zone_SetCombatForm_Response::default_instance_ = NULL;

Zone_SetCombatForm_Response* Zone_SetCombatForm_Response::New() const {
  return new Zone_SetCombatForm_Response;
}

void Zone_SetCombatForm_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SetCombatForm_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SetCombatForm_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SetCombatForm_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SetCombatForm_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SetCombatForm_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SetCombatForm_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SetCombatForm_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SetCombatForm_Response::MergeFrom(const Zone_SetCombatForm_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SetCombatForm_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SetCombatForm_Response::CopyFrom(const Zone_SetCombatForm_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SetCombatForm_Response::IsInitialized() const {

  return true;
}

void Zone_SetCombatForm_Response::Swap(Zone_SetCombatForm_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SetCombatForm_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SetCombatForm_Response_descriptor_;
  metadata.reflection = Zone_SetCombatForm_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SetCombatForm_Notify::kStActiveFormFieldNumber;
const int Zone_SetCombatForm_Notify::kStPassiveFormFieldNumber;
#endif  // !_MSC_VER

Zone_SetCombatForm_Notify::Zone_SetCombatForm_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SetCombatForm_Notify::InitAsDefaultInstance() {
  stactiveform_ = const_cast< ::CombatForm*>(&::CombatForm::default_instance());
  stpassiveform_ = const_cast< ::CombatForm*>(&::CombatForm::default_instance());
}

Zone_SetCombatForm_Notify::Zone_SetCombatForm_Notify(const Zone_SetCombatForm_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SetCombatForm_Notify::SharedCtor() {
  _cached_size_ = 0;
  stactiveform_ = NULL;
  stpassiveform_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SetCombatForm_Notify::~Zone_SetCombatForm_Notify() {
  SharedDtor();
}

void Zone_SetCombatForm_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stactiveform_;
    delete stpassiveform_;
  }
}

void Zone_SetCombatForm_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SetCombatForm_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SetCombatForm_Notify_descriptor_;
}

const Zone_SetCombatForm_Notify& Zone_SetCombatForm_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_SetCombatForm_Notify* Zone_SetCombatForm_Notify::default_instance_ = NULL;

Zone_SetCombatForm_Notify* Zone_SetCombatForm_Notify::New() const {
  return new Zone_SetCombatForm_Notify;
}

void Zone_SetCombatForm_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stactiveform()) {
      if (stactiveform_ != NULL) stactiveform_->::CombatForm::Clear();
    }
    if (has_stpassiveform()) {
      if (stpassiveform_ != NULL) stpassiveform_->::CombatForm::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SetCombatForm_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CombatForm stActiveForm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stactiveform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stPassiveForm;
        break;
      }

      // optional .CombatForm stPassiveForm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPassiveForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpassiveform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SetCombatForm_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CombatForm stActiveForm = 1;
  if (has_stactiveform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stactiveform(), output);
  }

  // optional .CombatForm stPassiveForm = 2;
  if (has_stpassiveform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stpassiveform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SetCombatForm_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CombatForm stActiveForm = 1;
  if (has_stactiveform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stactiveform(), target);
  }

  // optional .CombatForm stPassiveForm = 2;
  if (has_stpassiveform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stpassiveform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SetCombatForm_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CombatForm stActiveForm = 1;
    if (has_stactiveform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stactiveform());
    }

    // optional .CombatForm stPassiveForm = 2;
    if (has_stpassiveform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpassiveform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SetCombatForm_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SetCombatForm_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SetCombatForm_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SetCombatForm_Notify::MergeFrom(const Zone_SetCombatForm_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stactiveform()) {
      mutable_stactiveform()->::CombatForm::MergeFrom(from.stactiveform());
    }
    if (from.has_stpassiveform()) {
      mutable_stpassiveform()->::CombatForm::MergeFrom(from.stpassiveform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SetCombatForm_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SetCombatForm_Notify::CopyFrom(const Zone_SetCombatForm_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SetCombatForm_Notify::IsInitialized() const {

  return true;
}

void Zone_SetCombatForm_Notify::Swap(Zone_SetCombatForm_Notify* other) {
  if (other != this) {
    std::swap(stactiveform_, other->stactiveform_);
    std::swap(stpassiveform_, other->stpassiveform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SetCombatForm_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SetCombatForm_Notify_descriptor_;
  metadata.reflection = Zone_SetCombatForm_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_DecreaseUnitBuff_Notify::kICombatUnitIDFieldNumber;
#endif  // !_MSC_VER

Zone_DecreaseUnitBuff_Notify::Zone_DecreaseUnitBuff_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_DecreaseUnitBuff_Notify::InitAsDefaultInstance() {
}

Zone_DecreaseUnitBuff_Notify::Zone_DecreaseUnitBuff_Notify(const Zone_DecreaseUnitBuff_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_DecreaseUnitBuff_Notify::SharedCtor() {
  _cached_size_ = 0;
  icombatunitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_DecreaseUnitBuff_Notify::~Zone_DecreaseUnitBuff_Notify() {
  SharedDtor();
}

void Zone_DecreaseUnitBuff_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_DecreaseUnitBuff_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_DecreaseUnitBuff_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_DecreaseUnitBuff_Notify_descriptor_;
}

const Zone_DecreaseUnitBuff_Notify& Zone_DecreaseUnitBuff_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_DecreaseUnitBuff_Notify* Zone_DecreaseUnitBuff_Notify::default_instance_ = NULL;

Zone_DecreaseUnitBuff_Notify* Zone_DecreaseUnitBuff_Notify::New() const {
  return new Zone_DecreaseUnitBuff_Notify;
}

void Zone_DecreaseUnitBuff_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icombatunitid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_DecreaseUnitBuff_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iCombatUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icombatunitid_)));
          set_has_icombatunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_DecreaseUnitBuff_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iCombatUnitID = 1;
  if (has_icombatunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icombatunitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_DecreaseUnitBuff_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iCombatUnitID = 1;
  if (has_icombatunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icombatunitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_DecreaseUnitBuff_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iCombatUnitID = 1;
    if (has_icombatunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icombatunitid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_DecreaseUnitBuff_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_DecreaseUnitBuff_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_DecreaseUnitBuff_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_DecreaseUnitBuff_Notify::MergeFrom(const Zone_DecreaseUnitBuff_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icombatunitid()) {
      set_icombatunitid(from.icombatunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_DecreaseUnitBuff_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_DecreaseUnitBuff_Notify::CopyFrom(const Zone_DecreaseUnitBuff_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_DecreaseUnitBuff_Notify::IsInitialized() const {

  return true;
}

void Zone_DecreaseUnitBuff_Notify::Swap(Zone_DecreaseUnitBuff_Notify* other) {
  if (other != this) {
    std::swap(icombatunitid_, other->icombatunitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_DecreaseUnitBuff_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_DecreaseUnitBuff_Notify_descriptor_;
  metadata.reflection = Zone_DecreaseUnitBuff_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneActionInfo::kIUnitIDFieldNumber;
const int OneActionInfo::kIXianGongFieldNumber;
#endif  // !_MSC_VER

OneActionInfo::OneActionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneActionInfo::InitAsDefaultInstance() {
}

OneActionInfo::OneActionInfo(const OneActionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneActionInfo::SharedCtor() {
  _cached_size_ = 0;
  iunitid_ = 0;
  ixiangong_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneActionInfo::~OneActionInfo() {
  SharedDtor();
}

void OneActionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneActionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneActionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneActionInfo_descriptor_;
}

const OneActionInfo& OneActionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

OneActionInfo* OneActionInfo::default_instance_ = NULL;

OneActionInfo* OneActionInfo::New() const {
  return new OneActionInfo;
}

void OneActionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iunitid_ = 0;
    ixiangong_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneActionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitid_)));
          set_has_iunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iXianGong;
        break;
      }

      // optional int32 iXianGong = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iXianGong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ixiangong_)));
          set_has_ixiangong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneActionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iunitid(), output);
  }

  // optional int32 iXianGong = 2;
  if (has_ixiangong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ixiangong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneActionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iunitid(), target);
  }

  // optional int32 iXianGong = 2;
  if (has_ixiangong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ixiangong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneActionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iUnitID = 1;
    if (has_iunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitid());
    }

    // optional int32 iXianGong = 2;
    if (has_ixiangong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ixiangong());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneActionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneActionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneActionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneActionInfo::MergeFrom(const OneActionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iunitid()) {
      set_iunitid(from.iunitid());
    }
    if (from.has_ixiangong()) {
      set_ixiangong(from.ixiangong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneActionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneActionInfo::CopyFrom(const OneActionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneActionInfo::IsInitialized() const {

  return true;
}

void OneActionInfo::Swap(OneActionInfo* other) {
  if (other != this) {
    std::swap(iunitid_, other->iunitid_);
    std::swap(ixiangong_, other->ixiangong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneActionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneActionInfo_descriptor_;
  metadata.reflection = OneActionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ActionUnitInfo_Notify::kStInActionInfosFieldNumber;
const int Zone_ActionUnitInfo_Notify::kStActionDoneInfosFieldNumber;
#endif  // !_MSC_VER

Zone_ActionUnitInfo_Notify::Zone_ActionUnitInfo_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ActionUnitInfo_Notify::InitAsDefaultInstance() {
}

Zone_ActionUnitInfo_Notify::Zone_ActionUnitInfo_Notify(const Zone_ActionUnitInfo_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ActionUnitInfo_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ActionUnitInfo_Notify::~Zone_ActionUnitInfo_Notify() {
  SharedDtor();
}

void Zone_ActionUnitInfo_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ActionUnitInfo_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ActionUnitInfo_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ActionUnitInfo_Notify_descriptor_;
}

const Zone_ActionUnitInfo_Notify& Zone_ActionUnitInfo_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_ActionUnitInfo_Notify* Zone_ActionUnitInfo_Notify::default_instance_ = NULL;

Zone_ActionUnitInfo_Notify* Zone_ActionUnitInfo_Notify::New() const {
  return new Zone_ActionUnitInfo_Notify;
}

void Zone_ActionUnitInfo_Notify::Clear() {
  stinactioninfos_.Clear();
  stactiondoneinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ActionUnitInfo_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneActionInfo stInActionInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stInActionInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stinactioninfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stInActionInfos;
        if (input->ExpectTag(18)) goto parse_stActionDoneInfos;
        break;
      }

      // repeated .OneActionInfo stActionDoneInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stActionDoneInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stactiondoneinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stActionDoneInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ActionUnitInfo_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneActionInfo stInActionInfos = 1;
  for (int i = 0; i < this->stinactioninfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stinactioninfos(i), output);
  }

  // repeated .OneActionInfo stActionDoneInfos = 2;
  for (int i = 0; i < this->stactiondoneinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stactiondoneinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ActionUnitInfo_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneActionInfo stInActionInfos = 1;
  for (int i = 0; i < this->stinactioninfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stinactioninfos(i), target);
  }

  // repeated .OneActionInfo stActionDoneInfos = 2;
  for (int i = 0; i < this->stactiondoneinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stactiondoneinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ActionUnitInfo_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .OneActionInfo stInActionInfos = 1;
  total_size += 1 * this->stinactioninfos_size();
  for (int i = 0; i < this->stinactioninfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stinactioninfos(i));
  }

  // repeated .OneActionInfo stActionDoneInfos = 2;
  total_size += 1 * this->stactiondoneinfos_size();
  for (int i = 0; i < this->stactiondoneinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stactiondoneinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ActionUnitInfo_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ActionUnitInfo_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ActionUnitInfo_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ActionUnitInfo_Notify::MergeFrom(const Zone_ActionUnitInfo_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stinactioninfos_.MergeFrom(from.stinactioninfos_);
  stactiondoneinfos_.MergeFrom(from.stactiondoneinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ActionUnitInfo_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ActionUnitInfo_Notify::CopyFrom(const Zone_ActionUnitInfo_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ActionUnitInfo_Notify::IsInitialized() const {

  return true;
}

void Zone_ActionUnitInfo_Notify::Swap(Zone_ActionUnitInfo_Notify* other) {
  if (other != this) {
    stinactioninfos_.Swap(&other->stinactioninfos_);
    stactiondoneinfos_.Swap(&other->stactiondoneinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ActionUnitInfo_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ActionUnitInfo_Notify_descriptor_;
  metadata.reflection = Zone_ActionUnitInfo_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCDInfo::kISkillIDFieldNumber;
const int SkillCDInfo::kICDRoundFieldNumber;
#endif  // !_MSC_VER

SkillCDInfo::SkillCDInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillCDInfo::InitAsDefaultInstance() {
}

SkillCDInfo::SkillCDInfo(const SkillCDInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillCDInfo::SharedCtor() {
  _cached_size_ = 0;
  iskillid_ = 0;
  icdround_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCDInfo::~SkillCDInfo() {
  SharedDtor();
}

void SkillCDInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillCDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCDInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCDInfo_descriptor_;
}

const SkillCDInfo& SkillCDInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

SkillCDInfo* SkillCDInfo::default_instance_ = NULL;

SkillCDInfo* SkillCDInfo::New() const {
  return new SkillCDInfo;
}

void SkillCDInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iskillid_ = 0;
    icdround_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iSkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iskillid_)));
          set_has_iskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iCDRound;
        break;
      }

      // optional int32 iCDRound = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCDRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icdround_)));
          set_has_icdround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillCDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iSkillID = 1;
  if (has_iskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iskillid(), output);
  }

  // optional int32 iCDRound = 2;
  if (has_icdround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->icdround(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillCDInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iSkillID = 1;
  if (has_iskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iskillid(), target);
  }

  // optional int32 iCDRound = 2;
  if (has_icdround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->icdround(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillCDInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iSkillID = 1;
    if (has_iskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iskillid());
    }

    // optional int32 iCDRound = 2;
    if (has_icdround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icdround());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCDInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCDInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCDInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCDInfo::MergeFrom(const SkillCDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iskillid()) {
      set_iskillid(from.iskillid());
    }
    if (from.has_icdround()) {
      set_icdround(from.icdround());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCDInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCDInfo::CopyFrom(const SkillCDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCDInfo::IsInitialized() const {

  return true;
}

void SkillCDInfo::Swap(SkillCDInfo* other) {
  if (other != this) {
    std::swap(iskillid_, other->iskillid_);
    std::swap(icdround_, other->icdround_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCDInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCDInfo_descriptor_;
  metadata.reflection = SkillCDInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SkillCDRound_Notify::kIUnitIDFieldNumber;
const int Zone_SkillCDRound_Notify::kStCDInfosFieldNumber;
#endif  // !_MSC_VER

Zone_SkillCDRound_Notify::Zone_SkillCDRound_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SkillCDRound_Notify::InitAsDefaultInstance() {
}

Zone_SkillCDRound_Notify::Zone_SkillCDRound_Notify(const Zone_SkillCDRound_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SkillCDRound_Notify::SharedCtor() {
  _cached_size_ = 0;
  iunitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SkillCDRound_Notify::~Zone_SkillCDRound_Notify() {
  SharedDtor();
}

void Zone_SkillCDRound_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_SkillCDRound_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SkillCDRound_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SkillCDRound_Notify_descriptor_;
}

const Zone_SkillCDRound_Notify& Zone_SkillCDRound_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eFight_2eproto();
  return *default_instance_;
}

Zone_SkillCDRound_Notify* Zone_SkillCDRound_Notify::default_instance_ = NULL;

Zone_SkillCDRound_Notify* Zone_SkillCDRound_Notify::New() const {
  return new Zone_SkillCDRound_Notify;
}

void Zone_SkillCDRound_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iunitid_ = 0;
  }
  stcdinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SkillCDRound_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iUnitID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iunitid_)));
          set_has_iunitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stCDInfos;
        break;
      }

      // repeated .SkillCDInfo stCDInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stCDInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stcdinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stCDInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SkillCDRound_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iunitid(), output);
  }

  // repeated .SkillCDInfo stCDInfos = 2;
  for (int i = 0; i < this->stcdinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stcdinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SkillCDRound_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iUnitID = 1;
  if (has_iunitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iunitid(), target);
  }

  // repeated .SkillCDInfo stCDInfos = 2;
  for (int i = 0; i < this->stcdinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stcdinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SkillCDRound_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iUnitID = 1;
    if (has_iunitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iunitid());
    }

  }
  // repeated .SkillCDInfo stCDInfos = 2;
  total_size += 1 * this->stcdinfos_size();
  for (int i = 0; i < this->stcdinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stcdinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SkillCDRound_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SkillCDRound_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SkillCDRound_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SkillCDRound_Notify::MergeFrom(const Zone_SkillCDRound_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stcdinfos_.MergeFrom(from.stcdinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iunitid()) {
      set_iunitid(from.iunitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SkillCDRound_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SkillCDRound_Notify::CopyFrom(const Zone_SkillCDRound_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SkillCDRound_Notify::IsInitialized() const {

  return true;
}

void Zone_SkillCDRound_Notify::Swap(Zone_SkillCDRound_Notify* other) {
  if (other != this) {
    std::swap(iunitid_, other->iunitid_);
    stcdinfos_.Swap(&other->stcdinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SkillCDRound_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SkillCDRound_Notify_descriptor_;
  metadata.reflection = Zone_SkillCDRound_Notify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
