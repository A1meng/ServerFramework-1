/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 85142d631feb0dc44632b6ddd906dd97 */

/* creation time: Tue Feb 10 17:59:35 2015 */
/* tdr version: 2.4.21914, build at 20110728 */

#ifndef _S_GameConfig_h_
#define _S_GameConfig_h_

#include "TdrBuf.h"
#include "TdrError.h"
#include "TdrBufUtil.h"
#include "TdrTypeUtil.h"


using tsf4g_tdr::TdrError;
using tsf4g_tdr::TdrReadBuf;
using tsf4g_tdr::TdrWriteBuf;

namespace GameConfig
{


enum
{
    SERVER_BUSID_LEN = 64, // 服务器BUS ID的长度
    DATE_TIME_LEN = 64, // 配置中时间字符串的长度
    QM_HERO_NAME_LENGTH = 64, // 名字的最大长度
    MAX_INIT_FIGHT_UNIT_NUM = 3, // 出生支持的初始角色最大数量
    MAX_FIGHT_UNIT_ATTRIBUTE_NUM = 17, // 最多支持的战斗属性的总数目
    MAX_TIME_STRING_LENGTH = 12, // 配置的时间字符串的最大长度
    MAX_CROSS_MONSTER_NUM = 5, // PVE关卡支持的最大怪物数量
    MAX_BATTLEFIELD_UNIT_POS_NUM = 15, // 战场地图上最多支持的阵营单位站位数量
    MAX_UNIT_AI_ATTRIBUTE_NUM = 20, // 战斗单位AI支持的策略最大数量
    MAX_SKILL_RANGE_INFO_NUM = 7, // 技能释放距离数组的最大数目
    MAX_SKILL_AREA_POS_NUM = 20, // 技能释放区域的坐标最大数目
    MAX_FIGHT_UNIT_AI_NUM = 3, // 伙伴的战斗AI最大数目
    MAX_FIGHT_BUFF_PARAM_NUM = 4, // 生效的Buff效果参数最大数量
    MAX_FIGHT_REWARD_CONFIG_NUM = 5, // 战斗奖励掉落支持的最大数目
    MAX_JOINT_NEED_SKILL_NUM = 3, // 战斗合击需求支持的最大技能数目
    MAX_MONSTER_ITEM_NUM = 5, // 战斗怪物最多携带的物品数量
    MAX_IP_ADDRESS_LENGTH = 64, // IP地址最大长度
};


#pragma pack(1)


class SRoleBirthConfig
{
    public: /* members */
        int32_t iConfigID; // 出生表的ID
        int32_t iInitBagNum; // 起始开启背包格子数
        int32_t iInitCoin; // 出生时角色的金币
        int32_t iInitGold; // 出生时角色的元宝
        int32_t iInitEnergy; // 出生时角色的起始体力值
        int32_t iUnitNum; // 出生战斗单位总数
        int32_t aiUnitID[MAX_INIT_FIGHT_UNIT_NUM]; // 出生战斗单位列表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SRoleBirthConfig          tagSRoleBirthConfig;
typedef       SRoleBirthConfig             SROLEBIRTHCONFIG;
typedef       SRoleBirthConfig*          LPSROLEBIRTHCONFIG;
typedef const SRoleBirthConfig*         LCPSROLEBIRTHCONFIG;


class SFightUnitConfig
{
    public: /* members */
        int32_t iConfigID; // 战斗单位的ID
        int32_t iProf; // 战斗单位的职业
        int32_t iSize; // 战斗单位的尺寸
        int32_t iAINum; // 战斗单位的AI总数
        int32_t aiUnitAIID[MAX_FIGHT_UNIT_AI_NUM]; // 战斗单位使用的AIID
        int32_t iTotalAttribNum; // 战斗单位的属性总数
        int32_t aiAttribute[MAX_FIGHT_UNIT_ATTRIBUTE_NUM]; // 战斗单位的战斗属性
        int32_t iNormalSkill; // 战斗单位的普攻技能
        int32_t iInitSlot; // 战斗单位初始物品槽
        int32_t iCounterAtkSkillID; // 战斗单位的反击技能ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SFightUnitConfig          tagSFightUnitConfig;
typedef       SFightUnitConfig             SFIGHTUNITCONFIG;
typedef       SFightUnitConfig*          LPSFIGHTUNITCONFIG;
typedef const SFightUnitConfig*         LCPSFIGHTUNITCONFIG;


class SMonsterConfig
{
    public: /* members */
        int32_t iConfigID; // 怪物ID
        int32_t iProf; // 战斗单位的职业
        int32_t iSize; // 战斗单位的尺寸
        int32_t iMonsterAIID; // 怪物使用的AIID
        int32_t iAttributeNum; // 怪物的基础属性数量
        int32_t aiAttribute[MAX_FIGHT_UNIT_ATTRIBUTE_NUM]; // 怪物的基础属性配置
        int32_t iNormalSkill; // 战斗单位的普攻技能
        int32_t iInitSlot; // 战斗单位初始物品槽
        int32_t iCounterAtkSkillID; // 战斗单位的反击技能ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SMonsterConfig          tagSMonsterConfig;
typedef       SMonsterConfig             SMONSTERCONFIG;
typedef       SMonsterConfig*          LPSMONSTERCONFIG;
typedef const SMonsterConfig*         LCPSMONSTERCONFIG;


class SGameItemConfig
{
    public: /* members */
        int32_t iConfigID; // 物品的ID
        int32_t iItemType; // 游戏物品类型
        int32_t iSkillID; // 战斗使用物品触发的技能ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SGameItemConfig          tagSGameItemConfig;
typedef       SGameItemConfig             SGAMEITEMCONFIG;
typedef       SGameItemConfig*          LPSGAMEITEMCONFIG;
typedef const SGameItemConfig*         LCPSGAMEITEMCONFIG;


class SFightPosInfo
{
    public: /* members */
        int32_t iPosX; // 在战场地图上的坐标X
        int32_t iPosY; // 在战场地图上的坐标Y
        int32_t iDirection; // 在战场地图上的朝向

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SFightPosInfo          tagSFightPosInfo;
typedef       SFightPosInfo             SFIGHTPOSINFO;
typedef       SFightPosInfo*          LPSFIGHTPOSINFO;
typedef const SFightPosInfo*         LCPSFIGHTPOSINFO;


class SBattleCrossConfig
{
    public: /* members */
        int32_t iConfigID; // 战斗关卡ID
        int32_t iMapID; // 关卡对应战场地图ID
        int32_t iNeedSetForm; // 是否需要设置阵型，1表示需要，0表示不需要
        int32_t iMonsterGroup; // 战斗对应的怪物组ID
        int32_t iDropRewardID; // 关卡战斗胜利掉落的奖励ID
        int32_t iSelfUnitNum; // 本方地图站位位置信息
        SFightPosInfo astFightPosInfo[MAX_BATTLEFIELD_UNIT_POS_NUM]; // 战场上己方站位信息
        int32_t iEnemyUnitNum; // 敌方组在地图上的站位信息
        SFightPosInfo astEnemyFightPosInfo[MAX_BATTLEFIELD_UNIT_POS_NUM]; // 战场上敌人的站位信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SBattleCrossConfig          tagSBattleCrossConfig;
typedef       SBattleCrossConfig             SBATTLECROSSCONFIG;
typedef       SBattleCrossConfig*          LPSBATTLECROSSCONFIG;
typedef const SBattleCrossConfig*         LCPSBATTLECROSSCONFIG;


class OneCrossMonster
{
    public: /* members */
        int32_t iMonsterID; // 怪物ID
        int32_t iItemNum; // 怪物携带的物品总数目
        int32_t aiItemInfo[MAX_MONSTER_ITEM_NUM]; // 怪物携带的物品信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       OneCrossMonster          tagOneCrossMonster;
typedef       OneCrossMonster             ONECROSSMONSTER;
typedef       OneCrossMonster*          LPONECROSSMONSTER;
typedef const OneCrossMonster*         LCPONECROSSMONSTER;


class SCrossMonsterConfig
{
    public: /* members */
        int32_t iConfigID; // 关卡怪物组ID
        int32_t iMonsterNum; // 关卡的怪物数目
        OneCrossMonster astMonsterInfo[MAX_CROSS_MONSTER_NUM]; // 关卡怪物组信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SCrossMonsterConfig          tagSCrossMonsterConfig;
typedef       SCrossMonsterConfig             SCROSSMONSTERCONFIG;
typedef       SCrossMonsterConfig*          LPSCROSSMONSTERCONFIG;
typedef const SCrossMonsterConfig*         LCPSCROSSMONSTERCONFIG;


class STrapConfig
{
    public: /* members */
        int32_t iConfigID; // 机关的ID
        int32_t iTrapType; // 战场机关的类型
        int32_t iTriggerType; // 战场上机关的触发类型
        int32_t iInterruptType; // 触发机关后，打断单位的后续移动和行动等行为
        int32_t iVisiableType; // 该机关可见的类型
        int32_t iTrapHP; // 机关的起始血量
        int32_t iTrapValue; // 计算怪物AI时机关的价值
        int32_t iRangeID; // 机关的触发范围，对应Range表

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       STrapConfig          tagSTrapConfig;
typedef       STrapConfig             STRAPCONFIG;
typedef       STrapConfig*          LPSTRAPCONFIG;
typedef const STrapConfig*         LCPSTRAPCONFIG;


class SFightUnitAIConfig
{
    public: /* members */
        int32_t iConfigID; // 战斗单位AI的ID
        int32_t iAIAttrNum; // 战斗单位AI策略的数量
        int32_t aiAIAttribute[MAX_UNIT_AI_ATTRIBUTE_NUM]; // 战斗单位AI策略的属性

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SFightUnitAIConfig          tagSFightUnitAIConfig;
typedef       SFightUnitAIConfig             SFIGHTUNITAICONFIG;
typedef       SFightUnitAIConfig*          LPSFIGHTUNITAICONFIG;
typedef const SFightUnitAIConfig*         LCPSFIGHTUNITAICONFIG;


class SFightUnitSkillConfig
{
    public: /* members */
        int32_t iConfigID; // 战斗单位的技能ID
        int32_t iSkillType; // 技能的使用类型
        int32_t iComboNum; // 技能使用最多的连击次数
        int32_t iJointAtkID; // 技能让周围伙伴合击的ID，对应joint表
        int32_t iCDRound; // 技能使用冷却的回合数
        int32_t iTargetType; // 技能施加的目标类型
        int32_t iTargetAreaID; // 技能释放的范围ID,对应area表
        int32_t iTargetRangeID; // 技能的命中分布，对应range表
        int32_t iHitModifierID; // 技能的命中修正ID，对应score表
        int32_t iDodgeModifierID; // 技能的闪避修正ID，对应score表
        int32_t iPrecisionModifierID; // 技能的精准修正ID，对应score表
        int32_t iCopeModifierID; // 技能的招架修正ID，对应score表
        int32_t iParryEffect; // 技能的格挡效果
        int32_t iCritModifierID; // 技能的暴击修正ID，对应score表
        int32_t iToughModifierID; // 技能的坚韧修正ID，对应score表
        int32_t iCritEffect; // 技能的暴击效果
        int32_t iDamageRangeID; // 技能的伤害分布ID，对应range表
        int32_t iDamageID; // 技能的伤害类型ID，对应damage表
        int32_t iDamageBaseNum; // 技能的基础伤害
        int32_t iDamageModifierID; // 技能的伤害修正ID,对应Score表
        int32_t iSelfBuff; // 该技能对自己增加的buff
        int32_t iTargetBuff; // 该技能对目标增加的buff
        int32_t iSelfMoveID; // 该技能对攻击方造成的位移ID
        int32_t iTargetMoveID; // 该技能对防守方造成的位移ID
        int32_t iSkillBuffValue; // 技能产生的Buff效果价值，用于AI计算
        int32_t iSecondaryTarget; // 技能伤害效果的次要目标
        int32_t iSpecialFuncType; // 该技能的特殊功能，如移行换位等
        int32_t iSpecialFuncParam; // 该技能的特殊功能的参数

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SFightUnitSkillConfig          tagSFightUnitSkillConfig;
typedef       SFightUnitSkillConfig             SFIGHTUNITSKILLCONFIG;
typedef       SFightUnitSkillConfig*          LPSFIGHTUNITSKILLCONFIG;
typedef const SFightUnitSkillConfig*         LCPSFIGHTUNITSKILLCONFIG;


class SSkillRangeConfig
{
    public: /* members */
        int32_t iConfigID; // 技能释放距离的ID
        int32_t iRangeNum; // 技能释放距离数组的数目
        int32_t aiRangeInfo[MAX_SKILL_RANGE_INFO_NUM]; // 技能释放距离的详细信息
        int32_t iDecayParam; // 技能释放的衰减值
        int32_t iRangeAreaParam; // 技能释放的距离范围类型

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SSkillRangeConfig          tagSSkillRangeConfig;
typedef       SSkillRangeConfig             SSKILLRANGECONFIG;
typedef       SSkillRangeConfig*          LPSSKILLRANGECONFIG;
typedef const SSkillRangeConfig*         LCPSSKILLRANGECONFIG;


class SSkillAreaConfig
{
    public: /* members */
        int32_t iConfigID; // 技能释放的区域ID
        int32_t iAreaPosNum; // 技能释放的区域点数目
        SFightPosInfo astTargetPosInfo[MAX_SKILL_AREA_POS_NUM]; // 技能释放的区域点信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SSkillAreaConfig          tagSSkillAreaConfig;
typedef       SSkillAreaConfig             SSKILLAREACONFIG;
typedef       SSkillAreaConfig*          LPSSKILLAREACONFIG;
typedef const SSkillAreaConfig*         LCPSSKILLAREACONFIG;


class SSkillScoreConfig
{
    public: /* members */
        int32_t iConfigID; // 技能效果修正的ID
        int32_t iScoreBaseNum; // 技能效果修正的基值
        int32_t iScoreParam; // 技能效果修正的系数
        int32_t iAttributeNum; // 技能修正的属性值
        int32_t aiAttribute[MAX_FIGHT_UNIT_ATTRIBUTE_NUM]; // 技能修正的属性值

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SSkillScoreConfig          tagSSkillScoreConfig;
typedef       SSkillScoreConfig             SSKILLSCORECONFIG;
typedef       SSkillScoreConfig*          LPSSKILLSCORECONFIG;
typedef const SSkillScoreConfig*         LCPSSKILLSCORECONFIG;


class SSkillDamageConfig
{
    public: /* members */
        int32_t iConfigID; // 技能伤害效果ID
        int32_t iAttack; // 技能伤害效果的攻击强度
        int32_t iDefence; // 技能伤害效果的防御强度
        int32_t iSpreadAttrNum; // 伤害分布组属性加成百分比
        int32_t aiSpreadAttr[MAX_FIGHT_UNIT_ATTRIBUTE_NUM]; // 伤害分布组的属性加成值
        int32_t iStrengthAttrNum; // 伤害强度组属性加成百分比
        int32_t aiStrengthAttr[MAX_FIGHT_UNIT_ATTRIBUTE_NUM]; // 伤害强度组的属性加成值
        int32_t iVampireNum; // 伤害反馈组的数目
        int32_t aiVampireAttr[MAX_FIGHT_UNIT_ATTRIBUTE_NUM]; // 伤害反馈组的属性加成值

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SSkillDamageConfig          tagSSkillDamageConfig;
typedef       SSkillDamageConfig             SSKILLDAMAGECONFIG;
typedef       SSkillDamageConfig*          LPSSKILLDAMAGECONFIG;
typedef const SSkillDamageConfig*         LCPSSKILLDAMAGECONFIG;


class SFightBuffConfig
{
    public: /* members */
        int32_t iConfigID; // 产生Buff的ID
        int32_t iAddBuffID; // 同步添加的Buff ID
        int32_t iDelBuffID; // 关联移除的Buff ID
        int32_t iBuffType; // Buff的叠加类型
        int32_t iBuffLevel; // Buff的效果强度
        int32_t iEffectRound; // Buff持续的回合数
        int32_t iTriggerType; // Buff触发的类型
        int32_t iEffectType; // 生效的类型，是否永久生效
        int32_t iProcessType; // Buff处理的操作类型
        int32_t iProcessNum; // Buff产生的效果参数总数量
        int32_t aiProcessID[MAX_FIGHT_BUFF_PARAM_NUM]; // Buff产生的效果总参数

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SFightBuffConfig          tagSFightBuffConfig;
typedef       SFightBuffConfig             SFIGHTBUFFCONFIG;
typedef       SFightBuffConfig*          LPSFIGHTBUFFCONFIG;
typedef const SFightBuffConfig*         LCPSFIGHTBUFFCONFIG;


class SJointAttackConfig
{
    public: /* members */
        int32_t iConfigID; // 战斗单位面向修正的ID
        int32_t iNeedSkillNum; // 合击要求的技能组条件总数目
        int32_t aiNeedSkills[MAX_JOINT_NEED_SKILL_NUM]; // 合击要求的技能ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SJointAttackConfig          tagSJointAttackConfig;
typedef       SJointAttackConfig             SJOINTATTACKCONFIG;
typedef       SJointAttackConfig*          LPSJOINTATTACKCONFIG;
typedef const SJointAttackConfig*         LCPSJOINTATTACKCONFIG;


class OneRewardConfig
{
    public: /* members */
        int32_t iDropRate; // 掉落的几率
        int32_t iDropType; // 掉落的类型
        int32_t iDropID; // 掉落的内容
        int32_t iDropMinNum; // 掉落的数量下限
        int32_t iDropMaxNum; // 掉落的数量上限

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       OneRewardConfig          tagOneRewardConfig;
typedef       OneRewardConfig             ONEREWARDCONFIG;
typedef       OneRewardConfig*          LPONEREWARDCONFIG;
typedef const OneRewardConfig*         LCPONEREWARDCONFIG;


class SDropRewardConfig
{
    public: /* members */
        int32_t iConfigID; // 掉落的ID
        int32_t iAddedRewardID; // 关联的掉落的ID
        int32_t iTotalRewardNum; // 支持的掉落数组的数目
        OneRewardConfig astRewards[MAX_FIGHT_REWARD_CONFIG_NUM]; // 战斗掉落单个奖励的配置

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SDropRewardConfig          tagSDropRewardConfig;
typedef       SDropRewardConfig             SDROPREWARDCONFIG;
typedef       SDropRewardConfig*          LPSDROPREWARDCONFIG;
typedef const SDropRewardConfig*         LCPSDROPREWARDCONFIG;


class QMGeneralConfig
{
    public: /* members */
        char server_ip[MAX_IP_ADDRESS_LENGTH]; // 服务端IP地址
        int32_t login_port; // 登录服端口
        int32_t game_port; // 游戏服端口
        int32_t world_id; // 世界ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       QMGeneralConfig          tagQMGeneralConfig;
typedef       QMGeneralConfig             QMGENERALCONFIG;
typedef       QMGeneralConfig*          LPQMGENERALCONFIG;
typedef const QMGeneralConfig*         LCPQMGENERALCONFIG;


class CGameItemConfig
{
    public: /* members */
        int32_t iConfigID; // 物品的ID
        int32_t iItemType; // 游戏物品类型
        int32_t iItemIcon; // 物品对应的图标
        int32_t iSkillID; // 战斗使用物品触发的技能ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CGameItemConfig          tagCGameItemConfig;
typedef       CGameItemConfig             CGAMEITEMCONFIG;
typedef       CGameItemConfig*          LPCGAMEITEMCONFIG;
typedef const CGameItemConfig*         LCPCGAMEITEMCONFIG;


class CFightUnitConfig
{
    public: /* members */
        int32_t iConfigID; // 战斗单位的ID
        int32_t iResourceID; // 战斗单位的资源ID
        int32_t iProf; // 战斗单位的职业
        int32_t iSize; // 战斗单位的尺寸
        int32_t iAINum; // 战斗单位的AI总数
        int32_t aiUnitAIID[MAX_FIGHT_UNIT_AI_NUM]; // 战斗单位使用的AIID
        int32_t iTotalAttribNum; // 战斗单位的属性总数
        int32_t aiAttribute[MAX_FIGHT_UNIT_ATTRIBUTE_NUM]; // 战斗单位的战斗属性
        int32_t iNormalSkill; // 战斗单位的普攻技能
        int32_t iInitSlot; // 战斗单位初始物品槽
        int32_t iCounterAtkSkillID; // 战斗单位的反击技能ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CFightUnitConfig          tagCFightUnitConfig;
typedef       CFightUnitConfig             CFIGHTUNITCONFIG;
typedef       CFightUnitConfig*          LPCFIGHTUNITCONFIG;
typedef const CFightUnitConfig*         LCPCFIGHTUNITCONFIG;


class CMonsterConfig
{
    public: /* members */
        int32_t iConfigID; // 怪物ID
        int32_t iResourceID; // 战斗单位的资源ID
        int32_t iProf; // 战斗单位的职业

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CMonsterConfig          tagCMonsterConfig;
typedef       CMonsterConfig             CMONSTERCONFIG;
typedef       CMonsterConfig*          LPCMONSTERCONFIG;
typedef const CMonsterConfig*         LCPCMONSTERCONFIG;


class CBattleCrossConfig
{
    public: /* members */
        int32_t iConfigID; // 战斗关卡ID
        int32_t iMapID; // 关卡对应战场地图ID
        int32_t iDropRewardID; // 关卡战斗胜利掉落的奖励ID

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CBattleCrossConfig          tagCBattleCrossConfig;
typedef       CBattleCrossConfig             CBATTLECROSSCONFIG;
typedef       CBattleCrossConfig*          LPCBATTLECROSSCONFIG;
typedef const CBattleCrossConfig*         LCPCBATTLECROSSCONFIG;


class CFightUnitSkillConfig
{
    public: /* members */
        int32_t iConfigID; // 战斗单位的技能ID
        int32_t iSkillIcon; // 技能的图标ID
        int32_t iSkillType; // 技能的使用类型
        int32_t iCDRound; // 技能使用冷却的回合数
        int32_t iTargetType; // 技能施加的目标类型
        int32_t iTargetAreaID; // 技能释放的范围ID,对应area表
        int32_t iDamageRangeID; // 技能的伤害分布ID，对应range表
        int32_t iDamageID; // 技能的伤害类型ID，对应damage表
        int32_t iSecondaryTarget; // 技能伤害效果的次要目标

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CFightUnitSkillConfig          tagCFightUnitSkillConfig;
typedef       CFightUnitSkillConfig             CFIGHTUNITSKILLCONFIG;
typedef       CFightUnitSkillConfig*          LPCFIGHTUNITSKILLCONFIG;
typedef const CFightUnitSkillConfig*         LCPCFIGHTUNITSKILLCONFIG;


class CSkillRangeConfig
{
    public: /* members */
        int32_t iConfigID; // 技能释放距离的ID
        int32_t iRangeNum; // 技能释放距离数组的数目
        int32_t aiRangeInfo[MAX_SKILL_RANGE_INFO_NUM]; // 技能释放距离的详细信息
        int32_t iDecayParam; // 技能释放的衰减值
        int32_t iRangeAreaParam; // 技能释放的距离范围类型

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CSkillRangeConfig          tagCSkillRangeConfig;
typedef       CSkillRangeConfig             CSKILLRANGECONFIG;
typedef       CSkillRangeConfig*          LPCSKILLRANGECONFIG;
typedef const CSkillRangeConfig*         LCPCSKILLRANGECONFIG;


class CSkillAreaConfig
{
    public: /* members */
        int32_t iConfigID; // 技能释放的区域ID
        int32_t iAreaPosNum; // 技能释放的区域点数目
        SFightPosInfo astTargetPosInfo[MAX_SKILL_AREA_POS_NUM]; // 技能释放的区域点信息

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL,
                                      int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL,
                                 int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       CSkillAreaConfig          tagCSkillAreaConfig;
typedef       CSkillAreaConfig             CSKILLAREACONFIG;
typedef       CSkillAreaConfig*          LPCSKILLAREACONFIG;
typedef const CSkillAreaConfig*         LCPCSKILLAREACONFIG;


#pragma pack()

}
#endif
