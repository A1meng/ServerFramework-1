/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 85142d631feb0dc44632b6ddd906dd97 */

/* creation time: Tue Feb 10 17:59:35 2015 */
/* tdr version: 2.4.21914, build at 20110728 */

#include "S_GameConfig.h"
#include "TdrTypeUtil.h"

using tsf4g_tdr::TdrBufUtil;
using tsf4g_tdr::TdrTypeUtil;

namespace GameConfig
{


TdrError::ErrorType
SRoleBirthConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SRoleBirthConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SRoleBirthConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SRoleBirthConfig::CURRVERSION < cutVer)
    {
        cutVer = SRoleBirthConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SRoleBirthConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInitBagNum */
    {
        ret = destBuf.writeInt32(this->iInitBagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInitCoin */
    {
        ret = destBuf.writeInt32(this->iInitCoin);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInitGold */
    {
        ret = destBuf.writeInt32(this->iInitGold);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInitEnergy */
    {
        ret = destBuf.writeInt32(this->iInitEnergy);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iUnitNum */
    {
        ret = destBuf.writeInt32(this->iUnitNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiUnitID */
    {
        if (0 > this->iUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_INIT_FIGHT_UNIT_NUM < this->iUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiUnitID_i = 0; aiUnitID_i < this->iUnitNum; aiUnitID_i++)
        {
            ret = destBuf.writeInt32(this->aiUnitID[aiUnitID_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SRoleBirthConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SRoleBirthConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SRoleBirthConfig::CURRVERSION < cutVer)
    {
        cutVer = SRoleBirthConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SRoleBirthConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInitBagNum */
    {
        ret = srcBuf.readInt32(this->iInitBagNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInitCoin */
    {
        ret = srcBuf.readInt32(this->iInitCoin);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInitGold */
    {
        ret = srcBuf.readInt32(this->iInitGold);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInitEnergy */
    {
        ret = srcBuf.readInt32(this->iInitEnergy);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iUnitNum */
    {
        ret = srcBuf.readInt32(this->iUnitNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiUnitID */
    {
        if (0 > this->iUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_INIT_FIGHT_UNIT_NUM < this->iUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiUnitID_i = 0; aiUnitID_i < this->iUnitNum; aiUnitID_i++)
        {
            ret = srcBuf.readInt32(this->aiUnitID[aiUnitID_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SRoleBirthConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SRoleBirthConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInitBagNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInitBagNum]", "%d", this->iInitBagNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInitCoin */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInitCoin]", "%d", this->iInitCoin);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInitGold */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInitGold]", "%d", this->iInitGold);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInitEnergy */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInitEnergy]", "%d", this->iInitEnergy);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iUnitNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iUnitNum]", "%d", this->iUnitNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiUnitID */
    if (0 > this->iUnitNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_INIT_FIGHT_UNIT_NUM < this->iUnitNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiUnitID]", this->iUnitNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiUnitID_i = 0; aiUnitID_i < this->iUnitNum; aiUnitID_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiUnitID[aiUnitID_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SRoleBirthConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SRoleBirthConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SFightUnitConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SFightUnitConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightUnitConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightUnitConfig::CURRVERSION < cutVer)
    {
        cutVer = SFightUnitConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SFightUnitConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProf */
    {
        ret = destBuf.writeInt32(this->iProf);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSize */
    {
        ret = destBuf.writeInt32(this->iSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAINum */
    {
        ret = destBuf.writeInt32(this->iAINum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiUnitAIID */
    {
        if (0 > this->iAINum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_AI_NUM < this->iAINum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiUnitAIID_i = 0; aiUnitAIID_i < this->iAINum; aiUnitAIID_i++)
        {
            ret = destBuf.writeInt32(this->aiUnitAIID[aiUnitAIID_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iTotalAttribNum */
    {
        ret = destBuf.writeInt32(this->iTotalAttribNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiAttribute */
    {
        if (0 > this->iTotalAttribNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iTotalAttribNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iTotalAttribNum; aiAttribute_i++)
        {
            ret = destBuf.writeInt32(this->aiAttribute[aiAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iNormalSkill */
    {
        ret = destBuf.writeInt32(this->iNormalSkill);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInitSlot */
    {
        ret = destBuf.writeInt32(this->iInitSlot);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCounterAtkSkillID */
    {
        ret = destBuf.writeInt32(this->iCounterAtkSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SFightUnitConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightUnitConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightUnitConfig::CURRVERSION < cutVer)
    {
        cutVer = SFightUnitConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SFightUnitConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iProf */
    {
        ret = srcBuf.readInt32(this->iProf);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSize */
    {
        ret = srcBuf.readInt32(this->iSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAINum */
    {
        ret = srcBuf.readInt32(this->iAINum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiUnitAIID */
    {
        if (0 > this->iAINum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_AI_NUM < this->iAINum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiUnitAIID_i = 0; aiUnitAIID_i < this->iAINum; aiUnitAIID_i++)
        {
            ret = srcBuf.readInt32(this->aiUnitAIID[aiUnitAIID_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iTotalAttribNum */
    {
        ret = srcBuf.readInt32(this->iTotalAttribNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiAttribute */
    {
        if (0 > this->iTotalAttribNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iTotalAttribNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iTotalAttribNum; aiAttribute_i++)
        {
            ret = srcBuf.readInt32(this->aiAttribute[aiAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iNormalSkill */
    {
        ret = srcBuf.readInt32(this->iNormalSkill);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInitSlot */
    {
        ret = srcBuf.readInt32(this->iInitSlot);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCounterAtkSkillID */
    {
        ret = srcBuf.readInt32(this->iCounterAtkSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SFightUnitConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightUnitConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iProf */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iProf]", "%d", this->iProf);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSize */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSize]", "%d", this->iSize);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAINum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAINum]", "%d", this->iAINum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiUnitAIID */
    if (0 > this->iAINum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_UNIT_AI_NUM < this->iAINum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiUnitAIID]", this->iAINum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiUnitAIID_i = 0; aiUnitAIID_i < this->iAINum; aiUnitAIID_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiUnitAIID[aiUnitAIID_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTotalAttribNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTotalAttribNum]", "%d", this->iTotalAttribNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiAttribute */
    if (0 > this->iTotalAttribNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iTotalAttribNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiAttribute]", this->iTotalAttribNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iTotalAttribNum; aiAttribute_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiAttribute[aiAttribute_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNormalSkill */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNormalSkill]", "%d", this->iNormalSkill);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInitSlot */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInitSlot]", "%d", this->iInitSlot);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCounterAtkSkillID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCounterAtkSkillID]", "%d", this->iCounterAtkSkillID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SFightUnitConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SFightUnitConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SMonsterConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SMonsterConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SMonsterConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SMonsterConfig::CURRVERSION < cutVer)
    {
        cutVer = SMonsterConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SMonsterConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProf */
    {
        ret = destBuf.writeInt32(this->iProf);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSize */
    {
        ret = destBuf.writeInt32(this->iSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMonsterAIID */
    {
        ret = destBuf.writeInt32(this->iMonsterAIID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAttributeNum */
    {
        ret = destBuf.writeInt32(this->iAttributeNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiAttribute */
    {
        if (0 > this->iAttributeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iAttributeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iAttributeNum; aiAttribute_i++)
        {
            ret = destBuf.writeInt32(this->aiAttribute[aiAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iNormalSkill */
    {
        ret = destBuf.writeInt32(this->iNormalSkill);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInitSlot */
    {
        ret = destBuf.writeInt32(this->iInitSlot);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCounterAtkSkillID */
    {
        ret = destBuf.writeInt32(this->iCounterAtkSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SMonsterConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SMonsterConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SMonsterConfig::CURRVERSION < cutVer)
    {
        cutVer = SMonsterConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SMonsterConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iProf */
    {
        ret = srcBuf.readInt32(this->iProf);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSize */
    {
        ret = srcBuf.readInt32(this->iSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMonsterAIID */
    {
        ret = srcBuf.readInt32(this->iMonsterAIID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAttributeNum */
    {
        ret = srcBuf.readInt32(this->iAttributeNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiAttribute */
    {
        if (0 > this->iAttributeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iAttributeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iAttributeNum; aiAttribute_i++)
        {
            ret = srcBuf.readInt32(this->aiAttribute[aiAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iNormalSkill */
    {
        ret = srcBuf.readInt32(this->iNormalSkill);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInitSlot */
    {
        ret = srcBuf.readInt32(this->iInitSlot);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCounterAtkSkillID */
    {
        ret = srcBuf.readInt32(this->iCounterAtkSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SMonsterConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SMonsterConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iProf */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iProf]", "%d", this->iProf);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSize */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSize]", "%d", this->iSize);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMonsterAIID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMonsterAIID]", "%d", this->iMonsterAIID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAttributeNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAttributeNum]", "%d", this->iAttributeNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiAttribute */
    if (0 > this->iAttributeNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iAttributeNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiAttribute]", this->iAttributeNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iAttributeNum; aiAttribute_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiAttribute[aiAttribute_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNormalSkill */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNormalSkill]", "%d", this->iNormalSkill);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInitSlot */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInitSlot]", "%d", this->iInitSlot);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCounterAtkSkillID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCounterAtkSkillID]", "%d", this->iCounterAtkSkillID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SMonsterConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SMonsterConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SGameItemConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SGameItemConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SGameItemConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SGameItemConfig::CURRVERSION < cutVer)
    {
        cutVer = SGameItemConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SGameItemConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iItemType */
    {
        ret = destBuf.writeInt32(this->iItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSkillID */
    {
        ret = destBuf.writeInt32(this->iSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SGameItemConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SGameItemConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SGameItemConfig::CURRVERSION < cutVer)
    {
        cutVer = SGameItemConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SGameItemConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iItemType */
    {
        ret = srcBuf.readInt32(this->iItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSkillID */
    {
        ret = srcBuf.readInt32(this->iSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SGameItemConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SGameItemConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iItemType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iItemType]", "%d", this->iItemType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSkillID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSkillID]", "%d", this->iSkillID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SGameItemConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SGameItemConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SFightPosInfo::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SFightPosInfo::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightPosInfo::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightPosInfo::CURRVERSION < cutVer)
    {
        cutVer = SFightPosInfo::CURRVERSION;
    }

    /* check cutversion */
    if (SFightPosInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iPosX */
    {
        ret = destBuf.writeInt32(this->iPosX);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPosY */
    {
        ret = destBuf.writeInt32(this->iPosY);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDirection */
    {
        ret = destBuf.writeInt32(this->iDirection);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SFightPosInfo::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightPosInfo::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightPosInfo::CURRVERSION < cutVer)
    {
        cutVer = SFightPosInfo::CURRVERSION;
    }

    /* check cutversion */
    if (SFightPosInfo::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iPosX */
    {
        ret = srcBuf.readInt32(this->iPosX);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPosY */
    {
        ret = srcBuf.readInt32(this->iPosY);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDirection */
    {
        ret = srcBuf.readInt32(this->iDirection);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SFightPosInfo::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightPosInfo::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iPosX */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPosX]", "%d", this->iPosX);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPosY */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPosY]", "%d", this->iPosY);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDirection */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDirection]", "%d", this->iDirection);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SFightPosInfo::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SFightPosInfo::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SBattleCrossConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SBattleCrossConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SBattleCrossConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SBattleCrossConfig::CURRVERSION < cutVer)
    {
        cutVer = SBattleCrossConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SBattleCrossConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMapID */
    {
        ret = destBuf.writeInt32(this->iMapID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNeedSetForm */
    {
        ret = destBuf.writeInt32(this->iNeedSetForm);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMonsterGroup */
    {
        ret = destBuf.writeInt32(this->iMonsterGroup);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDropRewardID */
    {
        ret = destBuf.writeInt32(this->iDropRewardID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSelfUnitNum */
    {
        ret = destBuf.writeInt32(this->iSelfUnitNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astFightPosInfo */
    {
        if (0 > this->iSelfUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_BATTLEFIELD_UNIT_POS_NUM < this->iSelfUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astFightPosInfo_i = 0; astFightPosInfo_i < this->iSelfUnitNum; astFightPosInfo_i++)
        {
            ret = this->astFightPosInfo[astFightPosInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iEnemyUnitNum */
    {
        ret = destBuf.writeInt32(this->iEnemyUnitNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astEnemyFightPosInfo */
    {
        if (0 > this->iEnemyUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_BATTLEFIELD_UNIT_POS_NUM < this->iEnemyUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astEnemyFightPosInfo_i = 0; astEnemyFightPosInfo_i < this->iEnemyUnitNum; astEnemyFightPosInfo_i++)
        {
            ret = this->astEnemyFightPosInfo[astEnemyFightPosInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SBattleCrossConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SBattleCrossConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SBattleCrossConfig::CURRVERSION < cutVer)
    {
        cutVer = SBattleCrossConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SBattleCrossConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMapID */
    {
        ret = srcBuf.readInt32(this->iMapID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNeedSetForm */
    {
        ret = srcBuf.readInt32(this->iNeedSetForm);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMonsterGroup */
    {
        ret = srcBuf.readInt32(this->iMonsterGroup);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDropRewardID */
    {
        ret = srcBuf.readInt32(this->iDropRewardID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSelfUnitNum */
    {
        ret = srcBuf.readInt32(this->iSelfUnitNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astFightPosInfo */
    {
        if (0 > this->iSelfUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_BATTLEFIELD_UNIT_POS_NUM < this->iSelfUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astFightPosInfo_i = 0; astFightPosInfo_i < this->iSelfUnitNum; astFightPosInfo_i++)
        {
            ret = this->astFightPosInfo[astFightPosInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iEnemyUnitNum */
    {
        ret = srcBuf.readInt32(this->iEnemyUnitNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astEnemyFightPosInfo */
    {
        if (0 > this->iEnemyUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_BATTLEFIELD_UNIT_POS_NUM < this->iEnemyUnitNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astEnemyFightPosInfo_i = 0; astEnemyFightPosInfo_i < this->iEnemyUnitNum; astEnemyFightPosInfo_i++)
        {
            ret = this->astEnemyFightPosInfo[astEnemyFightPosInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SBattleCrossConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SBattleCrossConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMapID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMapID]", "%d", this->iMapID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNeedSetForm */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNeedSetForm]", "%d", this->iNeedSetForm);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMonsterGroup */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMonsterGroup]", "%d", this->iMonsterGroup);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDropRewardID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDropRewardID]", "%d", this->iDropRewardID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSelfUnitNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSelfUnitNum]", "%d", this->iSelfUnitNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astFightPosInfo */
    if (0 > this->iSelfUnitNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_BATTLEFIELD_UNIT_POS_NUM < this->iSelfUnitNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astFightPosInfo_i = 0; astFightPosInfo_i < this->iSelfUnitNum; astFightPosInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astFightPosInfo]", astFightPosInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astFightPosInfo[astFightPosInfo_i] */
        if (0 > indent)
        {
            ret = this->astFightPosInfo[astFightPosInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astFightPosInfo[astFightPosInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            return ret;
        }
    }

    /* visualize member: this->iEnemyUnitNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iEnemyUnitNum]", "%d", this->iEnemyUnitNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astEnemyFightPosInfo */
    if (0 > this->iEnemyUnitNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_BATTLEFIELD_UNIT_POS_NUM < this->iEnemyUnitNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astEnemyFightPosInfo_i = 0; astEnemyFightPosInfo_i < this->iEnemyUnitNum; astEnemyFightPosInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astEnemyFightPosInfo]", astEnemyFightPosInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astEnemyFightPosInfo[astEnemyFightPosInfo_i] */
        if (0 > indent)
        {
            ret = this->astEnemyFightPosInfo[astEnemyFightPosInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astEnemyFightPosInfo[astEnemyFightPosInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            return ret;
        }
    }

    return ret;
}

const char*
SBattleCrossConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SBattleCrossConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
OneCrossMonster::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
OneCrossMonster::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OneCrossMonster::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OneCrossMonster::CURRVERSION < cutVer)
    {
        cutVer = OneCrossMonster::CURRVERSION;
    }

    /* check cutversion */
    if (OneCrossMonster::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iMonsterID */
    {
        ret = destBuf.writeInt32(this->iMonsterID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iItemNum */
    {
        ret = destBuf.writeInt32(this->iItemNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiItemInfo */
    {
        if (0 > this->iItemNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_MONSTER_ITEM_NUM < this->iItemNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiItemInfo_i = 0; aiItemInfo_i < this->iItemNum; aiItemInfo_i++)
        {
            ret = destBuf.writeInt32(this->aiItemInfo[aiItemInfo_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
OneCrossMonster::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OneCrossMonster::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OneCrossMonster::CURRVERSION < cutVer)
    {
        cutVer = OneCrossMonster::CURRVERSION;
    }

    /* check cutversion */
    if (OneCrossMonster::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iMonsterID */
    {
        ret = srcBuf.readInt32(this->iMonsterID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iItemNum */
    {
        ret = srcBuf.readInt32(this->iItemNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiItemInfo */
    {
        if (0 > this->iItemNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_MONSTER_ITEM_NUM < this->iItemNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiItemInfo_i = 0; aiItemInfo_i < this->iItemNum; aiItemInfo_i++)
        {
            ret = srcBuf.readInt32(this->aiItemInfo[aiItemInfo_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
OneCrossMonster::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OneCrossMonster::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iMonsterID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMonsterID]", "%d", this->iMonsterID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iItemNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iItemNum]", "%d", this->iItemNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiItemInfo */
    if (0 > this->iItemNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_MONSTER_ITEM_NUM < this->iItemNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiItemInfo]", this->iItemNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiItemInfo_i = 0; aiItemInfo_i < this->iItemNum; aiItemInfo_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiItemInfo[aiItemInfo_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
OneCrossMonster::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
OneCrossMonster::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SCrossMonsterConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SCrossMonsterConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SCrossMonsterConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SCrossMonsterConfig::CURRVERSION < cutVer)
    {
        cutVer = SCrossMonsterConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SCrossMonsterConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMonsterNum */
    {
        ret = destBuf.writeInt32(this->iMonsterNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astMonsterInfo */
    {
        if (0 > this->iMonsterNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CROSS_MONSTER_NUM < this->iMonsterNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astMonsterInfo_i = 0; astMonsterInfo_i < this->iMonsterNum; astMonsterInfo_i++)
        {
            ret = this->astMonsterInfo[astMonsterInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SCrossMonsterConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SCrossMonsterConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SCrossMonsterConfig::CURRVERSION < cutVer)
    {
        cutVer = SCrossMonsterConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SCrossMonsterConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMonsterNum */
    {
        ret = srcBuf.readInt32(this->iMonsterNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astMonsterInfo */
    {
        if (0 > this->iMonsterNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_CROSS_MONSTER_NUM < this->iMonsterNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astMonsterInfo_i = 0; astMonsterInfo_i < this->iMonsterNum; astMonsterInfo_i++)
        {
            ret = this->astMonsterInfo[astMonsterInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SCrossMonsterConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SCrossMonsterConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMonsterNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMonsterNum]", "%d", this->iMonsterNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astMonsterInfo */
    if (0 > this->iMonsterNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_CROSS_MONSTER_NUM < this->iMonsterNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astMonsterInfo_i = 0; astMonsterInfo_i < this->iMonsterNum; astMonsterInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astMonsterInfo]", astMonsterInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astMonsterInfo[astMonsterInfo_i] */
        if (0 > indent)
        {
            ret = this->astMonsterInfo[astMonsterInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astMonsterInfo[astMonsterInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            return ret;
        }
    }

    return ret;
}

const char*
SCrossMonsterConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SCrossMonsterConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
STrapConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
STrapConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
STrapConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || STrapConfig::CURRVERSION < cutVer)
    {
        cutVer = STrapConfig::CURRVERSION;
    }

    /* check cutversion */
    if (STrapConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTrapType */
    {
        ret = destBuf.writeInt32(this->iTrapType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTriggerType */
    {
        ret = destBuf.writeInt32(this->iTriggerType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInterruptType */
    {
        ret = destBuf.writeInt32(this->iInterruptType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iVisiableType */
    {
        ret = destBuf.writeInt32(this->iVisiableType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTrapHP */
    {
        ret = destBuf.writeInt32(this->iTrapHP);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTrapValue */
    {
        ret = destBuf.writeInt32(this->iTrapValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRangeID */
    {
        ret = destBuf.writeInt32(this->iRangeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
STrapConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
STrapConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || STrapConfig::CURRVERSION < cutVer)
    {
        cutVer = STrapConfig::CURRVERSION;
    }

    /* check cutversion */
    if (STrapConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTrapType */
    {
        ret = srcBuf.readInt32(this->iTrapType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTriggerType */
    {
        ret = srcBuf.readInt32(this->iTriggerType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInterruptType */
    {
        ret = srcBuf.readInt32(this->iInterruptType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iVisiableType */
    {
        ret = srcBuf.readInt32(this->iVisiableType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTrapHP */
    {
        ret = srcBuf.readInt32(this->iTrapHP);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTrapValue */
    {
        ret = srcBuf.readInt32(this->iTrapValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRangeID */
    {
        ret = srcBuf.readInt32(this->iRangeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
STrapConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
STrapConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTrapType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTrapType]", "%d", this->iTrapType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTriggerType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTriggerType]", "%d", this->iTriggerType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInterruptType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInterruptType]", "%d", this->iInterruptType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVisiableType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVisiableType]", "%d", this->iVisiableType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTrapHP */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTrapHP]", "%d", this->iTrapHP);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTrapValue */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTrapValue]", "%d", this->iTrapValue);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRangeID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRangeID]", "%d", this->iRangeID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
STrapConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
STrapConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SFightUnitAIConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SFightUnitAIConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightUnitAIConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightUnitAIConfig::CURRVERSION < cutVer)
    {
        cutVer = SFightUnitAIConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SFightUnitAIConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAIAttrNum */
    {
        ret = destBuf.writeInt32(this->iAIAttrNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiAIAttribute */
    {
        if (0 > this->iAIAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_UNIT_AI_ATTRIBUTE_NUM < this->iAIAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAIAttribute_i = 0; aiAIAttribute_i < this->iAIAttrNum; aiAIAttribute_i++)
        {
            ret = destBuf.writeInt32(this->aiAIAttribute[aiAIAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SFightUnitAIConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightUnitAIConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightUnitAIConfig::CURRVERSION < cutVer)
    {
        cutVer = SFightUnitAIConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SFightUnitAIConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAIAttrNum */
    {
        ret = srcBuf.readInt32(this->iAIAttrNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiAIAttribute */
    {
        if (0 > this->iAIAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_UNIT_AI_ATTRIBUTE_NUM < this->iAIAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAIAttribute_i = 0; aiAIAttribute_i < this->iAIAttrNum; aiAIAttribute_i++)
        {
            ret = srcBuf.readInt32(this->aiAIAttribute[aiAIAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SFightUnitAIConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightUnitAIConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAIAttrNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAIAttrNum]", "%d", this->iAIAttrNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiAIAttribute */
    if (0 > this->iAIAttrNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_UNIT_AI_ATTRIBUTE_NUM < this->iAIAttrNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiAIAttribute]", this->iAIAttrNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiAIAttribute_i = 0; aiAIAttribute_i < this->iAIAttrNum; aiAIAttribute_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiAIAttribute[aiAIAttribute_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SFightUnitAIConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SFightUnitAIConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SFightUnitSkillConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SFightUnitSkillConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightUnitSkillConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightUnitSkillConfig::CURRVERSION < cutVer)
    {
        cutVer = SFightUnitSkillConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SFightUnitSkillConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSkillType */
    {
        ret = destBuf.writeInt32(this->iSkillType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iComboNum */
    {
        ret = destBuf.writeInt32(this->iComboNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iJointAtkID */
    {
        ret = destBuf.writeInt32(this->iJointAtkID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCDRound */
    {
        ret = destBuf.writeInt32(this->iCDRound);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTargetType */
    {
        ret = destBuf.writeInt32(this->iTargetType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTargetAreaID */
    {
        ret = destBuf.writeInt32(this->iTargetAreaID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTargetRangeID */
    {
        ret = destBuf.writeInt32(this->iTargetRangeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iHitModifierID */
    {
        ret = destBuf.writeInt32(this->iHitModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDodgeModifierID */
    {
        ret = destBuf.writeInt32(this->iDodgeModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iPrecisionModifierID */
    {
        ret = destBuf.writeInt32(this->iPrecisionModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCopeModifierID */
    {
        ret = destBuf.writeInt32(this->iCopeModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iParryEffect */
    {
        ret = destBuf.writeInt32(this->iParryEffect);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCritModifierID */
    {
        ret = destBuf.writeInt32(this->iCritModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iToughModifierID */
    {
        ret = destBuf.writeInt32(this->iToughModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCritEffect */
    {
        ret = destBuf.writeInt32(this->iCritEffect);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDamageRangeID */
    {
        ret = destBuf.writeInt32(this->iDamageRangeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDamageID */
    {
        ret = destBuf.writeInt32(this->iDamageID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDamageBaseNum */
    {
        ret = destBuf.writeInt32(this->iDamageBaseNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDamageModifierID */
    {
        ret = destBuf.writeInt32(this->iDamageModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSelfBuff */
    {
        ret = destBuf.writeInt32(this->iSelfBuff);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTargetBuff */
    {
        ret = destBuf.writeInt32(this->iTargetBuff);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSelfMoveID */
    {
        ret = destBuf.writeInt32(this->iSelfMoveID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTargetMoveID */
    {
        ret = destBuf.writeInt32(this->iTargetMoveID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSkillBuffValue */
    {
        ret = destBuf.writeInt32(this->iSkillBuffValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSecondaryTarget */
    {
        ret = destBuf.writeInt32(this->iSecondaryTarget);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSpecialFuncType */
    {
        ret = destBuf.writeInt32(this->iSpecialFuncType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSpecialFuncParam */
    {
        ret = destBuf.writeInt32(this->iSpecialFuncParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SFightUnitSkillConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightUnitSkillConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightUnitSkillConfig::CURRVERSION < cutVer)
    {
        cutVer = SFightUnitSkillConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SFightUnitSkillConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSkillType */
    {
        ret = srcBuf.readInt32(this->iSkillType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iComboNum */
    {
        ret = srcBuf.readInt32(this->iComboNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iJointAtkID */
    {
        ret = srcBuf.readInt32(this->iJointAtkID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCDRound */
    {
        ret = srcBuf.readInt32(this->iCDRound);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTargetType */
    {
        ret = srcBuf.readInt32(this->iTargetType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTargetAreaID */
    {
        ret = srcBuf.readInt32(this->iTargetAreaID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTargetRangeID */
    {
        ret = srcBuf.readInt32(this->iTargetRangeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iHitModifierID */
    {
        ret = srcBuf.readInt32(this->iHitModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDodgeModifierID */
    {
        ret = srcBuf.readInt32(this->iDodgeModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iPrecisionModifierID */
    {
        ret = srcBuf.readInt32(this->iPrecisionModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCopeModifierID */
    {
        ret = srcBuf.readInt32(this->iCopeModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iParryEffect */
    {
        ret = srcBuf.readInt32(this->iParryEffect);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCritModifierID */
    {
        ret = srcBuf.readInt32(this->iCritModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iToughModifierID */
    {
        ret = srcBuf.readInt32(this->iToughModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCritEffect */
    {
        ret = srcBuf.readInt32(this->iCritEffect);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDamageRangeID */
    {
        ret = srcBuf.readInt32(this->iDamageRangeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDamageID */
    {
        ret = srcBuf.readInt32(this->iDamageID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDamageBaseNum */
    {
        ret = srcBuf.readInt32(this->iDamageBaseNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDamageModifierID */
    {
        ret = srcBuf.readInt32(this->iDamageModifierID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSelfBuff */
    {
        ret = srcBuf.readInt32(this->iSelfBuff);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTargetBuff */
    {
        ret = srcBuf.readInt32(this->iTargetBuff);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSelfMoveID */
    {
        ret = srcBuf.readInt32(this->iSelfMoveID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTargetMoveID */
    {
        ret = srcBuf.readInt32(this->iTargetMoveID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSkillBuffValue */
    {
        ret = srcBuf.readInt32(this->iSkillBuffValue);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSecondaryTarget */
    {
        ret = srcBuf.readInt32(this->iSecondaryTarget);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSpecialFuncType */
    {
        ret = srcBuf.readInt32(this->iSpecialFuncType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSpecialFuncParam */
    {
        ret = srcBuf.readInt32(this->iSpecialFuncParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SFightUnitSkillConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightUnitSkillConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSkillType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSkillType]", "%d", this->iSkillType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iComboNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iComboNum]", "%d", this->iComboNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iJointAtkID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iJointAtkID]", "%d", this->iJointAtkID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCDRound */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCDRound]", "%d", this->iCDRound);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTargetType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTargetType]", "%d", this->iTargetType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTargetAreaID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTargetAreaID]", "%d", this->iTargetAreaID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTargetRangeID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTargetRangeID]", "%d", this->iTargetRangeID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iHitModifierID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iHitModifierID]", "%d", this->iHitModifierID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDodgeModifierID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDodgeModifierID]", "%d", this->iDodgeModifierID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iPrecisionModifierID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iPrecisionModifierID]", "%d", this->iPrecisionModifierID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCopeModifierID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCopeModifierID]", "%d", this->iCopeModifierID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iParryEffect */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iParryEffect]", "%d", this->iParryEffect);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCritModifierID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCritModifierID]", "%d", this->iCritModifierID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iToughModifierID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iToughModifierID]", "%d", this->iToughModifierID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCritEffect */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCritEffect]", "%d", this->iCritEffect);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDamageRangeID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDamageRangeID]", "%d", this->iDamageRangeID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDamageID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDamageID]", "%d", this->iDamageID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDamageBaseNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDamageBaseNum]", "%d", this->iDamageBaseNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDamageModifierID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDamageModifierID]", "%d", this->iDamageModifierID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSelfBuff */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSelfBuff]", "%d", this->iSelfBuff);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTargetBuff */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTargetBuff]", "%d", this->iTargetBuff);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSelfMoveID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSelfMoveID]", "%d", this->iSelfMoveID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTargetMoveID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTargetMoveID]", "%d", this->iTargetMoveID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSkillBuffValue */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSkillBuffValue]", "%d", this->iSkillBuffValue);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSecondaryTarget */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSecondaryTarget]", "%d", this->iSecondaryTarget);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSpecialFuncType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSpecialFuncType]", "%d", this->iSpecialFuncType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSpecialFuncParam */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSpecialFuncParam]", "%d", this->iSpecialFuncParam);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SFightUnitSkillConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SFightUnitSkillConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SSkillRangeConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SSkillRangeConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillRangeConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SSkillRangeConfig::CURRVERSION < cutVer)
    {
        cutVer = SSkillRangeConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SSkillRangeConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRangeNum */
    {
        ret = destBuf.writeInt32(this->iRangeNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiRangeInfo */
    {
        if (0 > this->iRangeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SKILL_RANGE_INFO_NUM < this->iRangeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiRangeInfo_i = 0; aiRangeInfo_i < this->iRangeNum; aiRangeInfo_i++)
        {
            ret = destBuf.writeInt32(this->aiRangeInfo[aiRangeInfo_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iDecayParam */
    {
        ret = destBuf.writeInt32(this->iDecayParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRangeAreaParam */
    {
        ret = destBuf.writeInt32(this->iRangeAreaParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SSkillRangeConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillRangeConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SSkillRangeConfig::CURRVERSION < cutVer)
    {
        cutVer = SSkillRangeConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SSkillRangeConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRangeNum */
    {
        ret = srcBuf.readInt32(this->iRangeNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiRangeInfo */
    {
        if (0 > this->iRangeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SKILL_RANGE_INFO_NUM < this->iRangeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiRangeInfo_i = 0; aiRangeInfo_i < this->iRangeNum; aiRangeInfo_i++)
        {
            ret = srcBuf.readInt32(this->aiRangeInfo[aiRangeInfo_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iDecayParam */
    {
        ret = srcBuf.readInt32(this->iDecayParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRangeAreaParam */
    {
        ret = srcBuf.readInt32(this->iRangeAreaParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SSkillRangeConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillRangeConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRangeNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRangeNum]", "%d", this->iRangeNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiRangeInfo */
    if (0 > this->iRangeNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_SKILL_RANGE_INFO_NUM < this->iRangeNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiRangeInfo]", this->iRangeNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiRangeInfo_i = 0; aiRangeInfo_i < this->iRangeNum; aiRangeInfo_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiRangeInfo[aiRangeInfo_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDecayParam */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDecayParam]", "%d", this->iDecayParam);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRangeAreaParam */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRangeAreaParam]", "%d", this->iRangeAreaParam);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SSkillRangeConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SSkillRangeConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SSkillAreaConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SSkillAreaConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillAreaConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SSkillAreaConfig::CURRVERSION < cutVer)
    {
        cutVer = SSkillAreaConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SSkillAreaConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAreaPosNum */
    {
        ret = destBuf.writeInt32(this->iAreaPosNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astTargetPosInfo */
    {
        if (0 > this->iAreaPosNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SKILL_AREA_POS_NUM < this->iAreaPosNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astTargetPosInfo_i = 0; astTargetPosInfo_i < this->iAreaPosNum; astTargetPosInfo_i++)
        {
            ret = this->astTargetPosInfo[astTargetPosInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SSkillAreaConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillAreaConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SSkillAreaConfig::CURRVERSION < cutVer)
    {
        cutVer = SSkillAreaConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SSkillAreaConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAreaPosNum */
    {
        ret = srcBuf.readInt32(this->iAreaPosNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astTargetPosInfo */
    {
        if (0 > this->iAreaPosNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SKILL_AREA_POS_NUM < this->iAreaPosNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astTargetPosInfo_i = 0; astTargetPosInfo_i < this->iAreaPosNum; astTargetPosInfo_i++)
        {
            ret = this->astTargetPosInfo[astTargetPosInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SSkillAreaConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillAreaConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAreaPosNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAreaPosNum]", "%d", this->iAreaPosNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astTargetPosInfo */
    if (0 > this->iAreaPosNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_SKILL_AREA_POS_NUM < this->iAreaPosNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astTargetPosInfo_i = 0; astTargetPosInfo_i < this->iAreaPosNum; astTargetPosInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astTargetPosInfo]", astTargetPosInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astTargetPosInfo[astTargetPosInfo_i] */
        if (0 > indent)
        {
            ret = this->astTargetPosInfo[astTargetPosInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astTargetPosInfo[astTargetPosInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            return ret;
        }
    }

    return ret;
}

const char*
SSkillAreaConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SSkillAreaConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SSkillScoreConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SSkillScoreConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillScoreConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SSkillScoreConfig::CURRVERSION < cutVer)
    {
        cutVer = SSkillScoreConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SSkillScoreConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iScoreBaseNum */
    {
        ret = destBuf.writeInt32(this->iScoreBaseNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iScoreParam */
    {
        ret = destBuf.writeInt32(this->iScoreParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAttributeNum */
    {
        ret = destBuf.writeInt32(this->iAttributeNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiAttribute */
    {
        if (0 > this->iAttributeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iAttributeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iAttributeNum; aiAttribute_i++)
        {
            ret = destBuf.writeInt32(this->aiAttribute[aiAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SSkillScoreConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillScoreConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SSkillScoreConfig::CURRVERSION < cutVer)
    {
        cutVer = SSkillScoreConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SSkillScoreConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iScoreBaseNum */
    {
        ret = srcBuf.readInt32(this->iScoreBaseNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iScoreParam */
    {
        ret = srcBuf.readInt32(this->iScoreParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAttributeNum */
    {
        ret = srcBuf.readInt32(this->iAttributeNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiAttribute */
    {
        if (0 > this->iAttributeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iAttributeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iAttributeNum; aiAttribute_i++)
        {
            ret = srcBuf.readInt32(this->aiAttribute[aiAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SSkillScoreConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillScoreConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iScoreBaseNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iScoreBaseNum]", "%d", this->iScoreBaseNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iScoreParam */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iScoreParam]", "%d", this->iScoreParam);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAttributeNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAttributeNum]", "%d", this->iAttributeNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiAttribute */
    if (0 > this->iAttributeNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iAttributeNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiAttribute]", this->iAttributeNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iAttributeNum; aiAttribute_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiAttribute[aiAttribute_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SSkillScoreConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SSkillScoreConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SSkillDamageConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SSkillDamageConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillDamageConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SSkillDamageConfig::CURRVERSION < cutVer)
    {
        cutVer = SSkillDamageConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SSkillDamageConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAttack */
    {
        ret = destBuf.writeInt32(this->iAttack);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDefence */
    {
        ret = destBuf.writeInt32(this->iDefence);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSpreadAttrNum */
    {
        ret = destBuf.writeInt32(this->iSpreadAttrNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiSpreadAttr */
    {
        if (0 > this->iSpreadAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iSpreadAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiSpreadAttr_i = 0; aiSpreadAttr_i < this->iSpreadAttrNum; aiSpreadAttr_i++)
        {
            ret = destBuf.writeInt32(this->aiSpreadAttr[aiSpreadAttr_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iStrengthAttrNum */
    {
        ret = destBuf.writeInt32(this->iStrengthAttrNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiStrengthAttr */
    {
        if (0 > this->iStrengthAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iStrengthAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiStrengthAttr_i = 0; aiStrengthAttr_i < this->iStrengthAttrNum; aiStrengthAttr_i++)
        {
            ret = destBuf.writeInt32(this->aiStrengthAttr[aiStrengthAttr_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iVampireNum */
    {
        ret = destBuf.writeInt32(this->iVampireNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiVampireAttr */
    {
        if (0 > this->iVampireNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iVampireNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiVampireAttr_i = 0; aiVampireAttr_i < this->iVampireNum; aiVampireAttr_i++)
        {
            ret = destBuf.writeInt32(this->aiVampireAttr[aiVampireAttr_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SSkillDamageConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillDamageConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SSkillDamageConfig::CURRVERSION < cutVer)
    {
        cutVer = SSkillDamageConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SSkillDamageConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAttack */
    {
        ret = srcBuf.readInt32(this->iAttack);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDefence */
    {
        ret = srcBuf.readInt32(this->iDefence);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSpreadAttrNum */
    {
        ret = srcBuf.readInt32(this->iSpreadAttrNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiSpreadAttr */
    {
        if (0 > this->iSpreadAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iSpreadAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiSpreadAttr_i = 0; aiSpreadAttr_i < this->iSpreadAttrNum; aiSpreadAttr_i++)
        {
            ret = srcBuf.readInt32(this->aiSpreadAttr[aiSpreadAttr_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iStrengthAttrNum */
    {
        ret = srcBuf.readInt32(this->iStrengthAttrNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiStrengthAttr */
    {
        if (0 > this->iStrengthAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iStrengthAttrNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiStrengthAttr_i = 0; aiStrengthAttr_i < this->iStrengthAttrNum; aiStrengthAttr_i++)
        {
            ret = srcBuf.readInt32(this->aiStrengthAttr[aiStrengthAttr_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iVampireNum */
    {
        ret = srcBuf.readInt32(this->iVampireNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiVampireAttr */
    {
        if (0 > this->iVampireNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iVampireNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiVampireAttr_i = 0; aiVampireAttr_i < this->iVampireNum; aiVampireAttr_i++)
        {
            ret = srcBuf.readInt32(this->aiVampireAttr[aiVampireAttr_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SSkillDamageConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SSkillDamageConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAttack */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAttack]", "%d", this->iAttack);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDefence */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDefence]", "%d", this->iDefence);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSpreadAttrNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSpreadAttrNum]", "%d", this->iSpreadAttrNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiSpreadAttr */
    if (0 > this->iSpreadAttrNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iSpreadAttrNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiSpreadAttr]", this->iSpreadAttrNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiSpreadAttr_i = 0; aiSpreadAttr_i < this->iSpreadAttrNum; aiSpreadAttr_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiSpreadAttr[aiSpreadAttr_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iStrengthAttrNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iStrengthAttrNum]", "%d", this->iStrengthAttrNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiStrengthAttr */
    if (0 > this->iStrengthAttrNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iStrengthAttrNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiStrengthAttr]", this->iStrengthAttrNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiStrengthAttr_i = 0; aiStrengthAttr_i < this->iStrengthAttrNum; aiStrengthAttr_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiStrengthAttr[aiStrengthAttr_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iVampireNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iVampireNum]", "%d", this->iVampireNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiVampireAttr */
    if (0 > this->iVampireNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iVampireNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiVampireAttr]", this->iVampireNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiVampireAttr_i = 0; aiVampireAttr_i < this->iVampireNum; aiVampireAttr_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiVampireAttr[aiVampireAttr_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SSkillDamageConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SSkillDamageConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SFightBuffConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SFightBuffConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightBuffConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightBuffConfig::CURRVERSION < cutVer)
    {
        cutVer = SFightBuffConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SFightBuffConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAddBuffID */
    {
        ret = destBuf.writeInt32(this->iAddBuffID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDelBuffID */
    {
        ret = destBuf.writeInt32(this->iDelBuffID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBuffType */
    {
        ret = destBuf.writeInt32(this->iBuffType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iBuffLevel */
    {
        ret = destBuf.writeInt32(this->iBuffLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iEffectRound */
    {
        ret = destBuf.writeInt32(this->iEffectRound);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTriggerType */
    {
        ret = destBuf.writeInt32(this->iTriggerType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iEffectType */
    {
        ret = destBuf.writeInt32(this->iEffectType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProcessType */
    {
        ret = destBuf.writeInt32(this->iProcessType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProcessNum */
    {
        ret = destBuf.writeInt32(this->iProcessNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiProcessID */
    {
        if (0 > this->iProcessNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_BUFF_PARAM_NUM < this->iProcessNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiProcessID_i = 0; aiProcessID_i < this->iProcessNum; aiProcessID_i++)
        {
            ret = destBuf.writeInt32(this->aiProcessID[aiProcessID_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SFightBuffConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightBuffConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SFightBuffConfig::CURRVERSION < cutVer)
    {
        cutVer = SFightBuffConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SFightBuffConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAddBuffID */
    {
        ret = srcBuf.readInt32(this->iAddBuffID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDelBuffID */
    {
        ret = srcBuf.readInt32(this->iDelBuffID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBuffType */
    {
        ret = srcBuf.readInt32(this->iBuffType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iBuffLevel */
    {
        ret = srcBuf.readInt32(this->iBuffLevel);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iEffectRound */
    {
        ret = srcBuf.readInt32(this->iEffectRound);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTriggerType */
    {
        ret = srcBuf.readInt32(this->iTriggerType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iEffectType */
    {
        ret = srcBuf.readInt32(this->iEffectType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iProcessType */
    {
        ret = srcBuf.readInt32(this->iProcessType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iProcessNum */
    {
        ret = srcBuf.readInt32(this->iProcessNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiProcessID */
    {
        if (0 > this->iProcessNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_BUFF_PARAM_NUM < this->iProcessNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiProcessID_i = 0; aiProcessID_i < this->iProcessNum; aiProcessID_i++)
        {
            ret = srcBuf.readInt32(this->aiProcessID[aiProcessID_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SFightBuffConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SFightBuffConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAddBuffID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAddBuffID]", "%d", this->iAddBuffID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDelBuffID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDelBuffID]", "%d", this->iDelBuffID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBuffType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBuffType]", "%d", this->iBuffType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iBuffLevel */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iBuffLevel]", "%d", this->iBuffLevel);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iEffectRound */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iEffectRound]", "%d", this->iEffectRound);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTriggerType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTriggerType]", "%d", this->iTriggerType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iEffectType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iEffectType]", "%d", this->iEffectType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iProcessType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iProcessType]", "%d", this->iProcessType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iProcessNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iProcessNum]", "%d", this->iProcessNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiProcessID */
    if (0 > this->iProcessNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_BUFF_PARAM_NUM < this->iProcessNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiProcessID]", this->iProcessNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiProcessID_i = 0; aiProcessID_i < this->iProcessNum; aiProcessID_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiProcessID[aiProcessID_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SFightBuffConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SFightBuffConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SJointAttackConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SJointAttackConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SJointAttackConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SJointAttackConfig::CURRVERSION < cutVer)
    {
        cutVer = SJointAttackConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SJointAttackConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iNeedSkillNum */
    {
        ret = destBuf.writeInt32(this->iNeedSkillNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiNeedSkills */
    {
        if (0 > this->iNeedSkillNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_JOINT_NEED_SKILL_NUM < this->iNeedSkillNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiNeedSkills_i = 0; aiNeedSkills_i < this->iNeedSkillNum; aiNeedSkills_i++)
        {
            ret = destBuf.writeInt32(this->aiNeedSkills[aiNeedSkills_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SJointAttackConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SJointAttackConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SJointAttackConfig::CURRVERSION < cutVer)
    {
        cutVer = SJointAttackConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SJointAttackConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iNeedSkillNum */
    {
        ret = srcBuf.readInt32(this->iNeedSkillNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiNeedSkills */
    {
        if (0 > this->iNeedSkillNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_JOINT_NEED_SKILL_NUM < this->iNeedSkillNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiNeedSkills_i = 0; aiNeedSkills_i < this->iNeedSkillNum; aiNeedSkills_i++)
        {
            ret = srcBuf.readInt32(this->aiNeedSkills[aiNeedSkills_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SJointAttackConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SJointAttackConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNeedSkillNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNeedSkillNum]", "%d", this->iNeedSkillNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiNeedSkills */
    if (0 > this->iNeedSkillNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_JOINT_NEED_SKILL_NUM < this->iNeedSkillNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiNeedSkills]", this->iNeedSkillNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiNeedSkills_i = 0; aiNeedSkills_i < this->iNeedSkillNum; aiNeedSkills_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiNeedSkills[aiNeedSkills_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SJointAttackConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SJointAttackConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
OneRewardConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
OneRewardConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OneRewardConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OneRewardConfig::CURRVERSION < cutVer)
    {
        cutVer = OneRewardConfig::CURRVERSION;
    }

    /* check cutversion */
    if (OneRewardConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iDropRate */
    {
        ret = destBuf.writeInt32(this->iDropRate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDropType */
    {
        ret = destBuf.writeInt32(this->iDropType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDropID */
    {
        ret = destBuf.writeInt32(this->iDropID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDropMinNum */
    {
        ret = destBuf.writeInt32(this->iDropMinNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDropMaxNum */
    {
        ret = destBuf.writeInt32(this->iDropMaxNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OneRewardConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OneRewardConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || OneRewardConfig::CURRVERSION < cutVer)
    {
        cutVer = OneRewardConfig::CURRVERSION;
    }

    /* check cutversion */
    if (OneRewardConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iDropRate */
    {
        ret = srcBuf.readInt32(this->iDropRate);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDropType */
    {
        ret = srcBuf.readInt32(this->iDropType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDropID */
    {
        ret = srcBuf.readInt32(this->iDropID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDropMinNum */
    {
        ret = srcBuf.readInt32(this->iDropMinNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDropMaxNum */
    {
        ret = srcBuf.readInt32(this->iDropMaxNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
OneRewardConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
OneRewardConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iDropRate */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDropRate]", "%d", this->iDropRate);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDropType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDropType]", "%d", this->iDropType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDropID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDropID]", "%d", this->iDropID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDropMinNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDropMinNum]", "%d", this->iDropMinNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDropMaxNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDropMaxNum]", "%d", this->iDropMaxNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
OneRewardConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
OneRewardConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SDropRewardConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SDropRewardConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SDropRewardConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SDropRewardConfig::CURRVERSION < cutVer)
    {
        cutVer = SDropRewardConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SDropRewardConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAddedRewardID */
    {
        ret = destBuf.writeInt32(this->iAddedRewardID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTotalRewardNum */
    {
        ret = destBuf.writeInt32(this->iTotalRewardNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astRewards */
    {
        if (0 > this->iTotalRewardNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_REWARD_CONFIG_NUM < this->iTotalRewardNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astRewards_i = 0; astRewards_i < this->iTotalRewardNum; astRewards_i++)
        {
            ret = this->astRewards[astRewards_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SDropRewardConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SDropRewardConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SDropRewardConfig::CURRVERSION < cutVer)
    {
        cutVer = SDropRewardConfig::CURRVERSION;
    }

    /* check cutversion */
    if (SDropRewardConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAddedRewardID */
    {
        ret = srcBuf.readInt32(this->iAddedRewardID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTotalRewardNum */
    {
        ret = srcBuf.readInt32(this->iTotalRewardNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astRewards */
    {
        if (0 > this->iTotalRewardNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_REWARD_CONFIG_NUM < this->iTotalRewardNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astRewards_i = 0; astRewards_i < this->iTotalRewardNum; astRewards_i++)
        {
            ret = this->astRewards[astRewards_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
SDropRewardConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SDropRewardConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAddedRewardID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAddedRewardID]", "%d", this->iAddedRewardID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTotalRewardNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTotalRewardNum]", "%d", this->iTotalRewardNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astRewards */
    if (0 > this->iTotalRewardNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_REWARD_CONFIG_NUM < this->iTotalRewardNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astRewards_i = 0; astRewards_i < this->iTotalRewardNum; astRewards_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astRewards]", astRewards_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astRewards[astRewards_i] */
        if (0 > indent)
        {
            ret = this->astRewards[astRewards_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astRewards[astRewards_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            return ret;
        }
    }

    return ret;
}

const char*
SDropRewardConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SDropRewardConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
QMGeneralConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
QMGeneralConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
QMGeneralConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || QMGeneralConfig::CURRVERSION < cutVer)
    {
        cutVer = QMGeneralConfig::CURRVERSION;
    }

    /* check cutversion */
    if (QMGeneralConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->server_ip */
    {
        /* record sizeinfo position */
        const size_t sizePos4server_ip = destBuf.getUsedSize();

        /* reserve space for sizeinfo */
        ret = destBuf.reserve(sizeof(uint32_t));
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* record real-data's begin postion in buf */
        const size_t beginPos4server_ip = destBuf.getUsedSize();

        /* gurantee string or wstring terminated with null character */
        *(char*)&this->server_ip[sizeof(this->server_ip)-1] = '\0';

        size_t realSize4server_ip = strlen(this->server_ip) + 1;

        /* pack */
        ret = destBuf.writeBytes(this->server_ip, realSize4server_ip);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* set sizeinfo for this->server_ip */
        const size_t size4server_ip = destBuf.getUsedSize() - beginPos4server_ip;
        ret = destBuf.writeUInt32((uint32_t)(size4server_ip), sizePos4server_ip);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->login_port */
    {
        ret = destBuf.writeInt32(this->login_port);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->game_port */
    {
        ret = destBuf.writeInt32(this->game_port);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->world_id */
    {
        ret = destBuf.writeInt32(this->world_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
QMGeneralConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
QMGeneralConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || QMGeneralConfig::CURRVERSION < cutVer)
    {
        cutVer = QMGeneralConfig::CURRVERSION;
    }

    /* check cutversion */
    if (QMGeneralConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->server_ip */
    {
        /* get sizeinfo for this->server_ip */
        uint32_t size4server_ip;
        ret = srcBuf.readUInt32(size4server_ip);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* check whether data in buffer are enough */
        if (size4server_ip > srcBuf.getLeftSize())
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_SHORT_BUF_FOR_READ;
        }

        /* check whether sizeinfo is valid */
        if (size4server_ip > sizeof(this->server_ip))
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_STR_LEN_TOO_BIG;
        }

        /* string or wstring must contains a null character */
        if (1 > size4server_ip)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_STR_LEN_TOO_SMALL;
        }

        /* unpack */
        ret = srcBuf.readBytes(this->server_ip, size4server_ip);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* check whether string-content is consistent with sizeinfo */
        if ('\0' != this->server_ip[size4server_ip - 1])
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_STR_LEN_CONFLICT;
        }
        size_t realSize4server_ip = strlen(this->server_ip) + 1;
        if (size4server_ip != realSize4server_ip)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_STR_LEN_CONFLICT;
        }
    }

    /* unpack member: this->login_port */
    {
        ret = srcBuf.readInt32(this->login_port);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->game_port */
    {
        ret = srcBuf.readInt32(this->game_port);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->world_id */
    {
        ret = srcBuf.readInt32(this->world_id);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
QMGeneralConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
QMGeneralConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->server_ip */
    ret = TdrBufUtil::printString(destBuf, indent, separator, "[server_ip]", this->server_ip);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->login_port */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[login_port]", "%d", this->login_port);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->game_port */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[game_port]", "%d", this->game_port);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->world_id */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[world_id]", "%d", this->world_id);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
QMGeneralConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
QMGeneralConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CGameItemConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CGameItemConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CGameItemConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CGameItemConfig::CURRVERSION < cutVer)
    {
        cutVer = CGameItemConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CGameItemConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iItemType */
    {
        ret = destBuf.writeInt32(this->iItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iItemIcon */
    {
        ret = destBuf.writeInt32(this->iItemIcon);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSkillID */
    {
        ret = destBuf.writeInt32(this->iSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CGameItemConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CGameItemConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CGameItemConfig::CURRVERSION < cutVer)
    {
        cutVer = CGameItemConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CGameItemConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iItemType */
    {
        ret = srcBuf.readInt32(this->iItemType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iItemIcon */
    {
        ret = srcBuf.readInt32(this->iItemIcon);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSkillID */
    {
        ret = srcBuf.readInt32(this->iSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CGameItemConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CGameItemConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iItemType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iItemType]", "%d", this->iItemType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iItemIcon */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iItemIcon]", "%d", this->iItemIcon);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSkillID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSkillID]", "%d", this->iSkillID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CGameItemConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CGameItemConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CFightUnitConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CFightUnitConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CFightUnitConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CFightUnitConfig::CURRVERSION < cutVer)
    {
        cutVer = CFightUnitConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CFightUnitConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResourceID */
    {
        ret = destBuf.writeInt32(this->iResourceID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProf */
    {
        ret = destBuf.writeInt32(this->iProf);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSize */
    {
        ret = destBuf.writeInt32(this->iSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAINum */
    {
        ret = destBuf.writeInt32(this->iAINum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiUnitAIID */
    {
        if (0 > this->iAINum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_AI_NUM < this->iAINum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiUnitAIID_i = 0; aiUnitAIID_i < this->iAINum; aiUnitAIID_i++)
        {
            ret = destBuf.writeInt32(this->aiUnitAIID[aiUnitAIID_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iTotalAttribNum */
    {
        ret = destBuf.writeInt32(this->iTotalAttribNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiAttribute */
    {
        if (0 > this->iTotalAttribNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iTotalAttribNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iTotalAttribNum; aiAttribute_i++)
        {
            ret = destBuf.writeInt32(this->aiAttribute[aiAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iNormalSkill */
    {
        ret = destBuf.writeInt32(this->iNormalSkill);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iInitSlot */
    {
        ret = destBuf.writeInt32(this->iInitSlot);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCounterAtkSkillID */
    {
        ret = destBuf.writeInt32(this->iCounterAtkSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CFightUnitConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CFightUnitConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CFightUnitConfig::CURRVERSION < cutVer)
    {
        cutVer = CFightUnitConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CFightUnitConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResourceID */
    {
        ret = srcBuf.readInt32(this->iResourceID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iProf */
    {
        ret = srcBuf.readInt32(this->iProf);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSize */
    {
        ret = srcBuf.readInt32(this->iSize);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAINum */
    {
        ret = srcBuf.readInt32(this->iAINum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiUnitAIID */
    {
        if (0 > this->iAINum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_AI_NUM < this->iAINum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiUnitAIID_i = 0; aiUnitAIID_i < this->iAINum; aiUnitAIID_i++)
        {
            ret = srcBuf.readInt32(this->aiUnitAIID[aiUnitAIID_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iTotalAttribNum */
    {
        ret = srcBuf.readInt32(this->iTotalAttribNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiAttribute */
    {
        if (0 > this->iTotalAttribNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iTotalAttribNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iTotalAttribNum; aiAttribute_i++)
        {
            ret = srcBuf.readInt32(this->aiAttribute[aiAttribute_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iNormalSkill */
    {
        ret = srcBuf.readInt32(this->iNormalSkill);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iInitSlot */
    {
        ret = srcBuf.readInt32(this->iInitSlot);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCounterAtkSkillID */
    {
        ret = srcBuf.readInt32(this->iCounterAtkSkillID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CFightUnitConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CFightUnitConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResourceID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResourceID]", "%d", this->iResourceID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iProf */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iProf]", "%d", this->iProf);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSize */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSize]", "%d", this->iSize);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAINum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAINum]", "%d", this->iAINum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiUnitAIID */
    if (0 > this->iAINum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_UNIT_AI_NUM < this->iAINum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiUnitAIID]", this->iAINum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiUnitAIID_i = 0; aiUnitAIID_i < this->iAINum; aiUnitAIID_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiUnitAIID[aiUnitAIID_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTotalAttribNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTotalAttribNum]", "%d", this->iTotalAttribNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiAttribute */
    if (0 > this->iTotalAttribNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_FIGHT_UNIT_ATTRIBUTE_NUM < this->iTotalAttribNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiAttribute]", this->iTotalAttribNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiAttribute_i = 0; aiAttribute_i < this->iTotalAttribNum; aiAttribute_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiAttribute[aiAttribute_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iNormalSkill */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iNormalSkill]", "%d", this->iNormalSkill);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iInitSlot */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iInitSlot]", "%d", this->iInitSlot);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCounterAtkSkillID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCounterAtkSkillID]", "%d", this->iCounterAtkSkillID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CFightUnitConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CFightUnitConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CMonsterConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CMonsterConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CMonsterConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CMonsterConfig::CURRVERSION < cutVer)
    {
        cutVer = CMonsterConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CMonsterConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iResourceID */
    {
        ret = destBuf.writeInt32(this->iResourceID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iProf */
    {
        ret = destBuf.writeInt32(this->iProf);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CMonsterConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CMonsterConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CMonsterConfig::CURRVERSION < cutVer)
    {
        cutVer = CMonsterConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CMonsterConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iResourceID */
    {
        ret = srcBuf.readInt32(this->iResourceID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iProf */
    {
        ret = srcBuf.readInt32(this->iProf);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CMonsterConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CMonsterConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iResourceID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iResourceID]", "%d", this->iResourceID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iProf */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iProf]", "%d", this->iProf);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CMonsterConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CMonsterConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CBattleCrossConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CBattleCrossConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CBattleCrossConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CBattleCrossConfig::CURRVERSION < cutVer)
    {
        cutVer = CBattleCrossConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CBattleCrossConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iMapID */
    {
        ret = destBuf.writeInt32(this->iMapID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDropRewardID */
    {
        ret = destBuf.writeInt32(this->iDropRewardID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CBattleCrossConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CBattleCrossConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CBattleCrossConfig::CURRVERSION < cutVer)
    {
        cutVer = CBattleCrossConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CBattleCrossConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iMapID */
    {
        ret = srcBuf.readInt32(this->iMapID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDropRewardID */
    {
        ret = srcBuf.readInt32(this->iDropRewardID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CBattleCrossConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CBattleCrossConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iMapID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iMapID]", "%d", this->iMapID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDropRewardID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDropRewardID]", "%d", this->iDropRewardID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CBattleCrossConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CBattleCrossConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CFightUnitSkillConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CFightUnitSkillConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CFightUnitSkillConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CFightUnitSkillConfig::CURRVERSION < cutVer)
    {
        cutVer = CFightUnitSkillConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CFightUnitSkillConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSkillIcon */
    {
        ret = destBuf.writeInt32(this->iSkillIcon);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSkillType */
    {
        ret = destBuf.writeInt32(this->iSkillType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iCDRound */
    {
        ret = destBuf.writeInt32(this->iCDRound);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTargetType */
    {
        ret = destBuf.writeInt32(this->iTargetType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iTargetAreaID */
    {
        ret = destBuf.writeInt32(this->iTargetAreaID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDamageRangeID */
    {
        ret = destBuf.writeInt32(this->iDamageRangeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iDamageID */
    {
        ret = destBuf.writeInt32(this->iDamageID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iSecondaryTarget */
    {
        ret = destBuf.writeInt32(this->iSecondaryTarget);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CFightUnitSkillConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CFightUnitSkillConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CFightUnitSkillConfig::CURRVERSION < cutVer)
    {
        cutVer = CFightUnitSkillConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CFightUnitSkillConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSkillIcon */
    {
        ret = srcBuf.readInt32(this->iSkillIcon);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSkillType */
    {
        ret = srcBuf.readInt32(this->iSkillType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iCDRound */
    {
        ret = srcBuf.readInt32(this->iCDRound);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTargetType */
    {
        ret = srcBuf.readInt32(this->iTargetType);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iTargetAreaID */
    {
        ret = srcBuf.readInt32(this->iTargetAreaID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDamageRangeID */
    {
        ret = srcBuf.readInt32(this->iDamageRangeID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iDamageID */
    {
        ret = srcBuf.readInt32(this->iDamageID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iSecondaryTarget */
    {
        ret = srcBuf.readInt32(this->iSecondaryTarget);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CFightUnitSkillConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CFightUnitSkillConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSkillIcon */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSkillIcon]", "%d", this->iSkillIcon);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSkillType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSkillType]", "%d", this->iSkillType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iCDRound */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iCDRound]", "%d", this->iCDRound);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTargetType */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTargetType]", "%d", this->iTargetType);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iTargetAreaID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iTargetAreaID]", "%d", this->iTargetAreaID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDamageRangeID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDamageRangeID]", "%d", this->iDamageRangeID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDamageID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDamageID]", "%d", this->iDamageID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iSecondaryTarget */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iSecondaryTarget]", "%d", this->iSecondaryTarget);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CFightUnitSkillConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CFightUnitSkillConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CSkillRangeConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CSkillRangeConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CSkillRangeConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CSkillRangeConfig::CURRVERSION < cutVer)
    {
        cutVer = CSkillRangeConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CSkillRangeConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRangeNum */
    {
        ret = destBuf.writeInt32(this->iRangeNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->aiRangeInfo */
    {
        if (0 > this->iRangeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SKILL_RANGE_INFO_NUM < this->iRangeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiRangeInfo_i = 0; aiRangeInfo_i < this->iRangeNum; aiRangeInfo_i++)
        {
            ret = destBuf.writeInt32(this->aiRangeInfo[aiRangeInfo_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* pack member: this->iDecayParam */
    {
        ret = destBuf.writeInt32(this->iDecayParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iRangeAreaParam */
    {
        ret = destBuf.writeInt32(this->iRangeAreaParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CSkillRangeConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CSkillRangeConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CSkillRangeConfig::CURRVERSION < cutVer)
    {
        cutVer = CSkillRangeConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CSkillRangeConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRangeNum */
    {
        ret = srcBuf.readInt32(this->iRangeNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->aiRangeInfo */
    {
        if (0 > this->iRangeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SKILL_RANGE_INFO_NUM < this->iRangeNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t aiRangeInfo_i = 0; aiRangeInfo_i < this->iRangeNum; aiRangeInfo_i++)
        {
            ret = srcBuf.readInt32(this->aiRangeInfo[aiRangeInfo_i]);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    /* unpack member: this->iDecayParam */
    {
        ret = srcBuf.readInt32(this->iDecayParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iRangeAreaParam */
    {
        ret = srcBuf.readInt32(this->iRangeAreaParam);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
CSkillRangeConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CSkillRangeConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRangeNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRangeNum]", "%d", this->iRangeNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->aiRangeInfo */
    if (0 > this->iRangeNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_SKILL_RANGE_INFO_NUM < this->iRangeNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    ret = TdrBufUtil::printArray(destBuf, indent, separator, "[aiRangeInfo]", this->iRangeNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }
    for (int32_t aiRangeInfo_i = 0; aiRangeInfo_i < this->iRangeNum; aiRangeInfo_i++)
    {
        ret = destBuf.textize(" ""%d", this->aiRangeInfo[aiRangeInfo_i]);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    ret = destBuf.writeCharWithNull(separator);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iDecayParam */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iDecayParam]", "%d", this->iDecayParam);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iRangeAreaParam */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iRangeAreaParam]", "%d", this->iRangeAreaParam);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
CSkillRangeConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CSkillRangeConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
CSkillAreaConfig::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
CSkillAreaConfig::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CSkillAreaConfig::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CSkillAreaConfig::CURRVERSION < cutVer)
    {
        cutVer = CSkillAreaConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CSkillAreaConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->iConfigID */
    {
        ret = destBuf.writeInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->iAreaPosNum */
    {
        ret = destBuf.writeInt32(this->iAreaPosNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->astTargetPosInfo */
    {
        if (0 > this->iAreaPosNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SKILL_AREA_POS_NUM < this->iAreaPosNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astTargetPosInfo_i = 0; astTargetPosInfo_i < this->iAreaPosNum; astTargetPosInfo_i++)
        {
            ret = this->astTargetPosInfo[astTargetPosInfo_i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CSkillAreaConfig::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CSkillAreaConfig::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || CSkillAreaConfig::CURRVERSION < cutVer)
    {
        cutVer = CSkillAreaConfig::CURRVERSION;
    }

    /* check cutversion */
    if (CSkillAreaConfig::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->iConfigID */
    {
        ret = srcBuf.readInt32(this->iConfigID);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->iAreaPosNum */
    {
        ret = srcBuf.readInt32(this->iAreaPosNum);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->astTargetPosInfo */
    {
        if (0 > this->iAreaPosNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_MINUS_REFER_VALUE;
        }
        if (MAX_SKILL_AREA_POS_NUM < this->iAreaPosNum)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (int32_t astTargetPosInfo_i = 0; astTargetPosInfo_i < this->iAreaPosNum; astTargetPosInfo_i++)
        {
            ret = this->astTargetPosInfo[astTargetPosInfo_i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
CSkillAreaConfig::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
CSkillAreaConfig::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->iConfigID */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iConfigID]", "%d", this->iConfigID);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->iAreaPosNum */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[iAreaPosNum]", "%d", this->iAreaPosNum);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->astTargetPosInfo */
    if (0 > this->iAreaPosNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_MINUS_REFER_VALUE;
    }
    if (MAX_SKILL_AREA_POS_NUM < this->iAreaPosNum)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (int32_t astTargetPosInfo_i = 0; astTargetPosInfo_i < this->iAreaPosNum; astTargetPosInfo_i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[astTargetPosInfo]", astTargetPosInfo_i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->astTargetPosInfo[astTargetPosInfo_i] */
        if (0 > indent)
        {
            ret = this->astTargetPosInfo[astTargetPosInfo_i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->astTargetPosInfo[astTargetPosInfo_i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            return ret;
        }
    }

    return ret;
}

const char*
CSkillAreaConfig::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
CSkillAreaConfig::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


}
